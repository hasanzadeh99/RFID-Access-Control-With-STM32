
RFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004208  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080042c8  080042c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004360  08004360  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08004360  08004360  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004360  08004360  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004360  08004360  00014360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000014  0800437c  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800437c  000201c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e30  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002cb1  00000000  00000000  00037e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f10  00000000  00000000  0003ab20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dd8  00000000  00000000  0003ba30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011036  00000000  00000000  0003c808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e45d  00000000  00000000  0004d83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00057115  00000000  00000000  0005bc9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b2db0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  000b2e2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042b0 	.word	0x080042b0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080042b0 	.word	0x080042b0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000224:	4b07      	ldr	r3, [pc, #28]	; (8000244 <HAL_Init+0x24>)
 8000226:	681a      	ldr	r2, [r3, #0]
 8000228:	4b06      	ldr	r3, [pc, #24]	; (8000244 <HAL_Init+0x24>)
 800022a:	2110      	movs	r1, #16
 800022c:	430a      	orrs	r2, r1
 800022e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000230:	2000      	movs	r0, #0
 8000232:	f000 f809 	bl	8000248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000236:	f003 fe13 	bl	8003e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40022000 	.word	0x40022000

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b082      	sub	sp, #8
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000250:	f001 fd30 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8000254:	0002      	movs	r2, r0
 8000256:	23fa      	movs	r3, #250	; 0xfa
 8000258:	0099      	lsls	r1, r3, #2
 800025a:	0010      	movs	r0, r2
 800025c:	f7ff ff54 	bl	8000108 <__udivsi3>
 8000260:	0003      	movs	r3, r0
 8000262:	0018      	movs	r0, r3
 8000264:	f000 f90d 	bl	8000482 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000268:	6879      	ldr	r1, [r7, #4]
 800026a:	2301      	movs	r3, #1
 800026c:	425b      	negs	r3, r3
 800026e:	2200      	movs	r2, #0
 8000270:	0018      	movs	r0, r3
 8000272:	f000 f8e1 	bl	8000438 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000276:	2300      	movs	r3, #0
}
 8000278:	0018      	movs	r0, r3
 800027a:	46bd      	mov	sp, r7
 800027c:	b002      	add	sp, #8
 800027e:	bd80      	pop	{r7, pc}

08000280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  uwTick++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <HAL_IncTick+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	1c5a      	adds	r2, r3, #1
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <HAL_IncTick+0x14>)
 800028c:	601a      	str	r2, [r3, #0]
}
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000048 	.word	0x20000048

08000298 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  return uwTick;
 800029c:	4b02      	ldr	r3, [pc, #8]	; (80002a8 <HAL_GetTick+0x10>)
 800029e:	681b      	ldr	r3, [r3, #0]
}
 80002a0:	0018      	movs	r0, r3
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)
 80002a8:	20000048 	.word	0x20000048

080002ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002b4:	f7ff fff0 	bl	8000298 <HAL_GetTick>
 80002b8:	0003      	movs	r3, r0
 80002ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	3301      	adds	r3, #1
 80002c4:	d002      	beq.n	80002cc <HAL_Delay+0x20>
  {
     wait++;
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	3301      	adds	r3, #1
 80002ca:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	f7ff ffe3 	bl	8000298 <HAL_GetTick>
 80002d2:	0002      	movs	r2, r0
 80002d4:	68bb      	ldr	r3, [r7, #8]
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	68fa      	ldr	r2, [r7, #12]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d8f7      	bhi.n	80002ce <HAL_Delay+0x22>
  {
  }
}
 80002de:	46c0      	nop			; (mov r8, r8)
 80002e0:	46bd      	mov	sp, r7
 80002e2:	b004      	add	sp, #16
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	0002      	movs	r2, r0
 80002f0:	1dfb      	adds	r3, r7, #7
 80002f2:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	231f      	movs	r3, #31
 80002fc:	401a      	ands	r2, r3
 80002fe:	4b04      	ldr	r3, [pc, #16]	; (8000310 <NVIC_EnableIRQ+0x28>)
 8000300:	2101      	movs	r1, #1
 8000302:	4091      	lsls	r1, r2
 8000304:	000a      	movs	r2, r1
 8000306:	601a      	str	r2, [r3, #0]
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	6039      	str	r1, [r7, #0]
 800031e:	1dfb      	adds	r3, r7, #7
 8000320:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000322:	1dfb      	adds	r3, r7, #7
 8000324:	781b      	ldrb	r3, [r3, #0]
 8000326:	2b7f      	cmp	r3, #127	; 0x7f
 8000328:	d932      	bls.n	8000390 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800032a:	4a2f      	ldr	r2, [pc, #188]	; (80003e8 <NVIC_SetPriority+0xd4>)
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	0019      	movs	r1, r3
 8000332:	230f      	movs	r3, #15
 8000334:	400b      	ands	r3, r1
 8000336:	3b08      	subs	r3, #8
 8000338:	089b      	lsrs	r3, r3, #2
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18d3      	adds	r3, r2, r3
 8000340:	3304      	adds	r3, #4
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	1dfa      	adds	r2, r7, #7
 8000346:	7812      	ldrb	r2, [r2, #0]
 8000348:	0011      	movs	r1, r2
 800034a:	2203      	movs	r2, #3
 800034c:	400a      	ands	r2, r1
 800034e:	00d2      	lsls	r2, r2, #3
 8000350:	21ff      	movs	r1, #255	; 0xff
 8000352:	4091      	lsls	r1, r2
 8000354:	000a      	movs	r2, r1
 8000356:	43d2      	mvns	r2, r2
 8000358:	401a      	ands	r2, r3
 800035a:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	019b      	lsls	r3, r3, #6
 8000360:	22ff      	movs	r2, #255	; 0xff
 8000362:	401a      	ands	r2, r3
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	0018      	movs	r0, r3
 800036a:	2303      	movs	r3, #3
 800036c:	4003      	ands	r3, r0
 800036e:	00db      	lsls	r3, r3, #3
 8000370:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000372:	481d      	ldr	r0, [pc, #116]	; (80003e8 <NVIC_SetPriority+0xd4>)
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	001c      	movs	r4, r3
 800037a:	230f      	movs	r3, #15
 800037c:	4023      	ands	r3, r4
 800037e:	3b08      	subs	r3, #8
 8000380:	089b      	lsrs	r3, r3, #2
 8000382:	430a      	orrs	r2, r1
 8000384:	3306      	adds	r3, #6
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	18c3      	adds	r3, r0, r3
 800038a:	3304      	adds	r3, #4
 800038c:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800038e:	e027      	b.n	80003e0 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000390:	4a16      	ldr	r2, [pc, #88]	; (80003ec <NVIC_SetPriority+0xd8>)
 8000392:	1dfb      	adds	r3, r7, #7
 8000394:	781b      	ldrb	r3, [r3, #0]
 8000396:	b25b      	sxtb	r3, r3
 8000398:	089b      	lsrs	r3, r3, #2
 800039a:	33c0      	adds	r3, #192	; 0xc0
 800039c:	009b      	lsls	r3, r3, #2
 800039e:	589b      	ldr	r3, [r3, r2]
 80003a0:	1dfa      	adds	r2, r7, #7
 80003a2:	7812      	ldrb	r2, [r2, #0]
 80003a4:	0011      	movs	r1, r2
 80003a6:	2203      	movs	r2, #3
 80003a8:	400a      	ands	r2, r1
 80003aa:	00d2      	lsls	r2, r2, #3
 80003ac:	21ff      	movs	r1, #255	; 0xff
 80003ae:	4091      	lsls	r1, r2
 80003b0:	000a      	movs	r2, r1
 80003b2:	43d2      	mvns	r2, r2
 80003b4:	401a      	ands	r2, r3
 80003b6:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	019b      	lsls	r3, r3, #6
 80003bc:	22ff      	movs	r2, #255	; 0xff
 80003be:	401a      	ands	r2, r3
 80003c0:	1dfb      	adds	r3, r7, #7
 80003c2:	781b      	ldrb	r3, [r3, #0]
 80003c4:	0018      	movs	r0, r3
 80003c6:	2303      	movs	r3, #3
 80003c8:	4003      	ands	r3, r0
 80003ca:	00db      	lsls	r3, r3, #3
 80003cc:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <NVIC_SetPriority+0xd8>)
 80003d0:	1dfb      	adds	r3, r7, #7
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b25b      	sxtb	r3, r3
 80003d6:	089b      	lsrs	r3, r3, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	33c0      	adds	r3, #192	; 0xc0
 80003dc:	009b      	lsls	r3, r3, #2
 80003de:	501a      	str	r2, [r3, r0]
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b003      	add	sp, #12
 80003e6:	bd90      	pop	{r4, r7, pc}
 80003e8:	e000ed00 	.word	0xe000ed00
 80003ec:	e000e100 	.word	0xe000e100

080003f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	3b01      	subs	r3, #1
 80003fc:	4a0c      	ldr	r2, [pc, #48]	; (8000430 <SysTick_Config+0x40>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d901      	bls.n	8000406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000402:	2301      	movs	r3, #1
 8000404:	e010      	b.n	8000428 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <SysTick_Config+0x44>)
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	3a01      	subs	r2, #1
 800040c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800040e:	2301      	movs	r3, #1
 8000410:	425b      	negs	r3, r3
 8000412:	2103      	movs	r1, #3
 8000414:	0018      	movs	r0, r3
 8000416:	f7ff ff7d 	bl	8000314 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <SysTick_Config+0x44>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000420:	4b04      	ldr	r3, [pc, #16]	; (8000434 <SysTick_Config+0x44>)
 8000422:	2207      	movs	r2, #7
 8000424:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000426:	2300      	movs	r3, #0
}
 8000428:	0018      	movs	r0, r3
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	00ffffff 	.word	0x00ffffff
 8000434:	e000e010 	.word	0xe000e010

08000438 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	60b9      	str	r1, [r7, #8]
 8000440:	607a      	str	r2, [r7, #4]
 8000442:	210f      	movs	r1, #15
 8000444:	187b      	adds	r3, r7, r1
 8000446:	1c02      	adds	r2, r0, #0
 8000448:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	187b      	adds	r3, r7, r1
 800044e:	781b      	ldrb	r3, [r3, #0]
 8000450:	b25b      	sxtb	r3, r3
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f7ff ff5d 	bl	8000314 <NVIC_SetPriority>
}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	b004      	add	sp, #16
 8000460:	bd80      	pop	{r7, pc}

08000462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000462:	b580      	push	{r7, lr}
 8000464:	b082      	sub	sp, #8
 8000466:	af00      	add	r7, sp, #0
 8000468:	0002      	movs	r2, r0
 800046a:	1dfb      	adds	r3, r7, #7
 800046c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800046e:	1dfb      	adds	r3, r7, #7
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	b25b      	sxtb	r3, r3
 8000474:	0018      	movs	r0, r3
 8000476:	f7ff ff37 	bl	80002e8 <NVIC_EnableIRQ>
}
 800047a:	46c0      	nop			; (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b002      	add	sp, #8
 8000480:	bd80      	pop	{r7, pc}

08000482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b082      	sub	sp, #8
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	0018      	movs	r0, r3
 800048e:	f7ff ffaf 	bl	80003f0 <SysTick_Config>
 8000492:	0003      	movs	r3, r0
}
 8000494:	0018      	movs	r0, r3
 8000496:	46bd      	mov	sp, r7
 8000498:	b002      	add	sp, #8
 800049a:	bd80      	pop	{r7, pc}

0800049c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80004a4:	230f      	movs	r3, #15
 80004a6:	18fb      	adds	r3, r7, r3
 80004a8:	2200      	movs	r2, #0
 80004aa:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2221      	movs	r2, #33	; 0x21
 80004b0:	5c9b      	ldrb	r3, [r3, r2]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b02      	cmp	r3, #2
 80004b6:	d007      	beq.n	80004c8 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2204      	movs	r2, #4
 80004bc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80004be:	230f      	movs	r3, #15
 80004c0:	18fb      	adds	r3, r7, r3
 80004c2:	2201      	movs	r2, #1
 80004c4:	701a      	strb	r2, [r3, #0]
 80004c6:	e028      	b.n	800051a <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	210e      	movs	r1, #14
 80004d4:	438a      	bics	r2, r1
 80004d6:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2101      	movs	r1, #1
 80004e4:	438a      	bics	r2, r1
 80004e6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004f0:	2101      	movs	r1, #1
 80004f2:	4091      	lsls	r1, r2
 80004f4:	000a      	movs	r2, r1
 80004f6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2221      	movs	r2, #33	; 0x21
 80004fc:	2101      	movs	r1, #1
 80004fe:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2220      	movs	r2, #32
 8000504:	2100      	movs	r1, #0
 8000506:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800050c:	2b00      	cmp	r3, #0
 800050e:	d004      	beq.n	800051a <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000514:	687a      	ldr	r2, [r7, #4]
 8000516:	0010      	movs	r0, r2
 8000518:	4798      	blx	r3
    } 
  }
  return status;
 800051a:	230f      	movs	r3, #15
 800051c:	18fb      	adds	r3, r7, r3
 800051e:	781b      	ldrb	r3, [r3, #0]
}
 8000520:	0018      	movs	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	b004      	add	sp, #16
 8000526:	bd80      	pop	{r7, pc}

08000528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800053a:	2300      	movs	r3, #0
 800053c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800053e:	e14f      	b.n	80007e0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	4091      	lsls	r1, r2
 800054a:	000a      	movs	r2, r1
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d100      	bne.n	8000558 <HAL_GPIO_Init+0x30>
 8000556:	e140      	b.n	80007da <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d003      	beq.n	8000568 <HAL_GPIO_Init+0x40>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b12      	cmp	r3, #18
 8000566:	d123      	bne.n	80005b0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000568:	697b      	ldr	r3, [r7, #20]
 800056a:	08da      	lsrs	r2, r3, #3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3208      	adds	r2, #8
 8000570:	0092      	lsls	r2, r2, #2
 8000572:	58d3      	ldr	r3, [r2, r3]
 8000574:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	2207      	movs	r2, #7
 800057a:	4013      	ands	r3, r2
 800057c:	009b      	lsls	r3, r3, #2
 800057e:	220f      	movs	r2, #15
 8000580:	409a      	lsls	r2, r3
 8000582:	0013      	movs	r3, r2
 8000584:	43da      	mvns	r2, r3
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	4013      	ands	r3, r2
 800058a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	691a      	ldr	r2, [r3, #16]
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	2107      	movs	r1, #7
 8000594:	400b      	ands	r3, r1
 8000596:	009b      	lsls	r3, r3, #2
 8000598:	409a      	lsls	r2, r3
 800059a:	0013      	movs	r3, r2
 800059c:	693a      	ldr	r2, [r7, #16]
 800059e:	4313      	orrs	r3, r2
 80005a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	08da      	lsrs	r2, r3, #3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	3208      	adds	r2, #8
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	6939      	ldr	r1, [r7, #16]
 80005ae:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80005b6:	697b      	ldr	r3, [r7, #20]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	2203      	movs	r2, #3
 80005bc:	409a      	lsls	r2, r3
 80005be:	0013      	movs	r3, r2
 80005c0:	43da      	mvns	r2, r3
 80005c2:	693b      	ldr	r3, [r7, #16]
 80005c4:	4013      	ands	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80005c8:	683b      	ldr	r3, [r7, #0]
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	2203      	movs	r2, #3
 80005ce:	401a      	ands	r2, r3
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	409a      	lsls	r2, r3
 80005d6:	0013      	movs	r3, r2
 80005d8:	693a      	ldr	r2, [r7, #16]
 80005da:	4313      	orrs	r3, r2
 80005dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	693a      	ldr	r2, [r7, #16]
 80005e2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	685b      	ldr	r3, [r3, #4]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00b      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d007      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80005f8:	2b11      	cmp	r3, #17
 80005fa:	d003      	beq.n	8000604 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	685b      	ldr	r3, [r3, #4]
 8000600:	2b12      	cmp	r3, #18
 8000602:	d130      	bne.n	8000666 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	2203      	movs	r2, #3
 8000610:	409a      	lsls	r2, r3
 8000612:	0013      	movs	r3, r2
 8000614:	43da      	mvns	r2, r3
 8000616:	693b      	ldr	r3, [r7, #16]
 8000618:	4013      	ands	r3, r2
 800061a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	68da      	ldr	r2, [r3, #12]
 8000620:	697b      	ldr	r3, [r7, #20]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	409a      	lsls	r2, r3
 8000626:	0013      	movs	r3, r2
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4313      	orrs	r3, r2
 800062c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	685b      	ldr	r3, [r3, #4]
 8000638:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800063a:	2201      	movs	r2, #1
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	409a      	lsls	r2, r3
 8000640:	0013      	movs	r3, r2
 8000642:	43da      	mvns	r2, r3
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	4013      	ands	r3, r2
 8000648:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	685b      	ldr	r3, [r3, #4]
 800064e:	091b      	lsrs	r3, r3, #4
 8000650:	2201      	movs	r2, #1
 8000652:	401a      	ands	r2, r3
 8000654:	697b      	ldr	r3, [r7, #20]
 8000656:	409a      	lsls	r2, r3
 8000658:	0013      	movs	r3, r2
 800065a:	693a      	ldr	r2, [r7, #16]
 800065c:	4313      	orrs	r3, r2
 800065e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	2203      	movs	r2, #3
 8000672:	409a      	lsls	r2, r3
 8000674:	0013      	movs	r3, r2
 8000676:	43da      	mvns	r2, r3
 8000678:	693b      	ldr	r3, [r7, #16]
 800067a:	4013      	ands	r3, r2
 800067c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	689a      	ldr	r2, [r3, #8]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	409a      	lsls	r2, r3
 8000688:	0013      	movs	r3, r2
 800068a:	693a      	ldr	r2, [r7, #16]
 800068c:	4313      	orrs	r3, r2
 800068e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	685a      	ldr	r2, [r3, #4]
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	055b      	lsls	r3, r3, #21
 800069e:	4013      	ands	r3, r2
 80006a0:	d100      	bne.n	80006a4 <HAL_GPIO_Init+0x17c>
 80006a2:	e09a      	b.n	80007da <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a4:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006a6:	699a      	ldr	r2, [r3, #24]
 80006a8:	4b53      	ldr	r3, [pc, #332]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006aa:	2101      	movs	r1, #1
 80006ac:	430a      	orrs	r2, r1
 80006ae:	619a      	str	r2, [r3, #24]
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <HAL_GPIO_Init+0x2d0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4013      	ands	r3, r2
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 80006bc:	4a4f      	ldr	r2, [pc, #316]	; (80007fc <HAL_GPIO_Init+0x2d4>)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	089b      	lsrs	r3, r3, #2
 80006c2:	3302      	adds	r3, #2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	589b      	ldr	r3, [r3, r2]
 80006c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	2203      	movs	r2, #3
 80006ce:	4013      	ands	r3, r2
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	220f      	movs	r2, #15
 80006d4:	409a      	lsls	r2, r3
 80006d6:	0013      	movs	r3, r2
 80006d8:	43da      	mvns	r2, r3
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	4013      	ands	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e0:	687a      	ldr	r2, [r7, #4]
 80006e2:	2390      	movs	r3, #144	; 0x90
 80006e4:	05db      	lsls	r3, r3, #23
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d013      	beq.n	8000712 <HAL_GPIO_Init+0x1ea>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4a44      	ldr	r2, [pc, #272]	; (8000800 <HAL_GPIO_Init+0x2d8>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d00d      	beq.n	800070e <HAL_GPIO_Init+0x1e6>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a43      	ldr	r2, [pc, #268]	; (8000804 <HAL_GPIO_Init+0x2dc>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d007      	beq.n	800070a <HAL_GPIO_Init+0x1e2>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	4a42      	ldr	r2, [pc, #264]	; (8000808 <HAL_GPIO_Init+0x2e0>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d101      	bne.n	8000706 <HAL_GPIO_Init+0x1de>
 8000702:	2303      	movs	r3, #3
 8000704:	e006      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 8000706:	2305      	movs	r3, #5
 8000708:	e004      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 800070a:	2302      	movs	r3, #2
 800070c:	e002      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 800070e:	2301      	movs	r3, #1
 8000710:	e000      	b.n	8000714 <HAL_GPIO_Init+0x1ec>
 8000712:	2300      	movs	r3, #0
 8000714:	697a      	ldr	r2, [r7, #20]
 8000716:	2103      	movs	r1, #3
 8000718:	400a      	ands	r2, r1
 800071a:	0092      	lsls	r2, r2, #2
 800071c:	4093      	lsls	r3, r2
 800071e:	693a      	ldr	r2, [r7, #16]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000724:	4935      	ldr	r1, [pc, #212]	; (80007fc <HAL_GPIO_Init+0x2d4>)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	089b      	lsrs	r3, r3, #2
 800072a:	3302      	adds	r3, #2
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	693a      	ldr	r2, [r7, #16]
 8000730:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000732:	4b36      	ldr	r3, [pc, #216]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	43da      	mvns	r2, r3
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	4013      	ands	r3, r2
 8000740:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000742:	683b      	ldr	r3, [r7, #0]
 8000744:	685a      	ldr	r2, [r3, #4]
 8000746:	2380      	movs	r3, #128	; 0x80
 8000748:	025b      	lsls	r3, r3, #9
 800074a:	4013      	ands	r3, r2
 800074c:	d003      	beq.n	8000756 <HAL_GPIO_Init+0x22e>
        {
          SET_BIT(temp, iocurrent); 
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4313      	orrs	r3, r2
 8000754:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000758:	693a      	ldr	r2, [r7, #16]
 800075a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800075c:	4b2b      	ldr	r3, [pc, #172]	; (800080c <HAL_GPIO_Init+0x2e4>)
 800075e:	685b      	ldr	r3, [r3, #4]
 8000760:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	43da      	mvns	r2, r3
 8000766:	693b      	ldr	r3, [r7, #16]
 8000768:	4013      	ands	r3, r2
 800076a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	2380      	movs	r3, #128	; 0x80
 8000772:	029b      	lsls	r3, r3, #10
 8000774:	4013      	ands	r3, r2
 8000776:	d003      	beq.n	8000780 <HAL_GPIO_Init+0x258>
        { 
          SET_BIT(temp, iocurrent); 
 8000778:	693a      	ldr	r2, [r7, #16]
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4313      	orrs	r3, r2
 800077e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000782:	693a      	ldr	r2, [r7, #16]
 8000784:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <HAL_GPIO_Init+0x2e4>)
 8000788:	689b      	ldr	r3, [r3, #8]
 800078a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	43da      	mvns	r2, r3
 8000790:	693b      	ldr	r3, [r7, #16]
 8000792:	4013      	ands	r3, r2
 8000794:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	035b      	lsls	r3, r3, #13
 800079e:	4013      	ands	r3, r2
 80007a0:	d003      	beq.n	80007aa <HAL_GPIO_Init+0x282>
        {
          SET_BIT(temp, iocurrent); 
 80007a2:	693a      	ldr	r2, [r7, #16]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	4313      	orrs	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007ac:	693a      	ldr	r2, [r7, #16]
 80007ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	43da      	mvns	r2, r3
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4013      	ands	r3, r2
 80007be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	2380      	movs	r3, #128	; 0x80
 80007c6:	039b      	lsls	r3, r3, #14
 80007c8:	4013      	ands	r3, r2
 80007ca:	d003      	beq.n	80007d4 <HAL_GPIO_Init+0x2ac>
        {
          SET_BIT(temp, iocurrent); 
 80007cc:	693a      	ldr	r2, [r7, #16]
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	; (800080c <HAL_GPIO_Init+0x2e4>)
 80007d6:	693a      	ldr	r2, [r7, #16]
 80007d8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	681a      	ldr	r2, [r3, #0]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	40da      	lsrs	r2, r3
 80007e8:	1e13      	subs	r3, r2, #0
 80007ea:	d000      	beq.n	80007ee <HAL_GPIO_Init+0x2c6>
 80007ec:	e6a8      	b.n	8000540 <HAL_GPIO_Init+0x18>
  } 
}
 80007ee:	46c0      	nop			; (mov r8, r8)
 80007f0:	46bd      	mov	sp, r7
 80007f2:	b006      	add	sp, #24
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40010000 	.word	0x40010000
 8000800:	48000400 	.word	0x48000400
 8000804:	48000800 	.word	0x48000800
 8000808:	48000c00 	.word	0x48000c00
 800080c:	40010400 	.word	0x40010400

08000810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	0008      	movs	r0, r1
 800081a:	0011      	movs	r1, r2
 800081c:	1cbb      	adds	r3, r7, #2
 800081e:	1c02      	adds	r2, r0, #0
 8000820:	801a      	strh	r2, [r3, #0]
 8000822:	1c7b      	adds	r3, r7, #1
 8000824:	1c0a      	adds	r2, r1, #0
 8000826:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000828:	1c7b      	adds	r3, r7, #1
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d004      	beq.n	800083a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000830:	1cbb      	adds	r3, r7, #2
 8000832:	881a      	ldrh	r2, [r3, #0]
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000838:	e003      	b.n	8000842 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800083a:	1cbb      	adds	r3, r7, #2
 800083c:	881a      	ldrh	r2, [r3, #0]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000842:	46c0      	nop			; (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	b002      	add	sp, #8
 8000848:	bd80      	pop	{r7, pc}
	...

0800084c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e082      	b.n	8000964 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2241      	movs	r2, #65	; 0x41
 8000862:	5c9b      	ldrb	r3, [r3, r2]
 8000864:	b2db      	uxtb	r3, r3
 8000866:	2b00      	cmp	r3, #0
 8000868:	d107      	bne.n	800087a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2240      	movs	r2, #64	; 0x40
 800086e:	2100      	movs	r1, #0
 8000870:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	0018      	movs	r0, r3
 8000876:	f003 fb17 	bl	8003ea8 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2241      	movs	r2, #65	; 0x41
 800087e:	2124      	movs	r1, #36	; 0x24
 8000880:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	438a      	bics	r2, r1
 8000890:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	685a      	ldr	r2, [r3, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4934      	ldr	r1, [pc, #208]	; (800096c <HAL_I2C_Init+0x120>)
 800089c:	400a      	ands	r2, r1
 800089e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	689a      	ldr	r2, [r3, #8]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4931      	ldr	r1, [pc, #196]	; (8000970 <HAL_I2C_Init+0x124>)
 80008ac:	400a      	ands	r2, r1
 80008ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d108      	bne.n	80008ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	689a      	ldr	r2, [r3, #8]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0209      	lsls	r1, r1, #8
 80008c4:	430a      	orrs	r2, r1
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	e007      	b.n	80008da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2184      	movs	r1, #132	; 0x84
 80008d4:	0209      	lsls	r1, r1, #8
 80008d6:	430a      	orrs	r2, r1
 80008d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d104      	bne.n	80008ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	0112      	lsls	r2, r2, #4
 80008ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	685a      	ldr	r2, [r3, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	491f      	ldr	r1, [pc, #124]	; (8000974 <HAL_I2C_Init+0x128>)
 80008f8:	430a      	orrs	r2, r1
 80008fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	68da      	ldr	r2, [r3, #12]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	491a      	ldr	r1, [pc, #104]	; (8000970 <HAL_I2C_Init+0x124>)
 8000908:	400a      	ands	r2, r1
 800090a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	691a      	ldr	r2, [r3, #16]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	431a      	orrs	r2, r3
 8000916:	0011      	movs	r1, r2
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	021a      	lsls	r2, r3, #8
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	430a      	orrs	r2, r1
 8000924:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	69d9      	ldr	r1, [r3, #28]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6a1a      	ldr	r2, [r3, #32]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	430a      	orrs	r2, r1
 8000934:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2101      	movs	r1, #1
 8000942:	430a      	orrs	r2, r1
 8000944:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	2200      	movs	r2, #0
 800094a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2241      	movs	r2, #65	; 0x41
 8000950:	2120      	movs	r1, #32
 8000952:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2200      	movs	r2, #0
 8000958:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2242      	movs	r2, #66	; 0x42
 800095e:	2100      	movs	r1, #0
 8000960:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000962:	2300      	movs	r3, #0
}
 8000964:	0018      	movs	r0, r3
 8000966:	46bd      	mov	sp, r7
 8000968:	b002      	add	sp, #8
 800096a:	bd80      	pop	{r7, pc}
 800096c:	f0ffffff 	.word	0xf0ffffff
 8000970:	ffff7fff 	.word	0xffff7fff
 8000974:	02008000 	.word	0x02008000

08000978 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af02      	add	r7, sp, #8
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	000c      	movs	r4, r1
 8000982:	0010      	movs	r0, r2
 8000984:	0019      	movs	r1, r3
 8000986:	230a      	movs	r3, #10
 8000988:	18fb      	adds	r3, r7, r3
 800098a:	1c22      	adds	r2, r4, #0
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	2308      	movs	r3, #8
 8000990:	18fb      	adds	r3, r7, r3
 8000992:	1c02      	adds	r2, r0, #0
 8000994:	801a      	strh	r2, [r3, #0]
 8000996:	1dbb      	adds	r3, r7, #6
 8000998:	1c0a      	adds	r2, r1, #0
 800099a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	2241      	movs	r2, #65	; 0x41
 80009a4:	5c9b      	ldrb	r3, [r3, r2]
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b20      	cmp	r3, #32
 80009aa:	d000      	beq.n	80009ae <HAL_I2C_Mem_Write+0x36>
 80009ac:	e11c      	b.n	8000be8 <HAL_I2C_Mem_Write+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 80009ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d004      	beq.n	80009be <HAL_I2C_Mem_Write+0x46>
 80009b4:	232c      	movs	r3, #44	; 0x2c
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	881b      	ldrh	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d101      	bne.n	80009c2 <HAL_I2C_Mem_Write+0x4a>
    {
      return  HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e113      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2240      	movs	r2, #64	; 0x40
 80009c6:	5c9b      	ldrb	r3, [r3, r2]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d101      	bne.n	80009d0 <HAL_I2C_Mem_Write+0x58>
 80009cc:	2302      	movs	r3, #2
 80009ce:	e10c      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	2240      	movs	r2, #64	; 0x40
 80009d4:	2101      	movs	r1, #1
 80009d6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80009d8:	f7ff fc5e 	bl	8000298 <HAL_GetTick>
 80009dc:	0003      	movs	r3, r0
 80009de:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80009e0:	2380      	movs	r3, #128	; 0x80
 80009e2:	0219      	lsls	r1, r3, #8
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	697b      	ldr	r3, [r7, #20]
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2319      	movs	r3, #25
 80009ec:	2201      	movs	r2, #1
 80009ee:	f000 fb3f 	bl	8001070 <I2C_WaitOnFlagUntilTimeout>
 80009f2:	1e03      	subs	r3, r0, #0
 80009f4:	d001      	beq.n	80009fa <HAL_I2C_Mem_Write+0x82>
    {
      return HAL_TIMEOUT;
 80009f6:	2303      	movs	r3, #3
 80009f8:	e0f7      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	2241      	movs	r2, #65	; 0x41
 80009fe:	2121      	movs	r1, #33	; 0x21
 8000a00:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2242      	movs	r2, #66	; 0x42
 8000a06:	2140      	movs	r1, #64	; 0x40
 8000a08:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	222c      	movs	r2, #44	; 0x2c
 8000a1a:	18ba      	adds	r2, r7, r2
 8000a1c:	8812      	ldrh	r2, [r2, #0]
 8000a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2200      	movs	r2, #0
 8000a24:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000a26:	1dbb      	adds	r3, r7, #6
 8000a28:	881c      	ldrh	r4, [r3, #0]
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	881a      	ldrh	r2, [r3, #0]
 8000a30:	230a      	movs	r3, #10
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	8819      	ldrh	r1, [r3, #0]
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	9301      	str	r3, [sp, #4]
 8000a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	0023      	movs	r3, r4
 8000a42:	f000 fa19 	bl	8000e78 <I2C_RequestMemoryWrite>
 8000a46:	1e03      	subs	r3, r0, #0
 8000a48:	d00f      	beq.n	8000a6a <HAL_I2C_Mem_Write+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	2b04      	cmp	r3, #4
 8000a50:	d105      	bne.n	8000a5e <HAL_I2C_Mem_Write+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2240      	movs	r2, #64	; 0x40
 8000a56:	2100      	movs	r1, #0
 8000a58:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e0c5      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	2240      	movs	r2, #64	; 0x40
 8000a62:	2100      	movs	r1, #0
 8000a64:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000a66:	2303      	movs	r3, #3
 8000a68:	e0bf      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	2bff      	cmp	r3, #255	; 0xff
 8000a72:	d911      	bls.n	8000a98 <HAL_I2C_Mem_Write+0x120>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	22ff      	movs	r2, #255	; 0xff
 8000a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	045c      	lsls	r4, r3, #17
 8000a84:	230a      	movs	r3, #10
 8000a86:	18fb      	adds	r3, r7, r3
 8000a88:	8819      	ldrh	r1, [r3, #0]
 8000a8a:	68f8      	ldr	r0, [r7, #12]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	0023      	movs	r3, r4
 8000a92:	f000 fbff 	bl	8001294 <I2C_TransferConfig>
 8000a96:	e012      	b.n	8000abe <HAL_I2C_Mem_Write+0x146>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a9c:	b29a      	uxth	r2, r3
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	2380      	movs	r3, #128	; 0x80
 8000aaa:	049c      	lsls	r4, r3, #18
 8000aac:	230a      	movs	r3, #10
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	8819      	ldrh	r1, [r3, #0]
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	9300      	str	r3, [sp, #0]
 8000ab8:	0023      	movs	r3, r4
 8000aba:	f000 fbeb 	bl	8001294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000abe:	697a      	ldr	r2, [r7, #20]
 8000ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f000 fb0c 	bl	80010e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000aca:	1e03      	subs	r3, r0, #0
 8000acc:	d007      	beq.n	8000ade <HAL_I2C_Mem_Write+0x166>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	d101      	bne.n	8000ada <HAL_I2C_Mem_Write+0x162>
        {
          return HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	e087      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
        }
        else
        {
          return HAL_TIMEOUT;
 8000ada:	2303      	movs	r3, #3
 8000adc:	e085      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
        }
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	1c59      	adds	r1, r3, #1
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	6251      	str	r1, [r2, #36]	; 0x24
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	3b01      	subs	r3, #1
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b02:	3b01      	subs	r3, #1
 8000b04:	b29a      	uxth	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d13b      	bne.n	8000b8a <HAL_I2C_Mem_Write+0x212>
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b16:	b29b      	uxth	r3, r3
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d036      	beq.n	8000b8a <HAL_I2C_Mem_Write+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b1e:	68f8      	ldr	r0, [r7, #12]
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	0013      	movs	r3, r2
 8000b26:	2200      	movs	r2, #0
 8000b28:	2180      	movs	r1, #128	; 0x80
 8000b2a:	f000 faa1 	bl	8001070 <I2C_WaitOnFlagUntilTimeout>
 8000b2e:	1e03      	subs	r3, r0, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_I2C_Mem_Write+0x1be>
        {
          return HAL_TIMEOUT;
 8000b32:	2303      	movs	r3, #3
 8000b34:	e059      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	2bff      	cmp	r3, #255	; 0xff
 8000b3e:	d911      	bls.n	8000b64 <HAL_I2C_Mem_Write+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	22ff      	movs	r2, #255	; 0xff
 8000b44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	2380      	movs	r3, #128	; 0x80
 8000b4e:	045c      	lsls	r4, r3, #17
 8000b50:	230a      	movs	r3, #10
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	8819      	ldrh	r1, [r3, #0]
 8000b56:	68f8      	ldr	r0, [r7, #12]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	0023      	movs	r3, r4
 8000b5e:	f000 fb99 	bl	8001294 <I2C_TransferConfig>
 8000b62:	e012      	b.n	8000b8a <HAL_I2C_Mem_Write+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	2380      	movs	r3, #128	; 0x80
 8000b76:	049c      	lsls	r4, r3, #18
 8000b78:	230a      	movs	r3, #10
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	8819      	ldrh	r1, [r3, #0]
 8000b7e:	68f8      	ldr	r0, [r7, #12]
 8000b80:	2300      	movs	r3, #0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	0023      	movs	r3, r4
 8000b86:	f000 fb85 	bl	8001294 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d194      	bne.n	8000abe <HAL_I2C_Mem_Write+0x146>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000b94:	697a      	ldr	r2, [r7, #20]
 8000b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 fae0 	bl	8001160 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000ba0:	1e03      	subs	r3, r0, #0
 8000ba2:	d007      	beq.n	8000bb4 <HAL_I2C_Mem_Write+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba8:	2b04      	cmp	r3, #4
 8000baa:	d101      	bne.n	8000bb0 <HAL_I2C_Mem_Write+0x238>
      {
        return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
 8000bae:	e01c      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	e01a      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2220      	movs	r2, #32
 8000bba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	685a      	ldr	r2, [r3, #4]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	490b      	ldr	r1, [pc, #44]	; (8000bf4 <HAL_I2C_Mem_Write+0x27c>)
 8000bc8:	400a      	ands	r2, r1
 8000bca:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	2241      	movs	r2, #65	; 0x41
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	2242      	movs	r2, #66	; 0x42
 8000bd8:	2100      	movs	r1, #0
 8000bda:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	2240      	movs	r2, #64	; 0x40
 8000be0:	2100      	movs	r1, #0
 8000be2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	e000      	b.n	8000bea <HAL_I2C_Mem_Write+0x272>
  }
  else
  {
    return HAL_BUSY;
 8000be8:	2302      	movs	r3, #2
  }
}
 8000bea:	0018      	movs	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b007      	add	sp, #28
 8000bf0:	bd90      	pop	{r4, r7, pc}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	fe00e800 	.word	0xfe00e800

08000bf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000bf8:	b590      	push	{r4, r7, lr}
 8000bfa:	b089      	sub	sp, #36	; 0x24
 8000bfc:	af02      	add	r7, sp, #8
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	000c      	movs	r4, r1
 8000c02:	0010      	movs	r0, r2
 8000c04:	0019      	movs	r1, r3
 8000c06:	230a      	movs	r3, #10
 8000c08:	18fb      	adds	r3, r7, r3
 8000c0a:	1c22      	adds	r2, r4, #0
 8000c0c:	801a      	strh	r2, [r3, #0]
 8000c0e:	2308      	movs	r3, #8
 8000c10:	18fb      	adds	r3, r7, r3
 8000c12:	1c02      	adds	r2, r0, #0
 8000c14:	801a      	strh	r2, [r3, #0]
 8000c16:	1dbb      	adds	r3, r7, #6
 8000c18:	1c0a      	adds	r2, r1, #0
 8000c1a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	2241      	movs	r2, #65	; 0x41
 8000c24:	5c9b      	ldrb	r3, [r3, r2]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	2b20      	cmp	r3, #32
 8000c2a:	d000      	beq.n	8000c2e <HAL_I2C_Mem_Read+0x36>
 8000c2c:	e11c      	b.n	8000e68 <HAL_I2C_Mem_Read+0x270>
  {
    if ((pData == NULL) || (Size == 0U))
 8000c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d004      	beq.n	8000c3e <HAL_I2C_Mem_Read+0x46>
 8000c34:	232c      	movs	r3, #44	; 0x2c
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	881b      	ldrh	r3, [r3, #0]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d101      	bne.n	8000c42 <HAL_I2C_Mem_Read+0x4a>
    {
      return  HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e113      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2240      	movs	r2, #64	; 0x40
 8000c46:	5c9b      	ldrb	r3, [r3, r2]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d101      	bne.n	8000c50 <HAL_I2C_Mem_Read+0x58>
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	e10c      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	2240      	movs	r2, #64	; 0x40
 8000c54:	2101      	movs	r1, #1
 8000c56:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000c58:	f7ff fb1e 	bl	8000298 <HAL_GetTick>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000c60:	2380      	movs	r3, #128	; 0x80
 8000c62:	0219      	lsls	r1, r3, #8
 8000c64:	68f8      	ldr	r0, [r7, #12]
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	9300      	str	r3, [sp, #0]
 8000c6a:	2319      	movs	r3, #25
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f000 f9ff 	bl	8001070 <I2C_WaitOnFlagUntilTimeout>
 8000c72:	1e03      	subs	r3, r0, #0
 8000c74:	d001      	beq.n	8000c7a <HAL_I2C_Mem_Read+0x82>
    {
      return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e0f7      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2241      	movs	r2, #65	; 0x41
 8000c7e:	2122      	movs	r1, #34	; 0x22
 8000c80:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2242      	movs	r2, #66	; 0x42
 8000c86:	2140      	movs	r1, #64	; 0x40
 8000c88:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000c94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	222c      	movs	r2, #44	; 0x2c
 8000c9a:	18ba      	adds	r2, r7, r2
 8000c9c:	8812      	ldrh	r2, [r2, #0]
 8000c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8000ca6:	1dbb      	adds	r3, r7, #6
 8000ca8:	881c      	ldrh	r4, [r3, #0]
 8000caa:	2308      	movs	r3, #8
 8000cac:	18fb      	adds	r3, r7, r3
 8000cae:	881a      	ldrh	r2, [r3, #0]
 8000cb0:	230a      	movs	r3, #10
 8000cb2:	18fb      	adds	r3, r7, r3
 8000cb4:	8819      	ldrh	r1, [r3, #0]
 8000cb6:	68f8      	ldr	r0, [r7, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	0023      	movs	r3, r4
 8000cc2:	f000 f947 	bl	8000f54 <I2C_RequestMemoryRead>
 8000cc6:	1e03      	subs	r3, r0, #0
 8000cc8:	d00f      	beq.n	8000cea <HAL_I2C_Mem_Read+0xf2>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	2b04      	cmp	r3, #4
 8000cd0:	d105      	bne.n	8000cde <HAL_I2C_Mem_Read+0xe6>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	2240      	movs	r2, #64	; 0x40
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e0c5      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2240      	movs	r2, #64	; 0x40
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e0bf      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	2bff      	cmp	r3, #255	; 0xff
 8000cf2:	d912      	bls.n	8000d1a <HAL_I2C_Mem_Read+0x122>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	22ff      	movs	r2, #255	; 0xff
 8000cf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	2380      	movs	r3, #128	; 0x80
 8000d02:	045c      	lsls	r4, r3, #17
 8000d04:	230a      	movs	r3, #10
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	8819      	ldrh	r1, [r3, #0]
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	2390      	movs	r3, #144	; 0x90
 8000d0e:	019b      	lsls	r3, r3, #6
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	0023      	movs	r3, r4
 8000d14:	f000 fabe 	bl	8001294 <I2C_TransferConfig>
 8000d18:	e013      	b.n	8000d42 <HAL_I2C_Mem_Read+0x14a>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	2380      	movs	r3, #128	; 0x80
 8000d2c:	049c      	lsls	r4, r3, #18
 8000d2e:	230a      	movs	r3, #10
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	8819      	ldrh	r1, [r3, #0]
 8000d34:	68f8      	ldr	r0, [r7, #12]
 8000d36:	2390      	movs	r3, #144	; 0x90
 8000d38:	019b      	lsls	r3, r3, #6
 8000d3a:	9300      	str	r3, [sp, #0]
 8000d3c:	0023      	movs	r3, r4
 8000d3e:	f000 faa9 	bl	8001294 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8000d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	9300      	str	r3, [sp, #0]
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2104      	movs	r1, #4
 8000d50:	f000 f98e 	bl	8001070 <I2C_WaitOnFlagUntilTimeout>
 8000d54:	1e03      	subs	r3, r0, #0
 8000d56:	d001      	beq.n	8000d5c <HAL_I2C_Mem_Read+0x164>
      {
        return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e086      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d66:	1c59      	adds	r1, r3, #1
 8000d68:	68fa      	ldr	r2, [r7, #12]
 8000d6a:	6251      	str	r1, [r2, #36]	; 0x24
 8000d6c:	b2c2      	uxtb	r2, r0
 8000d6e:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d74:	3b01      	subs	r3, #1
 8000d76:	b29a      	uxth	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	3b01      	subs	r3, #1
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d13b      	bne.n	8000e0a <HAL_I2C_Mem_Read+0x212>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d036      	beq.n	8000e0a <HAL_I2C_Mem_Read+0x212>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000d9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	9300      	str	r3, [sp, #0]
 8000da4:	0013      	movs	r3, r2
 8000da6:	2200      	movs	r2, #0
 8000da8:	2180      	movs	r1, #128	; 0x80
 8000daa:	f000 f961 	bl	8001070 <I2C_WaitOnFlagUntilTimeout>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_I2C_Mem_Read+0x1be>
        {
          return HAL_TIMEOUT;
 8000db2:	2303      	movs	r3, #3
 8000db4:	e059      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	2bff      	cmp	r3, #255	; 0xff
 8000dbe:	d911      	bls.n	8000de4 <HAL_I2C_Mem_Read+0x1ec>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	22ff      	movs	r2, #255	; 0xff
 8000dc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	045c      	lsls	r4, r3, #17
 8000dd0:	230a      	movs	r3, #10
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	8819      	ldrh	r1, [r3, #0]
 8000dd6:	68f8      	ldr	r0, [r7, #12]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	0023      	movs	r3, r4
 8000dde:	f000 fa59 	bl	8001294 <I2C_TransferConfig>
 8000de2:	e012      	b.n	8000e0a <HAL_I2C_Mem_Read+0x212>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	049c      	lsls	r4, r3, #18
 8000df8:	230a      	movs	r3, #10
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	8819      	ldrh	r1, [r3, #0]
 8000dfe:	68f8      	ldr	r0, [r7, #12]
 8000e00:	2300      	movs	r3, #0
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	0023      	movs	r3, r4
 8000e06:	f000 fa45 	bl	8001294 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d196      	bne.n	8000d42 <HAL_I2C_Mem_Read+0x14a>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 f9a0 	bl	8001160 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d007      	beq.n	8000e34 <HAL_I2C_Mem_Read+0x23c>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d101      	bne.n	8000e30 <HAL_I2C_Mem_Read+0x238>
      {
        return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e01c      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
      }
      else
      {
        return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e01a      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2220      	movs	r2, #32
 8000e3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	685a      	ldr	r2, [r3, #4]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	490b      	ldr	r1, [pc, #44]	; (8000e74 <HAL_I2C_Mem_Read+0x27c>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	2241      	movs	r2, #65	; 0x41
 8000e50:	2120      	movs	r1, #32
 8000e52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2242      	movs	r2, #66	; 0x42
 8000e58:	2100      	movs	r1, #0
 8000e5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2240      	movs	r2, #64	; 0x40
 8000e60:	2100      	movs	r1, #0
 8000e62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	e000      	b.n	8000e6a <HAL_I2C_Mem_Read+0x272>
  }
  else
  {
    return HAL_BUSY;
 8000e68:	2302      	movs	r3, #2
  }
}
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	b007      	add	sp, #28
 8000e70:	bd90      	pop	{r4, r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	fe00e800 	.word	0xfe00e800

08000e78 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000e78:	b5b0      	push	{r4, r5, r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af02      	add	r7, sp, #8
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	000c      	movs	r4, r1
 8000e82:	0010      	movs	r0, r2
 8000e84:	0019      	movs	r1, r3
 8000e86:	250a      	movs	r5, #10
 8000e88:	197b      	adds	r3, r7, r5
 8000e8a:	1c22      	adds	r2, r4, #0
 8000e8c:	801a      	strh	r2, [r3, #0]
 8000e8e:	2308      	movs	r3, #8
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	1c02      	adds	r2, r0, #0
 8000e94:	801a      	strh	r2, [r3, #0]
 8000e96:	1dbb      	adds	r3, r7, #6
 8000e98:	1c0a      	adds	r2, r1, #0
 8000e9a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000e9c:	1dbb      	adds	r3, r7, #6
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	2380      	movs	r3, #128	; 0x80
 8000ea4:	045c      	lsls	r4, r3, #17
 8000ea6:	197b      	adds	r3, r7, r5
 8000ea8:	8819      	ldrh	r1, [r3, #0]
 8000eaa:	68f8      	ldr	r0, [r7, #12]
 8000eac:	2380      	movs	r3, #128	; 0x80
 8000eae:	019b      	lsls	r3, r3, #6
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	0023      	movs	r3, r4
 8000eb4:	f000 f9ee 	bl	8001294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eba:	6a39      	ldr	r1, [r7, #32]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 f90f 	bl	80010e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d007      	beq.n	8000ed8 <I2C_RequestMemoryWrite+0x60>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ecc:	2b04      	cmp	r3, #4
 8000ece:	d101      	bne.n	8000ed4 <I2C_RequestMemoryWrite+0x5c>
    {
      return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e03b      	b.n	8000f4c <I2C_RequestMemoryWrite+0xd4>
    }
    else
    {
      return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e039      	b.n	8000f4c <I2C_RequestMemoryWrite+0xd4>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000ed8:	1dbb      	adds	r3, r7, #6
 8000eda:	881b      	ldrh	r3, [r3, #0]
 8000edc:	2b01      	cmp	r3, #1
 8000ede:	d107      	bne.n	8000ef0 <I2C_RequestMemoryWrite+0x78>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000ee0:	2308      	movs	r3, #8
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
 8000eee:	e01f      	b.n	8000f30 <I2C_RequestMemoryWrite+0xb8>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	0a1b      	lsrs	r3, r3, #8
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f04:	6a39      	ldr	r1, [r7, #32]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f000 f8ea 	bl	80010e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f0e:	1e03      	subs	r3, r0, #0
 8000f10:	d007      	beq.n	8000f22 <I2C_RequestMemoryWrite+0xaa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	2b04      	cmp	r3, #4
 8000f18:	d101      	bne.n	8000f1e <I2C_RequestMemoryWrite+0xa6>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e016      	b.n	8000f4c <I2C_RequestMemoryWrite+0xd4>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e014      	b.n	8000f4c <I2C_RequestMemoryWrite+0xd4>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000f22:	2308      	movs	r3, #8
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8000f30:	6a3a      	ldr	r2, [r7, #32]
 8000f32:	68f8      	ldr	r0, [r7, #12]
 8000f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	0013      	movs	r3, r2
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2180      	movs	r1, #128	; 0x80
 8000f3e:	f000 f897 	bl	8001070 <I2C_WaitOnFlagUntilTimeout>
 8000f42:	1e03      	subs	r3, r0, #0
 8000f44:	d001      	beq.n	8000f4a <I2C_RequestMemoryWrite+0xd2>
  {
    return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e000      	b.n	8000f4c <I2C_RequestMemoryWrite+0xd4>
  }

  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b004      	add	sp, #16
 8000f52:	bdb0      	pop	{r4, r5, r7, pc}

08000f54 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af02      	add	r7, sp, #8
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	000c      	movs	r4, r1
 8000f5e:	0010      	movs	r0, r2
 8000f60:	0019      	movs	r1, r3
 8000f62:	250a      	movs	r5, #10
 8000f64:	197b      	adds	r3, r7, r5
 8000f66:	1c22      	adds	r2, r4, #0
 8000f68:	801a      	strh	r2, [r3, #0]
 8000f6a:	2308      	movs	r3, #8
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	1c02      	adds	r2, r0, #0
 8000f70:	801a      	strh	r2, [r3, #0]
 8000f72:	1dbb      	adds	r3, r7, #6
 8000f74:	1c0a      	adds	r2, r1, #0
 8000f76:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8000f78:	1dbb      	adds	r3, r7, #6
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	197b      	adds	r3, r7, r5
 8000f80:	8819      	ldrh	r1, [r3, #0]
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	2380      	movs	r3, #128	; 0x80
 8000f86:	019b      	lsls	r3, r3, #6
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	f000 f982 	bl	8001294 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f92:	6a39      	ldr	r1, [r7, #32]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 f8a3 	bl	80010e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f9c:	1e03      	subs	r3, r0, #0
 8000f9e:	d007      	beq.n	8000fb0 <I2C_RequestMemoryRead+0x5c>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa4:	2b04      	cmp	r3, #4
 8000fa6:	d101      	bne.n	8000fac <I2C_RequestMemoryRead+0x58>
    {
      return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e03b      	b.n	8001024 <I2C_RequestMemoryRead+0xd0>
    }
    else
    {
      return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e039      	b.n	8001024 <I2C_RequestMemoryRead+0xd0>
    }
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	881b      	ldrh	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d107      	bne.n	8000fc8 <I2C_RequestMemoryRead+0x74>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000fb8:	2308      	movs	r3, #8
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
 8000fc6:	e01f      	b.n	8001008 <I2C_RequestMemoryRead+0xb4>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8000fc8:	2308      	movs	r3, #8
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	0a1b      	lsrs	r3, r3, #8
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000fda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fdc:	6a39      	ldr	r1, [r7, #32]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 f87e 	bl	80010e2 <I2C_WaitOnTXISFlagUntilTimeout>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d007      	beq.n	8000ffa <I2C_RequestMemoryRead+0xa6>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d101      	bne.n	8000ff6 <I2C_RequestMemoryRead+0xa2>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e016      	b.n	8001024 <I2C_RequestMemoryRead+0xd0>
      }
      else
      {
        return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e014      	b.n	8001024 <I2C_RequestMemoryRead+0xd0>
      }
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8000ffa:	2308      	movs	r3, #8
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	881b      	ldrh	r3, [r3, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001008:	6a3a      	ldr	r2, [r7, #32]
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	0013      	movs	r3, r2
 8001012:	2200      	movs	r2, #0
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	f000 f82b 	bl	8001070 <I2C_WaitOnFlagUntilTimeout>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d001      	beq.n	8001022 <I2C_RequestMemoryRead+0xce>
  {
    return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e000      	b.n	8001024 <I2C_RequestMemoryRead+0xd0>
  }

  return HAL_OK;
 8001022:	2300      	movs	r3, #0
}
 8001024:	0018      	movs	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	b004      	add	sp, #16
 800102a:	bdb0      	pop	{r4, r5, r7, pc}

0800102c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	699b      	ldr	r3, [r3, #24]
 800103a:	2202      	movs	r2, #2
 800103c:	4013      	ands	r3, r2
 800103e:	2b02      	cmp	r3, #2
 8001040:	d103      	bne.n	800104a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	2201      	movs	r2, #1
 8001052:	4013      	ands	r3, r2
 8001054:	2b01      	cmp	r3, #1
 8001056:	d007      	beq.n	8001068 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2101      	movs	r1, #1
 8001064:	430a      	orrs	r2, r1
 8001066:	619a      	str	r2, [r3, #24]
  }
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	b002      	add	sp, #8
 800106e:	bd80      	pop	{r7, pc}

08001070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	1dfb      	adds	r3, r7, #7
 800107e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001080:	e01b      	b.n	80010ba <I2C_WaitOnFlagUntilTimeout+0x4a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	d018      	beq.n	80010ba <I2C_WaitOnFlagUntilTimeout+0x4a>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d007      	beq.n	800109e <I2C_WaitOnFlagUntilTimeout+0x2e>
 800108e:	f7ff f903 	bl	8000298 <HAL_GetTick>
 8001092:	0002      	movs	r2, r0
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	683a      	ldr	r2, [r7, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d20d      	bcs.n	80010ba <I2C_WaitOnFlagUntilTimeout+0x4a>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2241      	movs	r2, #65	; 0x41
 80010a2:	2120      	movs	r1, #32
 80010a4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	2242      	movs	r2, #66	; 0x42
 80010aa:	2100      	movs	r1, #0
 80010ac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	2240      	movs	r2, #64	; 0x40
 80010b2:	2100      	movs	r1, #0
 80010b4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e00f      	b.n	80010da <I2C_WaitOnFlagUntilTimeout+0x6a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	4013      	ands	r3, r2
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	425a      	negs	r2, r3
 80010ca:	4153      	adcs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	001a      	movs	r2, r3
 80010d0:	1dfb      	adds	r3, r7, #7
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d0d4      	beq.n	8001082 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80010d8:	2300      	movs	r3, #0
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b084      	sub	sp, #16
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	60f8      	str	r0, [r7, #12]
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80010ee:	e02b      	b.n	8001148 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	68b9      	ldr	r1, [r7, #8]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f86e 	bl	80011d8 <I2C_IsAcknowledgeFailed>
 80010fc:	1e03      	subs	r3, r0, #0
 80010fe:	d001      	beq.n	8001104 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e029      	b.n	8001158 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	3301      	adds	r3, #1
 8001108:	d01e      	beq.n	8001148 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d007      	beq.n	8001120 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001110:	f7ff f8c2 	bl	8000298 <HAL_GetTick>
 8001114:	0002      	movs	r2, r0
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68ba      	ldr	r2, [r7, #8]
 800111c:	429a      	cmp	r2, r3
 800111e:	d213      	bcs.n	8001148 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	2220      	movs	r2, #32
 8001126:	431a      	orrs	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2241      	movs	r2, #65	; 0x41
 8001130:	2120      	movs	r1, #32
 8001132:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2242      	movs	r2, #66	; 0x42
 8001138:	2100      	movs	r1, #0
 800113a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2240      	movs	r2, #64	; 0x40
 8001140:	2100      	movs	r1, #0
 8001142:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e007      	b.n	8001158 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	2202      	movs	r2, #2
 8001150:	4013      	ands	r3, r2
 8001152:	2b02      	cmp	r3, #2
 8001154:	d1cc      	bne.n	80010f0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	0018      	movs	r0, r3
 800115a:	46bd      	mov	sp, r7
 800115c:	b004      	add	sp, #16
 800115e:	bd80      	pop	{r7, pc}

08001160 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800116c:	e028      	b.n	80011c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	0018      	movs	r0, r3
 8001176:	f000 f82f 	bl	80011d8 <I2C_IsAcknowledgeFailed>
 800117a:	1e03      	subs	r3, r0, #0
 800117c:	d001      	beq.n	8001182 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e026      	b.n	80011d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d007      	beq.n	8001198 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001188:	f7ff f886 	bl	8000298 <HAL_GetTick>
 800118c:	0002      	movs	r2, r0
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	68ba      	ldr	r2, [r7, #8]
 8001194:	429a      	cmp	r2, r3
 8001196:	d213      	bcs.n	80011c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	2220      	movs	r2, #32
 800119e:	431a      	orrs	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2241      	movs	r2, #65	; 0x41
 80011a8:	2120      	movs	r1, #32
 80011aa:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	2242      	movs	r2, #66	; 0x42
 80011b0:	2100      	movs	r1, #0
 80011b2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	2240      	movs	r2, #64	; 0x40
 80011b8:	2100      	movs	r1, #0
 80011ba:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e007      	b.n	80011d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	2220      	movs	r2, #32
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b20      	cmp	r3, #32
 80011cc:	d1cf      	bne.n	800116e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	0018      	movs	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	b004      	add	sp, #16
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	2210      	movs	r2, #16
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b10      	cmp	r3, #16
 80011f0:	d148      	bne.n	8001284 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80011f2:	e01b      	b.n	800122c <I2C_IsAcknowledgeFailed+0x54>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3301      	adds	r3, #1
 80011f8:	d018      	beq.n	800122c <I2C_IsAcknowledgeFailed+0x54>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <I2C_IsAcknowledgeFailed+0x38>
 8001200:	f7ff f84a 	bl	8000298 <HAL_GetTick>
 8001204:	0002      	movs	r2, r0
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68ba      	ldr	r2, [r7, #8]
 800120c:	429a      	cmp	r2, r3
 800120e:	d20d      	bcs.n	800122c <I2C_IsAcknowledgeFailed+0x54>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2241      	movs	r2, #65	; 0x41
 8001214:	2120      	movs	r1, #32
 8001216:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2242      	movs	r2, #66	; 0x42
 800121c:	2100      	movs	r1, #0
 800121e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2240      	movs	r2, #64	; 0x40
 8001224:	2100      	movs	r1, #0
 8001226:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e02c      	b.n	8001286 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	699b      	ldr	r3, [r3, #24]
 8001232:	2220      	movs	r2, #32
 8001234:	4013      	ands	r3, r2
 8001236:	2b20      	cmp	r3, #32
 8001238:	d1dc      	bne.n	80011f4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2210      	movs	r2, #16
 8001240:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2220      	movs	r2, #32
 8001248:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	0018      	movs	r0, r3
 800124e:	f7ff feed 	bl	800102c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	490c      	ldr	r1, [pc, #48]	; (8001290 <I2C_IsAcknowledgeFailed+0xb8>)
 800125e:	400a      	ands	r2, r1
 8001260:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2204      	movs	r2, #4
 8001266:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2241      	movs	r2, #65	; 0x41
 800126c:	2120      	movs	r1, #32
 800126e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2242      	movs	r2, #66	; 0x42
 8001274:	2100      	movs	r1, #0
 8001276:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2240      	movs	r2, #64	; 0x40
 800127c:	2100      	movs	r1, #0
 800127e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b004      	add	sp, #16
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	fe00e800 	.word	0xfe00e800

08001294 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b087      	sub	sp, #28
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	0008      	movs	r0, r1
 800129e:	0011      	movs	r1, r2
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	240a      	movs	r4, #10
 80012a4:	193b      	adds	r3, r7, r4
 80012a6:	1c02      	adds	r2, r0, #0
 80012a8:	801a      	strh	r2, [r3, #0]
 80012aa:	2009      	movs	r0, #9
 80012ac:	183b      	adds	r3, r7, r0
 80012ae:	1c0a      	adds	r2, r1, #0
 80012b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	617b      	str	r3, [r7, #20]

  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	4a0e      	ldr	r2, [pc, #56]	; (80012fc <I2C_TransferConfig+0x68>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	617b      	str	r3, [r7, #20]

  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16) & I2C_CR2_NBYTES) | \
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	059b      	lsls	r3, r3, #22
 80012cc:	0d9a      	lsrs	r2, r3, #22
 80012ce:	183b      	adds	r3, r7, r0
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	0419      	lsls	r1, r3, #16
 80012d4:	23ff      	movs	r3, #255	; 0xff
 80012d6:	041b      	lsls	r3, r3, #16
 80012d8:	400b      	ands	r3, r1
 80012da:	431a      	orrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	431a      	orrs	r2, r3
 80012e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012e2:	4313      	orrs	r3, r2
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]
                       (uint32_t)Mode | (uint32_t)Request);

  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	605a      	str	r2, [r3, #4]
}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	46bd      	mov	sp, r7
 80012f6:	b007      	add	sp, #28
 80012f8:	bd90      	pop	{r4, r7, pc}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	fc009800 	.word	0xfc009800

08001300 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2241      	movs	r2, #65	; 0x41
 800130e:	5c9b      	ldrb	r3, [r3, r2]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b20      	cmp	r3, #32
 8001314:	d138      	bne.n	8001388 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2240      	movs	r2, #64	; 0x40
 800131a:	5c9b      	ldrb	r3, [r3, r2]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d101      	bne.n	8001324 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001320:	2302      	movs	r3, #2
 8001322:	e032      	b.n	800138a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2240      	movs	r2, #64	; 0x40
 8001328:	2101      	movs	r1, #1
 800132a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2241      	movs	r2, #65	; 0x41
 8001330:	2124      	movs	r1, #36	; 0x24
 8001332:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2101      	movs	r1, #1
 8001340:	438a      	bics	r2, r1
 8001342:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4911      	ldr	r1, [pc, #68]	; (8001394 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001350:	400a      	ands	r2, r1
 8001352:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6819      	ldr	r1, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	430a      	orrs	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2101      	movs	r1, #1
 8001370:	430a      	orrs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2241      	movs	r2, #65	; 0x41
 8001378:	2120      	movs	r1, #32
 800137a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2240      	movs	r2, #64	; 0x40
 8001380:	2100      	movs	r1, #0
 8001382:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	e000      	b.n	800138a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001388:	2302      	movs	r3, #2
  }
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	ffffefff 	.word	0xffffefff

08001398 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2241      	movs	r2, #65	; 0x41
 80013aa:	5c9b      	ldrb	r3, [r3, r2]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b20      	cmp	r3, #32
 80013b0:	d139      	bne.n	8001426 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2240      	movs	r2, #64	; 0x40
 80013b6:	5c9b      	ldrb	r3, [r3, r2]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 80013bc:	2302      	movs	r3, #2
 80013be:	e033      	b.n	8001428 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2240      	movs	r2, #64	; 0x40
 80013c4:	2101      	movs	r1, #1
 80013c6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2241      	movs	r2, #65	; 0x41
 80013cc:	2124      	movs	r1, #36	; 0x24
 80013ce:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2101      	movs	r1, #1
 80013dc:	438a      	bics	r2, r1
 80013de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4a11      	ldr	r2, [pc, #68]	; (8001430 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2241      	movs	r2, #65	; 0x41
 8001416:	2120      	movs	r1, #32
 8001418:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2240      	movs	r2, #64	; 0x40
 800141e:	2100      	movs	r1, #0
 8001420:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001426:	2302      	movs	r3, #2
  }
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b004      	add	sp, #16
 800142e:	bd80      	pop	{r7, pc}
 8001430:	fffff0ff 	.word	0xfffff0ff

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 800143c:	2300      	movs	r3, #0
 800143e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	4013      	ands	r3, r2
 8001448:	d100      	bne.n	800144c <HAL_RCC_OscConfig+0x18>
 800144a:	e08d      	b.n	8001568 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800144c:	4bc3      	ldr	r3, [pc, #780]	; (800175c <HAL_RCC_OscConfig+0x328>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	2b04      	cmp	r3, #4
 8001456:	d00e      	beq.n	8001476 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001458:	4bc0      	ldr	r3, [pc, #768]	; (800175c <HAL_RCC_OscConfig+0x328>)
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	220c      	movs	r2, #12
 800145e:	4013      	ands	r3, r2
 8001460:	2b08      	cmp	r3, #8
 8001462:	d116      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
 8001464:	4bbd      	ldr	r3, [pc, #756]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	025b      	lsls	r3, r3, #9
 800146c:	401a      	ands	r2, r3
 800146e:	2380      	movs	r3, #128	; 0x80
 8001470:	025b      	lsls	r3, r3, #9
 8001472:	429a      	cmp	r2, r3
 8001474:	d10d      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001476:	4bb9      	ldr	r3, [pc, #740]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	2380      	movs	r3, #128	; 0x80
 800147c:	029b      	lsls	r3, r3, #10
 800147e:	4013      	ands	r3, r2
 8001480:	d100      	bne.n	8001484 <HAL_RCC_OscConfig+0x50>
 8001482:	e070      	b.n	8001566 <HAL_RCC_OscConfig+0x132>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d000      	beq.n	800148e <HAL_RCC_OscConfig+0x5a>
 800148c:	e06b      	b.n	8001566 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e2b6      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d107      	bne.n	80014aa <HAL_RCC_OscConfig+0x76>
 800149a:	4bb0      	ldr	r3, [pc, #704]	; (800175c <HAL_RCC_OscConfig+0x328>)
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	4baf      	ldr	r3, [pc, #700]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014a0:	2180      	movs	r1, #128	; 0x80
 80014a2:	0249      	lsls	r1, r1, #9
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	e02f      	b.n	800150a <HAL_RCC_OscConfig+0xd6>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4baa      	ldr	r3, [pc, #680]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4ba9      	ldr	r3, [pc, #676]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014b8:	49a9      	ldr	r1, [pc, #676]	; (8001760 <HAL_RCC_OscConfig+0x32c>)
 80014ba:	400a      	ands	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	4ba7      	ldr	r3, [pc, #668]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4ba6      	ldr	r3, [pc, #664]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014c4:	49a7      	ldr	r1, [pc, #668]	; (8001764 <HAL_RCC_OscConfig+0x330>)
 80014c6:	400a      	ands	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e01e      	b.n	800150a <HAL_RCC_OscConfig+0xd6>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b05      	cmp	r3, #5
 80014d2:	d10e      	bne.n	80014f2 <HAL_RCC_OscConfig+0xbe>
 80014d4:	4ba1      	ldr	r3, [pc, #644]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	4ba0      	ldr	r3, [pc, #640]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014da:	2180      	movs	r1, #128	; 0x80
 80014dc:	02c9      	lsls	r1, r1, #11
 80014de:	430a      	orrs	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	4b9e      	ldr	r3, [pc, #632]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	4b9d      	ldr	r3, [pc, #628]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014e8:	2180      	movs	r1, #128	; 0x80
 80014ea:	0249      	lsls	r1, r1, #9
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	e00b      	b.n	800150a <HAL_RCC_OscConfig+0xd6>
 80014f2:	4b9a      	ldr	r3, [pc, #616]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4b99      	ldr	r3, [pc, #612]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80014f8:	4999      	ldr	r1, [pc, #612]	; (8001760 <HAL_RCC_OscConfig+0x32c>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	4b97      	ldr	r3, [pc, #604]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b96      	ldr	r3, [pc, #600]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001504:	4997      	ldr	r1, [pc, #604]	; (8001764 <HAL_RCC_OscConfig+0x330>)
 8001506:	400a      	ands	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d014      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7fe fec1 	bl	8000298 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7fe febc 	bl	8000298 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e268      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800152e:	4b8b      	ldr	r3, [pc, #556]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	029b      	lsls	r3, r3, #10
 8001536:	4013      	ands	r3, r2
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e015      	b.n	8001568 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7fe feac 	bl	8000298 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001546:	f7fe fea7 	bl	8000298 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b64      	cmp	r3, #100	; 0x64
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e253      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001558:	4b80      	ldr	r3, [pc, #512]	; (800175c <HAL_RCC_OscConfig+0x328>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	029b      	lsls	r3, r3, #10
 8001560:	4013      	ands	r3, r2
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x112>
 8001564:	e000      	b.n	8001568 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001566:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2202      	movs	r2, #2
 800156e:	4013      	ands	r3, r2
 8001570:	d100      	bne.n	8001574 <HAL_RCC_OscConfig+0x140>
 8001572:	e069      	b.n	8001648 <HAL_RCC_OscConfig+0x214>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001574:	4b79      	ldr	r3, [pc, #484]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	220c      	movs	r2, #12
 800157a:	4013      	ands	r3, r2
 800157c:	d00b      	beq.n	8001596 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800157e:	4b77      	ldr	r3, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	220c      	movs	r2, #12
 8001584:	4013      	ands	r3, r2
 8001586:	2b08      	cmp	r3, #8
 8001588:	d11c      	bne.n	80015c4 <HAL_RCC_OscConfig+0x190>
 800158a:	4b74      	ldr	r3, [pc, #464]	; (800175c <HAL_RCC_OscConfig+0x328>)
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	2380      	movs	r3, #128	; 0x80
 8001590:	025b      	lsls	r3, r3, #9
 8001592:	4013      	ands	r3, r2
 8001594:	d116      	bne.n	80015c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001596:	4b71      	ldr	r3, [pc, #452]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2202      	movs	r2, #2
 800159c:	4013      	ands	r3, r2
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x178>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d001      	beq.n	80015ac <HAL_RCC_OscConfig+0x178>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e229      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	4b6b      	ldr	r3, [pc, #428]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	22f8      	movs	r2, #248	; 0xf8
 80015b2:	4393      	bics	r3, r2
 80015b4:	0019      	movs	r1, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
 80015ba:	00da      	lsls	r2, r3, #3
 80015bc:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80015be:	430a      	orrs	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c2:	e041      	b.n	8001648 <HAL_RCC_OscConfig+0x214>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d024      	beq.n	8001616 <HAL_RCC_OscConfig+0x1e2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015cc:	4b63      	ldr	r3, [pc, #396]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b62      	ldr	r3, [pc, #392]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7fe fe5e 	bl	8000298 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e2:	f7fe fe59 	bl	8000298 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e205      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f4:	4b59      	ldr	r3, [pc, #356]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d0f1      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1ae>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fe:	4b57      	ldr	r3, [pc, #348]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	22f8      	movs	r2, #248	; 0xf8
 8001604:	4393      	bics	r3, r2
 8001606:	0019      	movs	r1, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	00da      	lsls	r2, r3, #3
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	e018      	b.n	8001648 <HAL_RCC_OscConfig+0x214>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b51      	ldr	r3, [pc, #324]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	4b50      	ldr	r3, [pc, #320]	; (800175c <HAL_RCC_OscConfig+0x328>)
 800161c:	2101      	movs	r1, #1
 800161e:	438a      	bics	r2, r1
 8001620:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7fe fe39 	bl	8000298 <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x20a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162c:	f7fe fe34 	bl	8000298 <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x20a>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e1e0      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d1f1      	bne.n	800162c <HAL_RCC_OscConfig+0x1f8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2208      	movs	r2, #8
 800164e:	4013      	ands	r3, r2
 8001650:	d036      	beq.n	80016c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d019      	beq.n	800168e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165a:	4b40      	ldr	r3, [pc, #256]	; (800175c <HAL_RCC_OscConfig+0x328>)
 800165c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165e:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001660:	2101      	movs	r1, #1
 8001662:	430a      	orrs	r2, r1
 8001664:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001666:	f7fe fe17 	bl	8000298 <HAL_GetTick>
 800166a:	0003      	movs	r3, r0
 800166c:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x24e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001670:	f7fe fe12 	bl	8000298 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x24e>
        {
          return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e1be      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001682:	4b36      	ldr	r3, [pc, #216]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d0f1      	beq.n	8001670 <HAL_RCC_OscConfig+0x23c>
 800168c:	e018      	b.n	80016c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800168e:	4b33      	ldr	r3, [pc, #204]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001690:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001692:	4b32      	ldr	r3, [pc, #200]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001694:	2101      	movs	r1, #1
 8001696:	438a      	bics	r2, r1
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7fe fdfd 	bl	8000298 <HAL_GetTick>
 800169e:	0003      	movs	r3, r0
 80016a0:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a2:	e008      	b.n	80016b6 <HAL_RCC_OscConfig+0x282>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016a4:	f7fe fdf8 	bl	8000298 <HAL_GetTick>
 80016a8:	0002      	movs	r2, r0
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x282>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e1a4      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b6:	4b29      	ldr	r3, [pc, #164]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80016b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ba:	2202      	movs	r2, #2
 80016bc:	4013      	ands	r3, r2
 80016be:	d1f1      	bne.n	80016a4 <HAL_RCC_OscConfig+0x270>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2204      	movs	r2, #4
 80016c6:	4013      	ands	r3, r2
 80016c8:	d100      	bne.n	80016cc <HAL_RCC_OscConfig+0x298>
 80016ca:	e0b5      	b.n	8001838 <HAL_RCC_OscConfig+0x404>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016cc:	2317      	movs	r3, #23
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80016d6:	69da      	ldr	r2, [r3, #28]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	055b      	lsls	r3, r3, #21
 80016dc:	4013      	ands	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_RCC_OscConfig+0x2d0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80016e2:	69da      	ldr	r2, [r3, #28]
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80016e6:	2180      	movs	r1, #128	; 0x80
 80016e8:	0549      	lsls	r1, r1, #21
 80016ea:	430a      	orrs	r2, r1
 80016ec:	61da      	str	r2, [r3, #28]
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_RCC_OscConfig+0x328>)
 80016f0:	69da      	ldr	r2, [r3, #28]
 80016f2:	2380      	movs	r3, #128	; 0x80
 80016f4:	055b      	lsls	r3, r3, #21
 80016f6:	4013      	ands	r3, r2
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016fc:	2317      	movs	r3, #23
 80016fe:	18fb      	adds	r3, r7, r3
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <HAL_RCC_OscConfig+0x334>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4013      	ands	r3, r2
 800170e:	d11a      	bne.n	8001746 <HAL_RCC_OscConfig+0x312>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001710:	4b15      	ldr	r3, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x334>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_RCC_OscConfig+0x334>)
 8001716:	2180      	movs	r1, #128	; 0x80
 8001718:	0049      	lsls	r1, r1, #1
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800171e:	f7fe fdbb 	bl	8000298 <HAL_GetTick>
 8001722:	0003      	movs	r3, r0
 8001724:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x306>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001728:	f7fe fdb6 	bl	8000298 <HAL_GetTick>
 800172c:	0002      	movs	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x306>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e162      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800173a:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_RCC_OscConfig+0x334>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4013      	ands	r3, r2
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x2f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d10e      	bne.n	800176c <HAL_RCC_OscConfig+0x338>
 800174e:	4b03      	ldr	r3, [pc, #12]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001750:	6a1a      	ldr	r2, [r3, #32]
 8001752:	4b02      	ldr	r3, [pc, #8]	; (800175c <HAL_RCC_OscConfig+0x328>)
 8001754:	2101      	movs	r1, #1
 8001756:	430a      	orrs	r2, r1
 8001758:	621a      	str	r2, [r3, #32]
 800175a:	e035      	b.n	80017c8 <HAL_RCC_OscConfig+0x394>
 800175c:	40021000 	.word	0x40021000
 8001760:	fffeffff 	.word	0xfffeffff
 8001764:	fffbffff 	.word	0xfffbffff
 8001768:	40007000 	.word	0x40007000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d10c      	bne.n	800178e <HAL_RCC_OscConfig+0x35a>
 8001774:	4ba4      	ldr	r3, [pc, #656]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001776:	6a1a      	ldr	r2, [r3, #32]
 8001778:	4ba3      	ldr	r3, [pc, #652]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800177a:	2101      	movs	r1, #1
 800177c:	438a      	bics	r2, r1
 800177e:	621a      	str	r2, [r3, #32]
 8001780:	4ba1      	ldr	r3, [pc, #644]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001782:	6a1a      	ldr	r2, [r3, #32]
 8001784:	4ba0      	ldr	r3, [pc, #640]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001786:	2104      	movs	r1, #4
 8001788:	438a      	bics	r2, r1
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	e01c      	b.n	80017c8 <HAL_RCC_OscConfig+0x394>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b05      	cmp	r3, #5
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x37c>
 8001796:	4b9c      	ldr	r3, [pc, #624]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001798:	6a1a      	ldr	r2, [r3, #32]
 800179a:	4b9b      	ldr	r3, [pc, #620]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800179c:	2104      	movs	r1, #4
 800179e:	430a      	orrs	r2, r1
 80017a0:	621a      	str	r2, [r3, #32]
 80017a2:	4b99      	ldr	r3, [pc, #612]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80017a4:	6a1a      	ldr	r2, [r3, #32]
 80017a6:	4b98      	ldr	r3, [pc, #608]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80017a8:	2101      	movs	r1, #1
 80017aa:	430a      	orrs	r2, r1
 80017ac:	621a      	str	r2, [r3, #32]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0x394>
 80017b0:	4b95      	ldr	r3, [pc, #596]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80017b2:	6a1a      	ldr	r2, [r3, #32]
 80017b4:	4b94      	ldr	r3, [pc, #592]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	438a      	bics	r2, r1
 80017ba:	621a      	str	r2, [r3, #32]
 80017bc:	4b92      	ldr	r3, [pc, #584]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80017be:	6a1a      	ldr	r2, [r3, #32]
 80017c0:	4b91      	ldr	r3, [pc, #580]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80017c2:	2104      	movs	r1, #4
 80017c4:	438a      	bics	r2, r1
 80017c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d014      	beq.n	80017fa <HAL_RCC_OscConfig+0x3c6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d0:	f7fe fd62 	bl	8000298 <HAL_GetTick>
 80017d4:	0003      	movs	r3, r0
 80017d6:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d8:	e009      	b.n	80017ee <HAL_RCC_OscConfig+0x3ba>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017da:	f7fe fd5d 	bl	8000298 <HAL_GetTick>
 80017de:	0002      	movs	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	4a89      	ldr	r2, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x5d8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x3ba>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e108      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	4b86      	ldr	r3, [pc, #536]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	2202      	movs	r2, #2
 80017f4:	4013      	ands	r3, r2
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x3a6>
 80017f8:	e013      	b.n	8001822 <HAL_RCC_OscConfig+0x3ee>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fa:	f7fe fd4d 	bl	8000298 <HAL_GetTick>
 80017fe:	0003      	movs	r3, r0
 8001800:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001802:	e009      	b.n	8001818 <HAL_RCC_OscConfig+0x3e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001804:	f7fe fd48 	bl	8000298 <HAL_GetTick>
 8001808:	0002      	movs	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	4a7f      	ldr	r2, [pc, #508]	; (8001a0c <HAL_RCC_OscConfig+0x5d8>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x3e4>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e0f3      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	4b7b      	ldr	r3, [pc, #492]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800181a:	6a1b      	ldr	r3, [r3, #32]
 800181c:	2202      	movs	r2, #2
 800181e:	4013      	ands	r3, r2
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x3d0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001822:	2317      	movs	r3, #23
 8001824:	18fb      	adds	r3, r7, r3
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d105      	bne.n	8001838 <HAL_RCC_OscConfig+0x404>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800182c:	4b76      	ldr	r3, [pc, #472]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	4b75      	ldr	r3, [pc, #468]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001832:	4977      	ldr	r1, [pc, #476]	; (8001a10 <HAL_RCC_OscConfig+0x5dc>)
 8001834:	400a      	ands	r2, r1
 8001836:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2210      	movs	r2, #16
 800183e:	4013      	ands	r3, r2
 8001840:	d063      	beq.n	800190a <HAL_RCC_OscConfig+0x4d6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d12a      	bne.n	80018a0 <HAL_RCC_OscConfig+0x46c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800184a:	4b6f      	ldr	r3, [pc, #444]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800184c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184e:	4b6e      	ldr	r3, [pc, #440]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001850:	2104      	movs	r1, #4
 8001852:	430a      	orrs	r2, r1
 8001854:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001856:	4b6c      	ldr	r3, [pc, #432]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001858:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800185a:	4b6b      	ldr	r3, [pc, #428]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800185c:	2101      	movs	r1, #1
 800185e:	430a      	orrs	r2, r1
 8001860:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001862:	f7fe fd19 	bl	8000298 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x44a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800186c:	f7fe fd14 	bl	8000298 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x44a>
        {
          return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e0c0      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800187e:	4b62      	ldr	r3, [pc, #392]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	2202      	movs	r2, #2
 8001884:	4013      	ands	r3, r2
 8001886:	d0f1      	beq.n	800186c <HAL_RCC_OscConfig+0x438>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001888:	4b5f      	ldr	r3, [pc, #380]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800188a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188c:	22f8      	movs	r2, #248	; 0xf8
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	00da      	lsls	r2, r3, #3
 8001898:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800189a:	430a      	orrs	r2, r1
 800189c:	635a      	str	r2, [r3, #52]	; 0x34
 800189e:	e034      	b.n	800190a <HAL_RCC_OscConfig+0x4d6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	695b      	ldr	r3, [r3, #20]
 80018a4:	3305      	adds	r3, #5
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_OscConfig+0x498>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80018a8:	4b57      	ldr	r3, [pc, #348]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80018aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ac:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80018ae:	2104      	movs	r1, #4
 80018b0:	438a      	bics	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018b4:	4b54      	ldr	r3, [pc, #336]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80018b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b8:	22f8      	movs	r2, #248	; 0xf8
 80018ba:	4393      	bics	r3, r2
 80018bc:	0019      	movs	r1, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	00da      	lsls	r2, r3, #3
 80018c4:	4b50      	ldr	r3, [pc, #320]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80018c6:	430a      	orrs	r2, r1
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ca:	e01e      	b.n	800190a <HAL_RCC_OscConfig+0x4d6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018cc:	4b4e      	ldr	r3, [pc, #312]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80018ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018d0:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80018d2:	2104      	movs	r1, #4
 80018d4:	430a      	orrs	r2, r1
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80018da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80018de:	2101      	movs	r1, #1
 80018e0:	438a      	bics	r2, r1
 80018e2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7fe fcd8 	bl	8000298 <HAL_GetTick>
 80018e8:	0003      	movs	r3, r0
 80018ea:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018ec:	e008      	b.n	8001900 <HAL_RCC_OscConfig+0x4cc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018ee:	f7fe fcd3 	bl	8000298 <HAL_GetTick>
 80018f2:	0002      	movs	r2, r0
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e07f      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001900:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001904:	2202      	movs	r2, #2
 8001906:	4013      	ands	r3, r2
 8001908:	d1f1      	bne.n	80018ee <HAL_RCC_OscConfig+0x4ba>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a1b      	ldr	r3, [r3, #32]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d100      	bne.n	8001914 <HAL_RCC_OscConfig+0x4e0>
 8001912:	e074      	b.n	80019fe <HAL_RCC_OscConfig+0x5ca>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001914:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	220c      	movs	r2, #12
 800191a:	4013      	ands	r3, r2
 800191c:	2b08      	cmp	r3, #8
 800191e:	d100      	bne.n	8001922 <HAL_RCC_OscConfig+0x4ee>
 8001920:	e06b      	b.n	80019fa <HAL_RCC_OscConfig+0x5c6>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	2b02      	cmp	r3, #2
 8001928:	d14c      	bne.n	80019c4 <HAL_RCC_OscConfig+0x590>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800192a:	4b37      	ldr	r3, [pc, #220]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001930:	4938      	ldr	r1, [pc, #224]	; (8001a14 <HAL_RCC_OscConfig+0x5e0>)
 8001932:	400a      	ands	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001936:	f7fe fcaf 	bl	8000298 <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x51e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001940:	f7fe fcaa 	bl	8000298 <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x51e>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e056      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	2380      	movs	r3, #128	; 0x80
 8001958:	049b      	lsls	r3, r3, #18
 800195a:	4013      	ands	r3, r2
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x50c>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001962:	220f      	movs	r2, #15
 8001964:	4393      	bics	r3, r2
 8001966:	0019      	movs	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800196e:	430a      	orrs	r2, r1
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	4a28      	ldr	r2, [pc, #160]	; (8001a18 <HAL_RCC_OscConfig+0x5e4>)
 8001978:	4013      	ands	r3, r2
 800197a:	0019      	movs	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	431a      	orrs	r2, r3
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b1e      	ldr	r3, [pc, #120]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	0449      	lsls	r1, r1, #17
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199a:	f7fe fc7d 	bl	8000298 <HAL_GetTick>
 800199e:	0003      	movs	r3, r0
 80019a0:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x582>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7fe fc78 	bl	8000298 <HAL_GetTick>
 80019a8:	0002      	movs	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e024      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	049b      	lsls	r3, r3, #18
 80019be:	4013      	ands	r3, r2
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x570>
 80019c2:	e01c      	b.n	80019fe <HAL_RCC_OscConfig+0x5ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b10      	ldr	r3, [pc, #64]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80019ca:	4912      	ldr	r1, [pc, #72]	; (8001a14 <HAL_RCC_OscConfig+0x5e0>)
 80019cc:	400a      	ands	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7fe fc62 	bl	8000298 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019da:	f7fe fc5d 	bl	8000298 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e009      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_RCC_OscConfig+0x5d4>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	049b      	lsls	r3, r3, #18
 80019f4:	4013      	ands	r3, r2
 80019f6:	d1f0      	bne.n	80019da <HAL_RCC_OscConfig+0x5a6>
 80019f8:	e001      	b.n	80019fe <HAL_RCC_OscConfig+0x5ca>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <HAL_RCC_OscConfig+0x5cc>
    }
  }
  
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b006      	add	sp, #24
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	efffffff 	.word	0xefffffff
 8001a14:	feffffff 	.word	0xfeffffff
 8001a18:	ffc2ffff 	.word	0xffc2ffff

08001a1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a2a:	4b6a      	ldr	r3, [pc, #424]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	4013      	ands	r3, r2
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d911      	bls.n	8001a5c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a38:	4b66      	ldr	r3, [pc, #408]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4393      	bics	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a4a:	4b62      	ldr	r3, [pc, #392]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4013      	ands	r3, r2
 8001a52:	683a      	ldr	r2, [r7, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d001      	beq.n	8001a5c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e0b6      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2202      	movs	r2, #2
 8001a62:	4013      	ands	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a66:	4b5c      	ldr	r3, [pc, #368]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	22f0      	movs	r2, #240	; 0xf0
 8001a6c:	4393      	bics	r3, r2
 8001a6e:	0019      	movs	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	4b58      	ldr	r3, [pc, #352]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d100      	bne.n	8001a86 <HAL_RCC_ClockConfig+0x6a>
 8001a84:	e067      	b.n	8001b56 <HAL_RCC_ClockConfig+0x13a>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b52      	ldr	r3, [pc, #328]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	029b      	lsls	r3, r3, #10
 8001a96:	4013      	ands	r3, r2
 8001a98:	d114      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e095      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d107      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aa6:	4b4c      	ldr	r3, [pc, #304]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2380      	movs	r3, #128	; 0x80
 8001aac:	049b      	lsls	r3, r3, #18
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d108      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e089      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	4013      	ands	r3, r2
 8001abe:	d101      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e082      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac4:	4b44      	ldr	r3, [pc, #272]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2203      	movs	r2, #3
 8001aca:	4393      	bics	r3, r2
 8001acc:	0019      	movs	r1, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	4b41      	ldr	r3, [pc, #260]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad8:	f7fe fbde 	bl	8000298 <HAL_GetTick>
 8001adc:	0003      	movs	r3, r0
 8001ade:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d111      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae8:	e009      	b.n	8001afe <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aea:	f7fe fbd5 	bl	8000298 <HAL_GetTick>
 8001aee:	0002      	movs	r2, r0
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e065      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	220c      	movs	r2, #12
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d1ef      	bne.n	8001aea <HAL_RCC_ClockConfig+0xce>
 8001b0a:	e024      	b.n	8001b56 <HAL_RCC_ClockConfig+0x13a>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d11b      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x130>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b16:	f7fe fbbf 	bl	8000298 <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_ClockConfig+0x10e>
        {
          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e04f      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	220c      	movs	r2, #12
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d1ef      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xfa>
 8001b36:	e00e      	b.n	8001b56 <HAL_RCC_ClockConfig+0x13a>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7fe fbae 	bl	8000298 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <HAL_RCC_ClockConfig+0x1c0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_ClockConfig+0x130>
        {
          return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e03e      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	220c      	movs	r2, #12
 8001b52:	4013      	ands	r3, r2
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_ClockConfig+0x11c>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001b56:	4b1f      	ldr	r3, [pc, #124]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d211      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x16c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b64:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	4b19      	ldr	r3, [pc, #100]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x16c>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e020      	b.n	8001bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2204      	movs	r2, #4
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d009      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x18a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ba6:	f000 f821 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8001baa:	0001      	movs	r1, r0
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	091b      	lsrs	r3, r3, #4
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	4a0b      	ldr	r2, [pc, #44]	; (8001be4 <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	5cd3      	ldrb	r3, [r2, r3]
 8001bba:	000a      	movs	r2, r1
 8001bbc:	40da      	lsrs	r2, r3
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <HAL_RCC_ClockConfig+0x1cc>)
 8001bc0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7fe fb40 	bl	8000248 <HAL_InitTick>
  
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	0018      	movs	r0, r3
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	b004      	add	sp, #16
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	40022000 	.word	0x40022000
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	00001388 	.word	0x00001388
 8001be0:	fffff8ff 	.word	0xfffff8ff
 8001be4:	08004348 	.word	0x08004348
 8001be8:	20000010 	.word	0x20000010

08001bec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bec:	b590      	push	{r4, r7, lr}
 8001bee:	b08f      	sub	sp, #60	; 0x3c
 8001bf0:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001bf2:	2314      	movs	r3, #20
 8001bf4:	18fb      	adds	r3, r7, r3
 8001bf6:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bf8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001bfa:	c313      	stmia	r3!, {r0, r1, r4}
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	4a29      	ldr	r2, [pc, #164]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001c06:	c313      	stmia	r3!, {r0, r1, r4}
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c10:	2300      	movs	r3, #0
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c14:	2300      	movs	r3, #0
 8001c16:	637b      	str	r3, [r7, #52]	; 0x34
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001c20:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	220c      	movs	r2, #12
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d002      	beq.n	8001c36 <HAL_RCC_GetSysClockFreq+0x4a>
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d003      	beq.n	8001c3c <HAL_RCC_GetSysClockFreq+0x50>
 8001c34:	e02d      	b.n	8001c92 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c36:	4b1e      	ldr	r3, [pc, #120]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c3a:	e02d      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c3e:	0c9b      	lsrs	r3, r3, #18
 8001c40:	220f      	movs	r2, #15
 8001c42:	4013      	ands	r3, r2
 8001c44:	2214      	movs	r2, #20
 8001c46:	18ba      	adds	r2, r7, r2
 8001c48:	5cd3      	ldrb	r3, [r2, r3]
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	220f      	movs	r2, #15
 8001c52:	4013      	ands	r3, r2
 8001c54:	1d3a      	adds	r2, r7, #4
 8001c56:	5cd3      	ldrb	r3, [r2, r3]
 8001c58:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	025b      	lsls	r3, r3, #9
 8001c60:	4013      	ands	r3, r2
 8001c62:	d009      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001c64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c66:	4812      	ldr	r0, [pc, #72]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c68:	f7fe fa4e 	bl	8000108 <__udivsi3>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	001a      	movs	r2, r3
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	4353      	muls	r3, r2
 8001c74:	637b      	str	r3, [r7, #52]	; 0x34
 8001c76:	e009      	b.n	8001c8c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8001c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7a:	000a      	movs	r2, r1
 8001c7c:	0152      	lsls	r2, r2, #5
 8001c7e:	1a52      	subs	r2, r2, r1
 8001c80:	0193      	lsls	r3, r2, #6
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	185b      	adds	r3, r3, r1
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c90:	e002      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c96:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c9a:	0018      	movs	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	b00f      	add	sp, #60	; 0x3c
 8001ca0:	bd90      	pop	{r4, r7, pc}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	080042c8 	.word	0x080042c8
 8001ca8:	080042d8 	.word	0x080042d8
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	007a1200 	.word	0x007a1200

08001cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb8:	4b02      	ldr	r3, [pc, #8]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	20000010 	.word	0x20000010

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ccc:	f7ff fff2 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cd0:	0001      	movs	r1, r0
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	2207      	movs	r2, #7
 8001cda:	4013      	ands	r3, r2
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cde:	5cd3      	ldrb	r3, [r2, r3]
 8001ce0:	40d9      	lsrs	r1, r3
 8001ce2:	000b      	movs	r3, r1
}    
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08004358 	.word	0x08004358

08001cf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	025b      	lsls	r3, r3, #9
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d100      	bne.n	8001d12 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001d10:	e08f      	b.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001d12:	2317      	movs	r3, #23
 8001d14:	18fb      	adds	r3, r7, r3
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d1a:	4b5f      	ldr	r3, [pc, #380]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d1c:	69da      	ldr	r2, [r3, #28]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	055b      	lsls	r3, r3, #21
 8001d22:	4013      	ands	r3, r2
 8001d24:	d111      	bne.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	4b5c      	ldr	r3, [pc, #368]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d28:	69da      	ldr	r2, [r3, #28]
 8001d2a:	4b5b      	ldr	r3, [pc, #364]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d2c:	2180      	movs	r1, #128	; 0x80
 8001d2e:	0549      	lsls	r1, r1, #21
 8001d30:	430a      	orrs	r2, r1
 8001d32:	61da      	str	r2, [r3, #28]
 8001d34:	4b58      	ldr	r3, [pc, #352]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d36:	69da      	ldr	r2, [r3, #28]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	055b      	lsls	r3, r3, #21
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60bb      	str	r3, [r7, #8]
 8001d40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d42:	2317      	movs	r3, #23
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4a:	4b54      	ldr	r3, [pc, #336]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	2380      	movs	r3, #128	; 0x80
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4013      	ands	r3, r2
 8001d54:	d11a      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d56:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d5c:	2180      	movs	r1, #128	; 0x80
 8001d5e:	0049      	lsls	r1, r1, #1
 8001d60:	430a      	orrs	r2, r1
 8001d62:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d64:	f7fe fa98 	bl	8000298 <HAL_GetTick>
 8001d68:	0003      	movs	r3, r0
 8001d6a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	e008      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d6e:	f7fe fa93 	bl	8000298 <HAL_GetTick>
 8001d72:	0002      	movs	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	2b64      	cmp	r3, #100	; 0x64
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e087      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b46      	ldr	r3, [pc, #280]	; (8001e9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d0f0      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	23c0      	movs	r3, #192	; 0xc0
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d034      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	23c0      	movs	r3, #192	; 0xc0
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d02c      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001dae:	4b3a      	ldr	r3, [pc, #232]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001db8:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dba:	6a1a      	ldr	r2, [r3, #32]
 8001dbc:	4b36      	ldr	r3, [pc, #216]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	0249      	lsls	r1, r1, #9
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dc8:	6a1a      	ldr	r2, [r3, #32]
 8001dca:	4b33      	ldr	r3, [pc, #204]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dcc:	4935      	ldr	r1, [pc, #212]	; (8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001dd4:	68fa      	ldr	r2, [r7, #12]
 8001dd6:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d013      	beq.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7fe fa5a 	bl	8000298 <HAL_GetTick>
 8001de4:	0003      	movs	r3, r0
 8001de6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de8:	e009      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dea:	f7fe fa55 	bl	8000298 <HAL_GetTick>
 8001dee:	0002      	movs	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	4a2c      	ldr	r2, [pc, #176]	; (8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e048      	b.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	2202      	movs	r2, #2
 8001e04:	4013      	ands	r3, r2
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e08:	4b23      	ldr	r3, [pc, #140]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a24      	ldr	r2, [pc, #144]	; (8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4b20      	ldr	r3, [pc, #128]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e1c:	2317      	movs	r3, #23
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d105      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e26:	4b1c      	ldr	r3, [pc, #112]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e2c:	491f      	ldr	r1, [pc, #124]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001e2e:	400a      	ands	r2, r1
 8001e30:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	2201      	movs	r2, #1
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e3c:	4b16      	ldr	r3, [pc, #88]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	2203      	movs	r2, #3
 8001e42:	4393      	bics	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2220      	movs	r2, #32
 8001e56:	4013      	ands	r3, r2
 8001e58:	d009      	beq.n	8001e6e <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e5a:	4b0f      	ldr	r3, [pc, #60]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	2210      	movs	r2, #16
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	4013      	ands	r3, r2
 8001e78:	d009      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	4b03      	ldr	r3, [pc, #12]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	0018      	movs	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	b006      	add	sp, #24
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	fffffcff 	.word	0xfffffcff
 8001ea4:	fffeffff 	.word	0xfffeffff
 8001ea8:	00001388 	.word	0x00001388
 8001eac:	efffffff 	.word	0xefffffff

08001eb0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e01e      	b.n	8001f00 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	223d      	movs	r2, #61	; 0x3d
 8001ec6:	5c9b      	ldrb	r3, [r3, r2]
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d107      	bne.n	8001ede <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	223c      	movs	r2, #60	; 0x3c
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	0018      	movs	r0, r3
 8001eda:	f002 f82f 	bl	8003f3c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	223d      	movs	r2, #61	; 0x3d
 8001ee2:	2102      	movs	r1, #2
 8001ee4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	0019      	movs	r1, r3
 8001ef0:	0010      	movs	r0, r2
 8001ef2:	f000 fa39 	bl	8002368 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	223d      	movs	r2, #61	; 0x3d
 8001efa:	2101      	movs	r1, #1
 8001efc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	0018      	movs	r0, r3
 8001f02:	46bd      	mov	sp, r7
 8001f04:	b002      	add	sp, #8
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	0018      	movs	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b002      	add	sp, #8
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b082      	sub	sp, #8
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d124      	bne.n	8001f9a <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2202      	movs	r2, #2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d11d      	bne.n	8001f9a <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2203      	movs	r2, #3
 8001f64:	4252      	negs	r2, r2
 8001f66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2203      	movs	r2, #3
 8001f76:	4013      	ands	r3, r2
 8001f78:	d004      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 f9db 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 8001f82:	e007      	b.n	8001f94 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 f9ce 	bl	8002328 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	0018      	movs	r0, r3
 8001f90:	f000 f9da 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d125      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b04      	cmp	r3, #4
 8001fb4:	d11e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2205      	movs	r2, #5
 8001fbc:	4252      	negs	r2, r2
 8001fbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699a      	ldr	r2, [r3, #24]
 8001fcc:	23c0      	movs	r3, #192	; 0xc0
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d004      	beq.n	8001fde <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	0018      	movs	r0, r3
 8001fd8:	f000 f9ae 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 8001fdc:	e007      	b.n	8001fee <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f000 f9a1 	bl	8002328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f000 f9ad 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	2208      	movs	r2, #8
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d124      	bne.n	800204c <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2208      	movs	r2, #8
 800200a:	4013      	ands	r3, r2
 800200c:	2b08      	cmp	r3, #8
 800200e:	d11d      	bne.n	800204c <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2209      	movs	r2, #9
 8002016:	4252      	negs	r2, r2
 8002018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2204      	movs	r2, #4
 800201e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2203      	movs	r2, #3
 8002028:	4013      	ands	r3, r2
 800202a:	d004      	beq.n	8002036 <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	0018      	movs	r0, r3
 8002030:	f000 f982 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 8002034:	e007      	b.n	8002046 <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 f975 	bl	8002328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	0018      	movs	r0, r3
 8002042:	f000 f981 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2210      	movs	r2, #16
 8002054:	4013      	ands	r3, r2
 8002056:	2b10      	cmp	r3, #16
 8002058:	d125      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2210      	movs	r2, #16
 8002062:	4013      	ands	r3, r2
 8002064:	2b10      	cmp	r3, #16
 8002066:	d11e      	bne.n	80020a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2211      	movs	r2, #17
 800206e:	4252      	negs	r2, r2
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2208      	movs	r2, #8
 8002076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69da      	ldr	r2, [r3, #28]
 800207e:	23c0      	movs	r3, #192	; 0xc0
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4013      	ands	r3, r2
 8002084:	d004      	beq.n	8002090 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f955 	bl	8002338 <HAL_TIM_IC_CaptureCallback>
 800208e:	e007      	b.n	80020a0 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f000 f948 	bl	8002328 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	0018      	movs	r0, r3
 800209c:	f000 f954 	bl	8002348 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	2201      	movs	r2, #1
 80020ae:	4013      	ands	r3, r2
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10f      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	4013      	ands	r3, r2
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2202      	movs	r2, #2
 80020c8:	4252      	negs	r2, r2
 80020ca:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f002 f84e 	bl	8004170 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2280      	movs	r2, #128	; 0x80
 80020dc:	4013      	ands	r3, r2
 80020de:	2b80      	cmp	r3, #128	; 0x80
 80020e0:	d10f      	bne.n	8002102 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2280      	movs	r2, #128	; 0x80
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b80      	cmp	r3, #128	; 0x80
 80020ee:	d108      	bne.n	8002102 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2281      	movs	r2, #129	; 0x81
 80020f6:	4252      	negs	r2, r2
 80020f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	0018      	movs	r0, r3
 80020fe:	f000 faaa 	bl	8002656 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2240      	movs	r2, #64	; 0x40
 800210a:	4013      	ands	r3, r2
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d10f      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2240      	movs	r2, #64	; 0x40
 8002118:	4013      	ands	r3, r2
 800211a:	2b40      	cmp	r3, #64	; 0x40
 800211c:	d108      	bne.n	8002130 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2241      	movs	r2, #65	; 0x41
 8002124:	4252      	negs	r2, r2
 8002126:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f914 	bl	8002358 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2220      	movs	r2, #32
 8002138:	4013      	ands	r3, r2
 800213a:	2b20      	cmp	r3, #32
 800213c:	d10f      	bne.n	800215e <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2220      	movs	r2, #32
 8002146:	4013      	ands	r3, r2
 8002148:	2b20      	cmp	r3, #32
 800214a:	d108      	bne.n	800215e <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2221      	movs	r2, #33	; 0x21
 8002152:	4252      	negs	r2, r2
 8002154:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	0018      	movs	r0, r3
 800215a:	f000 fa74 	bl	8002646 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	b002      	add	sp, #8
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	223c      	movs	r2, #60	; 0x3c
 800217a:	5c9b      	ldrb	r3, [r3, r2]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d101      	bne.n	8002184 <HAL_TIM_ConfigClockSource+0x1c>
 8002180:	2302      	movs	r3, #2
 8002182:	e0ca      	b.n	800231a <HAL_TIM_ConfigClockSource+0x1b2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	223c      	movs	r2, #60	; 0x3c
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	223d      	movs	r2, #61	; 0x3d
 8002190:	2102      	movs	r1, #2
 8002192:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2277      	movs	r2, #119	; 0x77
 80021a0:	4393      	bics	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a5f      	ldr	r2, [pc, #380]	; (8002324 <HAL_TIM_ConfigClockSource+0x1bc>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b40      	cmp	r3, #64	; 0x40
 80021ba:	d100      	bne.n	80021be <HAL_TIM_ConfigClockSource+0x56>
 80021bc:	e078      	b.n	80022b0 <HAL_TIM_ConfigClockSource+0x148>
 80021be:	d80e      	bhi.n	80021de <HAL_TIM_ConfigClockSource+0x76>
 80021c0:	2b10      	cmp	r3, #16
 80021c2:	d100      	bne.n	80021c6 <HAL_TIM_ConfigClockSource+0x5e>
 80021c4:	e08b      	b.n	80022de <HAL_TIM_ConfigClockSource+0x176>
 80021c6:	d803      	bhi.n	80021d0 <HAL_TIM_ConfigClockSource+0x68>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d100      	bne.n	80021ce <HAL_TIM_ConfigClockSource+0x66>
 80021cc:	e080      	b.n	80022d0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80021ce:	e09b      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d100      	bne.n	80021d6 <HAL_TIM_ConfigClockSource+0x6e>
 80021d4:	e08a      	b.n	80022ec <HAL_TIM_ConfigClockSource+0x184>
 80021d6:	2b30      	cmp	r3, #48	; 0x30
 80021d8:	d100      	bne.n	80021dc <HAL_TIM_ConfigClockSource+0x74>
 80021da:	e08e      	b.n	80022fa <HAL_TIM_ConfigClockSource+0x192>
    break;
 80021dc:	e094      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 80021de:	2b70      	cmp	r3, #112	; 0x70
 80021e0:	d017      	beq.n	8002212 <HAL_TIM_ConfigClockSource+0xaa>
 80021e2:	d804      	bhi.n	80021ee <HAL_TIM_ConfigClockSource+0x86>
 80021e4:	2b50      	cmp	r3, #80	; 0x50
 80021e6:	d043      	beq.n	8002270 <HAL_TIM_ConfigClockSource+0x108>
 80021e8:	2b60      	cmp	r3, #96	; 0x60
 80021ea:	d051      	beq.n	8002290 <HAL_TIM_ConfigClockSource+0x128>
    break;
 80021ec:	e08c      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 80021ee:	2280      	movs	r2, #128	; 0x80
 80021f0:	0152      	lsls	r2, r2, #5
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d004      	beq.n	8002200 <HAL_TIM_ConfigClockSource+0x98>
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	0192      	lsls	r2, r2, #6
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d024      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xe0>
    break;
 80021fe:	e083      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2107      	movs	r1, #7
 800220c:	438a      	bics	r2, r1
 800220e:	609a      	str	r2, [r3, #8]
    break;
 8002210:	e07a      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	6899      	ldr	r1, [r3, #8]
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	f000 f9ab 	bl	800257c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2277      	movs	r2, #119	; 0x77
 8002232:	4393      	bics	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2277      	movs	r2, #119	; 0x77
 800223a:	4313      	orrs	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	609a      	str	r2, [r3, #8]
    break;
 8002246:	e05f      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f000 f990 	bl	800257c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	01c9      	lsls	r1, r1, #7
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
    break;
 800226e:	e04b      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6859      	ldr	r1, [r3, #4]
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	001a      	movs	r2, r3
 800227e:	f000 f8f5 	bl	800246c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2150      	movs	r1, #80	; 0x50
 8002288:	0018      	movs	r0, r3
 800228a:	f000 f957 	bl	800253c <TIM_ITRx_SetConfig>
    break;
 800228e:	e03b      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	001a      	movs	r2, r3
 800229e:	f000 f917 	bl	80024d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2160      	movs	r1, #96	; 0x60
 80022a8:	0018      	movs	r0, r3
 80022aa:	f000 f947 	bl	800253c <TIM_ITRx_SetConfig>
    break;
 80022ae:	e02b      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	001a      	movs	r2, r3
 80022be:	f000 f8d5 	bl	800246c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2140      	movs	r1, #64	; 0x40
 80022c8:	0018      	movs	r0, r3
 80022ca:	f000 f937 	bl	800253c <TIM_ITRx_SetConfig>
    break;
 80022ce:	e01b      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2100      	movs	r1, #0
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 f930 	bl	800253c <TIM_ITRx_SetConfig>
    break;
 80022dc:	e014      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2110      	movs	r1, #16
 80022e4:	0018      	movs	r0, r3
 80022e6:	f000 f929 	bl	800253c <TIM_ITRx_SetConfig>
    break;
 80022ea:	e00d      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2120      	movs	r1, #32
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 f922 	bl	800253c <TIM_ITRx_SetConfig>
    break;
 80022f8:	e006      	b.n	8002308 <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2130      	movs	r1, #48	; 0x30
 8002300:	0018      	movs	r0, r3
 8002302:	f000 f91b 	bl	800253c <TIM_ITRx_SetConfig>
    break;
 8002306:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	223d      	movs	r2, #61	; 0x3d
 800230c:	2101      	movs	r1, #1
 800230e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	223c      	movs	r2, #60	; 0x3c
 8002314:	2100      	movs	r1, #0
 8002316:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b004      	add	sp, #16
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	ffff00ff 	.word	0xffff00ff

08002328 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	b002      	add	sp, #8
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002340:	46c0      	nop			; (mov r8, r8)
 8002342:	46bd      	mov	sp, r7
 8002344:	b002      	add	sp, #8
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002350:	46c0      	nop			; (mov r8, r8)
 8002352:	46bd      	mov	sp, r7
 8002354:	b002      	add	sp, #8
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}

08002368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4a34      	ldr	r2, [pc, #208]	; (8002450 <TIM_Base_SetConfig+0xe8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d008      	beq.n	8002396 <TIM_Base_SetConfig+0x2e>
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	05db      	lsls	r3, r3, #23
 800238a:	429a      	cmp	r2, r3
 800238c:	d003      	beq.n	8002396 <TIM_Base_SetConfig+0x2e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a30      	ldr	r2, [pc, #192]	; (8002454 <TIM_Base_SetConfig+0xec>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d108      	bne.n	80023a8 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2270      	movs	r2, #112	; 0x70
 800239a:	4393      	bics	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a29      	ldr	r2, [pc, #164]	; (8002450 <TIM_Base_SetConfig+0xe8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d018      	beq.n	80023e2 <TIM_Base_SetConfig+0x7a>
 80023b0:	687a      	ldr	r2, [r7, #4]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	05db      	lsls	r3, r3, #23
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d013      	beq.n	80023e2 <TIM_Base_SetConfig+0x7a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a25      	ldr	r2, [pc, #148]	; (8002454 <TIM_Base_SetConfig+0xec>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00f      	beq.n	80023e2 <TIM_Base_SetConfig+0x7a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a24      	ldr	r2, [pc, #144]	; (8002458 <TIM_Base_SetConfig+0xf0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00b      	beq.n	80023e2 <TIM_Base_SetConfig+0x7a>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a23      	ldr	r2, [pc, #140]	; (800245c <TIM_Base_SetConfig+0xf4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d007      	beq.n	80023e2 <TIM_Base_SetConfig+0x7a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a22      	ldr	r2, [pc, #136]	; (8002460 <TIM_Base_SetConfig+0xf8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d003      	beq.n	80023e2 <TIM_Base_SetConfig+0x7a>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a21      	ldr	r2, [pc, #132]	; (8002464 <TIM_Base_SetConfig+0xfc>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d108      	bne.n	80023f4 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	4a20      	ldr	r2, [pc, #128]	; (8002468 <TIM_Base_SetConfig+0x100>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	4393      	bics	r3, r2
 80023fa:	001a      	movs	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a0c      	ldr	r2, [pc, #48]	; (8002450 <TIM_Base_SetConfig+0xe8>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d00b      	beq.n	800243a <TIM_Base_SetConfig+0xd2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <TIM_Base_SetConfig+0xf4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d007      	beq.n	800243a <TIM_Base_SetConfig+0xd2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a0c      	ldr	r2, [pc, #48]	; (8002460 <TIM_Base_SetConfig+0xf8>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d003      	beq.n	800243a <TIM_Base_SetConfig+0xd2>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <TIM_Base_SetConfig+0xfc>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d103      	bne.n	8002442 <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	691a      	ldr	r2, [r3, #16]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	615a      	str	r2, [r3, #20]
}
 8002448:	46c0      	nop			; (mov r8, r8)
 800244a:	46bd      	mov	sp, r7
 800244c:	b004      	add	sp, #16
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40012c00 	.word	0x40012c00
 8002454:	40000400 	.word	0x40000400
 8002458:	40002000 	.word	0x40002000
 800245c:	40014000 	.word	0x40014000
 8002460:	40014400 	.word	0x40014400
 8002464:	40014800 	.word	0x40014800
 8002468:	fffffcff 	.word	0xfffffcff

0800246c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6a1b      	ldr	r3, [r3, #32]
 800248a:	2201      	movs	r2, #1
 800248c:	4393      	bics	r3, r2
 800248e:	001a      	movs	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	22f0      	movs	r2, #240	; 0xf0
 800249e:	4393      	bics	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	220a      	movs	r2, #10
 80024b0:	4393      	bics	r3, r2
 80024b2:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	621a      	str	r2, [r3, #32]
}
 80024c8:	46c0      	nop			; (mov r8, r8)
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b006      	add	sp, #24
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	2210      	movs	r2, #16
 80024ea:	4393      	bics	r3, r2
 80024ec:	001a      	movs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	4a0d      	ldr	r2, [pc, #52]	; (8002538 <TIM_TI2_ConfigInputStage+0x68>)
 8002502:	4013      	ands	r3, r2
 8002504:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	031b      	lsls	r3, r3, #12
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4313      	orrs	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	22a0      	movs	r2, #160	; 0xa0
 8002514:	4393      	bics	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	011b      	lsls	r3, r3, #4
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	621a      	str	r2, [r3, #32]
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b006      	add	sp, #24
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	ffff0fff 	.word	0xffff0fff

0800253c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
 8002544:	000a      	movs	r2, r1
 8002546:	1cbb      	adds	r3, r7, #2
 8002548:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2270      	movs	r2, #112	; 0x70
 8002558:	4393      	bics	r3, r2
 800255a:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800255c:	1cbb      	adds	r3, r7, #2
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	2207      	movs	r2, #7
 8002562:	4313      	orrs	r3, r2
 8002564:	b29b      	uxth	r3, r3
 8002566:	001a      	movs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	609a      	str	r2, [r3, #8]
}
 8002574:	46c0      	nop			; (mov r8, r8)
 8002576:	46bd      	mov	sp, r7
 8002578:	b004      	add	sp, #16
 800257a:	bd80      	pop	{r7, pc}

0800257c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
 8002588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4a09      	ldr	r2, [pc, #36]	; (80025bc <TIM_ETR_SetConfig+0x40>)
 8002598:	4013      	ands	r3, r2
 800259a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	021a      	lsls	r2, r3, #8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	46c0      	nop			; (mov r8, r8)
 80025b6:	46bd      	mov	sp, r7
 80025b8:	b006      	add	sp, #24
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	ffff00ff 	.word	0xffff00ff

080025c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223c      	movs	r2, #60	; 0x3c
 80025ce:	5c9b      	ldrb	r3, [r3, r2]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d101      	bne.n	80025d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025d4:	2302      	movs	r3, #2
 80025d6:	e032      	b.n	800263e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	223c      	movs	r2, #60	; 0x3c
 80025dc:	2101      	movs	r1, #1
 80025de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	223d      	movs	r2, #61	; 0x3d
 80025e4:	2102      	movs	r1, #2
 80025e6:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685a      	ldr	r2, [r3, #4]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2170      	movs	r1, #112	; 0x70
 80025f4:	438a      	bics	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	438a      	bics	r2, r1
 8002618:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6899      	ldr	r1, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	430a      	orrs	r2, r1
 800262a:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	223d      	movs	r2, #61	; 0x3d
 8002630:	2101      	movs	r1, #1
 8002632:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	223c      	movs	r2, #60	; 0x3c
 8002638:	2100      	movs	r1, #0
 800263a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b002      	add	sp, #8
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800264e:	46c0      	nop			; (mov r8, r8)
 8002650:	46bd      	mov	sp, r7
 8002652:	b002      	add	sp, #8
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b082      	sub	sp, #8
 800265a:	af00      	add	r7, sp, #0
 800265c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e047      	b.n	800270a <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2269      	movs	r2, #105	; 0x69
 800267e:	5c9b      	ldrb	r3, [r3, r2]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d107      	bne.n	8002696 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2268      	movs	r2, #104	; 0x68
 800268a:	2100      	movs	r1, #0
 800268c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	0018      	movs	r0, r3
 8002692:	f001 fc7b 	bl	8003f8c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2269      	movs	r2, #105	; 0x69
 800269a:	2124      	movs	r1, #36	; 0x24
 800269c:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2101      	movs	r1, #1
 80026aa:	438a      	bics	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 f9d9 	bl	8002a68 <UART_SetConfig>
 80026b6:	0003      	movs	r3, r0
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e024      	b.n	800270a <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	0018      	movs	r0, r3
 80026cc:	f000 fb42 	bl	8002d54 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	490e      	ldr	r1, [pc, #56]	; (8002714 <HAL_UART_Init+0xac>)
 80026dc:	400a      	ands	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	212a      	movs	r1, #42	; 0x2a
 80026ec:	438a      	bics	r2, r1
 80026ee:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2101      	movs	r1, #1
 80026fc:	430a      	orrs	r2, r1
 80026fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	0018      	movs	r0, r3
 8002704:	f000 fbda 	bl	8002ebc <UART_CheckIdleState>
 8002708:	0003      	movs	r3, r0
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b002      	add	sp, #8
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	ffffb7ff 	.word	0xffffb7ff

08002718 <HAL_UART_Receive_IT>:
  *         (as received data will be handled using u16 pointer cast). Depending on compilation chain,
  *         use of specific alignment compilation directives or pragmas might be required to ensure proper alignment for pData.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	1dbb      	adds	r3, r7, #6
 8002724:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	226a      	movs	r2, #106	; 0x6a
 800272a:	5c9b      	ldrb	r3, [r3, r2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b20      	cmp	r3, #32
 8002730:	d000      	beq.n	8002734 <HAL_UART_Receive_IT+0x1c>
 8002732:	e073      	b.n	800281c <HAL_UART_Receive_IT+0x104>
  {
    if((pData == NULL ) || (Size == 0U))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d003      	beq.n	8002742 <HAL_UART_Receive_IT+0x2a>
 800273a:	1dbb      	adds	r3, r7, #6
 800273c:	881b      	ldrh	r3, [r3, #0]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_UART_Receive_IT+0x2e>
    {
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06b      	b.n	800281e <HAL_UART_Receive_IT+0x106>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input paramter 
       should be aligned on a u16 frontier, as data to be received from RDR will be 
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	015b      	lsls	r3, r3, #5
 800274e:	429a      	cmp	r2, r3
 8002750:	d109      	bne.n	8002766 <HAL_UART_Receive_IT+0x4e>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_UART_Receive_IT+0x4e>
    {
      if((((uint32_t)pData)&1U) != 0U)
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	2201      	movs	r2, #1
 800275e:	4013      	ands	r3, r2
 8002760:	d001      	beq.n	8002766 <HAL_UART_Receive_IT+0x4e>
      {
        return  HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e05b      	b.n	800281e <HAL_UART_Receive_IT+0x106>
      }
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2268      	movs	r2, #104	; 0x68
 800276a:	5c9b      	ldrb	r3, [r3, r2]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_UART_Receive_IT+0x5c>
 8002770:	2302      	movs	r3, #2
 8002772:	e054      	b.n	800281e <HAL_UART_Receive_IT+0x106>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2268      	movs	r2, #104	; 0x68
 8002778:	2101      	movs	r1, #1
 800277a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1dba      	adds	r2, r7, #6
 8002786:	2158      	movs	r1, #88	; 0x58
 8002788:	8812      	ldrh	r2, [r2, #0]
 800278a:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	1dba      	adds	r2, r7, #6
 8002790:	215a      	movs	r1, #90	; 0x5a
 8002792:	8812      	ldrh	r2, [r2, #0]
 8002794:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	015b      	lsls	r3, r3, #5
 800279e:	429a      	cmp	r2, r3
 80027a0:	d10d      	bne.n	80027be <HAL_UART_Receive_IT+0xa6>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d104      	bne.n	80027b4 <HAL_UART_Receive_IT+0x9c>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	225c      	movs	r2, #92	; 0x5c
 80027ae:	491e      	ldr	r1, [pc, #120]	; (8002828 <HAL_UART_Receive_IT+0x110>)
 80027b0:	5299      	strh	r1, [r3, r2]
 80027b2:	e015      	b.n	80027e0 <HAL_UART_Receive_IT+0xc8>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	225c      	movs	r2, #92	; 0x5c
 80027b8:	21ff      	movs	r1, #255	; 0xff
 80027ba:	5299      	strh	r1, [r3, r2]
 80027bc:	e010      	b.n	80027e0 <HAL_UART_Receive_IT+0xc8>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_UART_Receive_IT+0xc8>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d104      	bne.n	80027d8 <HAL_UART_Receive_IT+0xc0>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	225c      	movs	r2, #92	; 0x5c
 80027d2:	21ff      	movs	r1, #255	; 0xff
 80027d4:	5299      	strh	r1, [r3, r2]
 80027d6:	e003      	b.n	80027e0 <HAL_UART_Receive_IT+0xc8>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	225c      	movs	r2, #92	; 0x5c
 80027dc:	217f      	movs	r1, #127	; 0x7f
 80027de:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	226a      	movs	r2, #106	; 0x6a
 80027ea:	2122      	movs	r1, #34	; 0x22
 80027ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2268      	movs	r2, #104	; 0x68
 80027f2:	2100      	movs	r1, #0
 80027f4:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	2101      	movs	r1, #1
 8002802:	430a      	orrs	r2, r1
 8002804:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2190      	movs	r1, #144	; 0x90
 8002812:	0049      	lsls	r1, r1, #1
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002818:	2300      	movs	r3, #0
 800281a:	e000      	b.n	800281e <HAL_UART_Receive_IT+0x106>
  }
  else
  {
    return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
  }
}
 800281e:	0018      	movs	r0, r3
 8002820:	46bd      	mov	sp, r7
 8002822:	b004      	add	sp, #16
 8002824:	bd80      	pop	{r7, pc}
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	000001ff 	.word	0x000001ff

0800282c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b086      	sub	sp, #24
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	613b      	str	r3, [r7, #16]
  uint32_t cr3its;
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	220f      	movs	r2, #15
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  if (errorflags == RESET)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10c      	bne.n	800286c <HAL_UART_IRQHandler+0x40>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2220      	movs	r2, #32
 8002856:	4013      	ands	r3, r2
 8002858:	d008      	beq.n	800286c <HAL_UART_IRQHandler+0x40>
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2220      	movs	r2, #32
 800285e:	4013      	ands	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_UART_IRQHandler+0x40>
    {
      UART_Receive_IT(huart);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	0018      	movs	r0, r3
 8002866:	f000 fc6d 	bl	8003144 <UART_Receive_IT>
      return;
 800286a:	e0ef      	b.n	8002a4c <HAL_UART_IRQHandler+0x220>
    }
  }  

  /* If some errors occur */
  cr3its = READ_REG(huart->Instance->CR3);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	60bb      	str	r3, [r7, #8]
  if(   (errorflags != RESET)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d100      	bne.n	800287c <HAL_UART_IRQHandler+0x50>
 800287a:	e0af      	b.n	80029dc <HAL_UART_IRQHandler+0x1b0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2201      	movs	r2, #1
 8002880:	4013      	ands	r3, r2
 8002882:	d105      	bne.n	8002890 <HAL_UART_IRQHandler+0x64>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	2390      	movs	r3, #144	; 0x90
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d100      	bne.n	8002890 <HAL_UART_IRQHandler+0x64>
 800288e:	e0a5      	b.n	80029dc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2201      	movs	r2, #1
 8002894:	4013      	ands	r3, r2
 8002896:	d00e      	beq.n	80028b6 <HAL_UART_IRQHandler+0x8a>
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d009      	beq.n	80028b6 <HAL_UART_IRQHandler+0x8a>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2201      	movs	r2, #1
 80028a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ae:	2201      	movs	r2, #1
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2202      	movs	r2, #2
 80028ba:	4013      	ands	r3, r2
 80028bc:	d00d      	beq.n	80028da <HAL_UART_IRQHandler+0xae>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2201      	movs	r2, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	d009      	beq.n	80028da <HAL_UART_IRQHandler+0xae>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2202      	movs	r2, #2
 80028cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d2:	2204      	movs	r2, #4
 80028d4:	431a      	orrs	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2204      	movs	r2, #4
 80028de:	4013      	ands	r3, r2
 80028e0:	d00d      	beq.n	80028fe <HAL_UART_IRQHandler+0xd2>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2201      	movs	r2, #1
 80028e6:	4013      	ands	r3, r2
 80028e8:	d009      	beq.n	80028fe <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2204      	movs	r2, #4
 80028f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028f6:	2202      	movs	r2, #2
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    
    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2208      	movs	r2, #8
 8002902:	4013      	ands	r3, r2
 8002904:	d011      	beq.n	800292a <HAL_UART_IRQHandler+0xfe>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2220      	movs	r2, #32
 800290a:	4013      	ands	r3, r2
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800290c:	d103      	bne.n	8002916 <HAL_UART_IRQHandler+0xea>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	2201      	movs	r2, #1
 8002912:	4013      	ands	r3, r2
 8002914:	d009      	beq.n	800292a <HAL_UART_IRQHandler+0xfe>
    {
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2208      	movs	r2, #8
 800291c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002922:	2208      	movs	r2, #8
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d100      	bne.n	8002934 <HAL_UART_IRQHandler+0x108>
 8002932:	e08a      	b.n	8002a4a <HAL_UART_IRQHandler+0x21e>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2220      	movs	r2, #32
 8002938:	4013      	ands	r3, r2
 800293a:	d007      	beq.n	800294c <HAL_UART_IRQHandler+0x120>
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	2220      	movs	r2, #32
 8002940:	4013      	ands	r3, r2
 8002942:	d003      	beq.n	800294c <HAL_UART_IRQHandler+0x120>
      {
        UART_Receive_IT(huart);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	0018      	movs	r0, r3
 8002948:	f000 fbfc 	bl	8003144 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002950:	2208      	movs	r2, #8
 8002952:	4013      	ands	r3, r2
 8002954:	d105      	bne.n	8002962 <HAL_UART_IRQHandler+0x136>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2240      	movs	r2, #64	; 0x40
 800295e:	4013      	ands	r3, r2
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002960:	d032      	beq.n	80029c8 <HAL_UART_IRQHandler+0x19c>
      {  
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f000 fb47 	bl	8002ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	2240      	movs	r2, #64	; 0x40
 8002972:	4013      	ands	r3, r2
 8002974:	d023      	beq.n	80029be <HAL_UART_IRQHandler+0x192>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2140      	movs	r1, #64	; 0x40
 8002982:	438a      	bics	r2, r1
 8002984:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800298a:	2b00      	cmp	r3, #0
 800298c:	d012      	beq.n	80029b4 <HAL_UART_IRQHandler+0x188>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002992:	4a30      	ldr	r2, [pc, #192]	; (8002a54 <HAL_UART_IRQHandler+0x228>)
 8002994:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800299a:	0018      	movs	r0, r3
 800299c:	f7fd fd7e 	bl	800049c <HAL_DMA_Abort_IT>
 80029a0:	1e03      	subs	r3, r0, #0
 80029a2:	d019      	beq.n	80029d8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029ae:	0018      	movs	r0, r3
 80029b0:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b2:	e011      	b.n	80029d8 <HAL_UART_IRQHandler+0x1ac>
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0018      	movs	r0, r3
 80029b8:	f000 f84e 	bl	8002a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029bc:	e00c      	b.n	80029d8 <HAL_UART_IRQHandler+0x1ac>
          }
        }
        else
        {
          /* Call user error callback */
          HAL_UART_ErrorCallback(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	0018      	movs	r0, r3
 80029c2:	f000 f849 	bl	8002a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c6:	e007      	b.n	80029d8 <HAL_UART_IRQHandler+0x1ac>
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f844 	bl	8002a58 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	66da      	str	r2, [r3, #108]	; 0x6c
      }
    }
    return;
 80029d6:	e038      	b.n	8002a4a <HAL_UART_IRQHandler+0x21e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029d8:	46c0      	nop			; (mov r8, r8)
    return;
 80029da:	e036      	b.n	8002a4a <HAL_UART_IRQHandler+0x21e>

  } /* End if some error occurs */

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	2380      	movs	r3, #128	; 0x80
 80029e0:	035b      	lsls	r3, r3, #13
 80029e2:	4013      	ands	r3, r2
 80029e4:	d016      	beq.n	8002a14 <HAL_UART_IRQHandler+0x1e8>
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	2380      	movs	r3, #128	; 0x80
 80029ea:	03db      	lsls	r3, r3, #15
 80029ec:	4013      	ands	r3, r2
 80029ee:	d011      	beq.n	8002a14 <HAL_UART_IRQHandler+0x1e8>
  {
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	0352      	lsls	r2, r2, #13
 80029f8:	621a      	str	r2, [r3, #32]
    /* Set the UART state ready to be able to start again the process */
    huart->gState  = HAL_UART_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2269      	movs	r2, #105	; 0x69
 80029fe:	2120      	movs	r1, #32
 8002a00:	5499      	strb	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_READY;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	226a      	movs	r2, #106	; 0x6a
 8002a06:	2120      	movs	r1, #32
 8002a08:	5499      	strb	r1, [r3, r2]
    HAL_UARTEx_WakeupCallback(huart);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	f000 fc15 	bl	800323c <HAL_UARTEx_WakeupCallback>
    return;
 8002a12:	e01b      	b.n	8002a4c <HAL_UART_IRQHandler+0x220>
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	2280      	movs	r2, #128	; 0x80
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d008      	beq.n	8002a2e <HAL_UART_IRQHandler+0x202>
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	2280      	movs	r2, #128	; 0x80
 8002a20:	4013      	ands	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_UART_IRQHandler+0x202>
  {
    UART_Transmit_IT(huart);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	0018      	movs	r0, r3
 8002a28:	f000 fb1b 	bl	8003062 <UART_Transmit_IT>
    return;
 8002a2c:	e00e      	b.n	8002a4c <HAL_UART_IRQHandler+0x220>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	4013      	ands	r3, r2
 8002a34:	d00a      	beq.n	8002a4c <HAL_UART_IRQHandler+0x220>
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	2240      	movs	r2, #64	; 0x40
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d006      	beq.n	8002a4c <HAL_UART_IRQHandler+0x220>
  {
    UART_EndTransmit_IT(huart);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 fb65 	bl	8003110 <UART_EndTransmit_IT>
    return;
 8002a46:	46c0      	nop			; (mov r8, r8)
 8002a48:	e000      	b.n	8002a4c <HAL_UART_IRQHandler+0x220>
    return;
 8002a4a:	46c0      	nop			; (mov r8, r8)
  }

}
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b006      	add	sp, #24
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	08003035 	.word	0x08003035

08002a58 <HAL_UART_ErrorCallback>:
  * @brief UART error callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b087      	sub	sp, #28
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002a74:	2317      	movs	r3, #23
 8002a76:	18fb      	adds	r3, r7, r3
 8002a78:	2210      	movs	r2, #16
 8002a7a:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002a7c:	230a      	movs	r3, #10
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2200      	movs	r2, #0
 8002a82:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8002a84:	2314      	movs	r3, #20
 8002a86:	18fb      	adds	r3, r7, r3
 8002a88:	2200      	movs	r2, #0
 8002a8a:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a8c:	2313      	movs	r3, #19
 8002a8e:	18fb      	adds	r3, r7, r3
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4aa0      	ldr	r2, [pc, #640]	; (8002d34 <UART_SetConfig+0x2cc>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	4a9b      	ldr	r2, [pc, #620]	; (8002d38 <UART_SetConfig+0x2d0>)
 8002aca:	4013      	ands	r3, r2
 8002acc:	0019      	movs	r1, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	4a93      	ldr	r2, [pc, #588]	; (8002d3c <UART_SetConfig+0x2d4>)
 8002aee:	4013      	ands	r3, r2
 8002af0:	0019      	movs	r1, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a8f      	ldr	r2, [pc, #572]	; (8002d40 <UART_SetConfig+0x2d8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d125      	bne.n	8002b52 <UART_SetConfig+0xea>
 8002b06:	4b8f      	ldr	r3, [pc, #572]	; (8002d44 <UART_SetConfig+0x2dc>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d00f      	beq.n	8002b32 <UART_SetConfig+0xca>
 8002b12:	d304      	bcc.n	8002b1e <UART_SetConfig+0xb6>
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d011      	beq.n	8002b3c <UART_SetConfig+0xd4>
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d005      	beq.n	8002b28 <UART_SetConfig+0xc0>
 8002b1c:	e013      	b.n	8002b46 <UART_SetConfig+0xde>
 8002b1e:	2317      	movs	r3, #23
 8002b20:	18fb      	adds	r3, r7, r3
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	e022      	b.n	8002b6e <UART_SetConfig+0x106>
 8002b28:	2317      	movs	r3, #23
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	701a      	strb	r2, [r3, #0]
 8002b30:	e01d      	b.n	8002b6e <UART_SetConfig+0x106>
 8002b32:	2317      	movs	r3, #23
 8002b34:	18fb      	adds	r3, r7, r3
 8002b36:	2204      	movs	r2, #4
 8002b38:	701a      	strb	r2, [r3, #0]
 8002b3a:	e018      	b.n	8002b6e <UART_SetConfig+0x106>
 8002b3c:	2317      	movs	r3, #23
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2208      	movs	r2, #8
 8002b42:	701a      	strb	r2, [r3, #0]
 8002b44:	e013      	b.n	8002b6e <UART_SetConfig+0x106>
 8002b46:	2317      	movs	r3, #23
 8002b48:	18fb      	adds	r3, r7, r3
 8002b4a:	2210      	movs	r2, #16
 8002b4c:	701a      	strb	r2, [r3, #0]
 8002b4e:	46c0      	nop			; (mov r8, r8)
 8002b50:	e00d      	b.n	8002b6e <UART_SetConfig+0x106>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a7c      	ldr	r2, [pc, #496]	; (8002d48 <UART_SetConfig+0x2e0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d104      	bne.n	8002b66 <UART_SetConfig+0xfe>
 8002b5c:	2317      	movs	r3, #23
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
 8002b64:	e003      	b.n	8002b6e <UART_SetConfig+0x106>
 8002b66:	2317      	movs	r3, #23
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2210      	movs	r2, #16
 8002b6c:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69da      	ldr	r2, [r3, #28]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	021b      	lsls	r3, r3, #8
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d000      	beq.n	8002b7c <UART_SetConfig+0x114>
 8002b7a:	e077      	b.n	8002c6c <UART_SetConfig+0x204>
  {
    switch (clocksource)
 8002b7c:	2317      	movs	r3, #23
 8002b7e:	18fb      	adds	r3, r7, r3
 8002b80:	781b      	ldrb	r3, [r3, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d01c      	beq.n	8002bc0 <UART_SetConfig+0x158>
 8002b86:	dc02      	bgt.n	8002b8e <UART_SetConfig+0x126>
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <UART_SetConfig+0x130>
 8002b8c:	e04f      	b.n	8002c2e <UART_SetConfig+0x1c6>
 8002b8e:	2b04      	cmp	r3, #4
 8002b90:	d027      	beq.n	8002be2 <UART_SetConfig+0x17a>
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d039      	beq.n	8002c0a <UART_SetConfig+0x1a2>
 8002b96:	e04a      	b.n	8002c2e <UART_SetConfig+0x1c6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b98:	f7ff f896 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8002b9c:	0003      	movs	r3, r0
 8002b9e:	005a      	lsls	r2, r3, #1
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	085b      	lsrs	r3, r3, #1
 8002ba6:	18d2      	adds	r2, r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	0019      	movs	r1, r3
 8002bae:	0010      	movs	r0, r2
 8002bb0:	f7fd faaa 	bl	8000108 <__udivsi3>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	001a      	movs	r2, r3
 8002bb8:	2314      	movs	r3, #20
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	801a      	strh	r2, [r3, #0]
        break;
 8002bbe:	e03b      	b.n	8002c38 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	4a61      	ldr	r2, [pc, #388]	; (8002d4c <UART_SetConfig+0x2e4>)
 8002bc8:	189a      	adds	r2, r3, r2
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	0019      	movs	r1, r3
 8002bd0:	0010      	movs	r0, r2
 8002bd2:	f7fd fa99 	bl	8000108 <__udivsi3>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	001a      	movs	r2, r3
 8002bda:	2314      	movs	r3, #20
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	801a      	strh	r2, [r3, #0]
        break;
 8002be0:	e02a      	b.n	8002c38 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002be2:	f7ff f803 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002be6:	0003      	movs	r3, r0
 8002be8:	005a      	lsls	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	085b      	lsrs	r3, r3, #1
 8002bf0:	18d2      	adds	r2, r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	0010      	movs	r0, r2
 8002bfa:	f7fd fa85 	bl	8000108 <__udivsi3>
 8002bfe:	0003      	movs	r3, r0
 8002c00:	001a      	movs	r2, r3
 8002c02:	2314      	movs	r3, #20
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	801a      	strh	r2, [r3, #0]
        break;
 8002c08:	e016      	b.n	8002c38 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	085b      	lsrs	r3, r3, #1
 8002c10:	2280      	movs	r2, #128	; 0x80
 8002c12:	0252      	lsls	r2, r2, #9
 8002c14:	189a      	adds	r2, r3, r2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	0010      	movs	r0, r2
 8002c1e:	f7fd fa73 	bl	8000108 <__udivsi3>
 8002c22:	0003      	movs	r3, r0
 8002c24:	001a      	movs	r2, r3
 8002c26:	2314      	movs	r3, #20
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	801a      	strh	r2, [r3, #0]
        break;
 8002c2c:	e004      	b.n	8002c38 <UART_SetConfig+0x1d0>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c2e:	2313      	movs	r3, #19
 8002c30:	18fb      	adds	r3, r7, r3
 8002c32:	2201      	movs	r2, #1
 8002c34:	701a      	strb	r2, [r3, #0]
        break;
 8002c36:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002c38:	200a      	movs	r0, #10
 8002c3a:	183b      	adds	r3, r7, r0
 8002c3c:	2414      	movs	r4, #20
 8002c3e:	193a      	adds	r2, r7, r4
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	210f      	movs	r1, #15
 8002c44:	438a      	bics	r2, r1
 8002c46:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c48:	193b      	adds	r3, r7, r4
 8002c4a:	881b      	ldrh	r3, [r3, #0]
 8002c4c:	105b      	asrs	r3, r3, #1
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2207      	movs	r2, #7
 8002c52:	4013      	ands	r3, r2
 8002c54:	b299      	uxth	r1, r3
 8002c56:	183b      	adds	r3, r7, r0
 8002c58:	183a      	adds	r2, r7, r0
 8002c5a:	8812      	ldrh	r2, [r2, #0]
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	183a      	adds	r2, r7, r0
 8002c66:	8812      	ldrh	r2, [r2, #0]
 8002c68:	60da      	str	r2, [r3, #12]
 8002c6a:	e05b      	b.n	8002d24 <UART_SetConfig+0x2bc>
  }
  else
  {
    switch (clocksource)
 8002c6c:	2317      	movs	r3, #23
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d01b      	beq.n	8002cae <UART_SetConfig+0x246>
 8002c76:	dc02      	bgt.n	8002c7e <UART_SetConfig+0x216>
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <UART_SetConfig+0x220>
 8002c7c:	e04d      	b.n	8002d1a <UART_SetConfig+0x2b2>
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d026      	beq.n	8002cd0 <UART_SetConfig+0x268>
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d037      	beq.n	8002cf6 <UART_SetConfig+0x28e>
 8002c86:	e048      	b.n	8002d1a <UART_SetConfig+0x2b2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c88:	f7ff f81e 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	085b      	lsrs	r3, r3, #1
 8002c94:	18d2      	adds	r2, r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	0010      	movs	r0, r2
 8002c9e:	f7fd fa33 	bl	8000108 <__udivsi3>
 8002ca2:	0003      	movs	r3, r0
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60da      	str	r2, [r3, #12]
        break;
 8002cac:	e03a      	b.n	8002d24 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	085b      	lsrs	r3, r3, #1
 8002cb4:	4a26      	ldr	r2, [pc, #152]	; (8002d50 <UART_SetConfig+0x2e8>)
 8002cb6:	189a      	adds	r2, r3, r2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	f7fd fa22 	bl	8000108 <__udivsi3>
 8002cc4:	0003      	movs	r3, r0
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60da      	str	r2, [r3, #12]
        break;
 8002cce:	e029      	b.n	8002d24 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002cd0:	f7fe ff8c 	bl	8001bec <HAL_RCC_GetSysClockFreq>
 8002cd4:	0002      	movs	r2, r0
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	085b      	lsrs	r3, r3, #1
 8002cdc:	18d2      	adds	r2, r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	f7fd fa0f 	bl	8000108 <__udivsi3>
 8002cea:	0003      	movs	r3, r0
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	60da      	str	r2, [r3, #12]
        break;
 8002cf4:	e016      	b.n	8002d24 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	085b      	lsrs	r3, r3, #1
 8002cfc:	2280      	movs	r2, #128	; 0x80
 8002cfe:	0212      	lsls	r2, r2, #8
 8002d00:	189a      	adds	r2, r3, r2
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	0019      	movs	r1, r3
 8002d08:	0010      	movs	r0, r2
 8002d0a:	f7fd f9fd 	bl	8000108 <__udivsi3>
 8002d0e:	0003      	movs	r3, r0
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	60da      	str	r2, [r3, #12]
        break;
 8002d18:	e004      	b.n	8002d24 <UART_SetConfig+0x2bc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d1a:	2313      	movs	r3, #19
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2201      	movs	r2, #1
 8002d20:	701a      	strb	r2, [r3, #0]
        break;
 8002d22:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002d24:	2313      	movs	r3, #19
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	781b      	ldrb	r3, [r3, #0]

}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b007      	add	sp, #28
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	ffff69f3 	.word	0xffff69f3
 8002d38:	ffffcfff 	.word	0xffffcfff
 8002d3c:	fffff4ff 	.word	0xfffff4ff
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40004400 	.word	0x40004400
 8002d4c:	00f42400 	.word	0x00f42400
 8002d50:	007a1200 	.word	0x007a1200

08002d54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2201      	movs	r2, #1
 8002d62:	4013      	ands	r3, r2
 8002d64:	d00b      	beq.n	8002d7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	4a4a      	ldr	r2, [pc, #296]	; (8002e98 <UART_AdvFeatureConfig+0x144>)
 8002d6e:	4013      	ands	r3, r2
 8002d70:	0019      	movs	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	2202      	movs	r2, #2
 8002d84:	4013      	ands	r3, r2
 8002d86:	d00b      	beq.n	8002da0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4a43      	ldr	r2, [pc, #268]	; (8002e9c <UART_AdvFeatureConfig+0x148>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	0019      	movs	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2204      	movs	r2, #4
 8002da6:	4013      	ands	r3, r2
 8002da8:	d00b      	beq.n	8002dc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	4a3b      	ldr	r2, [pc, #236]	; (8002ea0 <UART_AdvFeatureConfig+0x14c>)
 8002db2:	4013      	ands	r3, r2
 8002db4:	0019      	movs	r1, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc6:	2208      	movs	r2, #8
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d00b      	beq.n	8002de4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a34      	ldr	r2, [pc, #208]	; (8002ea4 <UART_AdvFeatureConfig+0x150>)
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de8:	2210      	movs	r2, #16
 8002dea:	4013      	ands	r3, r2
 8002dec:	d00b      	beq.n	8002e06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	4a2c      	ldr	r2, [pc, #176]	; (8002ea8 <UART_AdvFeatureConfig+0x154>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	d00b      	beq.n	8002e28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4a25      	ldr	r2, [pc, #148]	; (8002eac <UART_AdvFeatureConfig+0x158>)
 8002e18:	4013      	ands	r3, r2
 8002e1a:	0019      	movs	r1, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2240      	movs	r2, #64	; 0x40
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d01d      	beq.n	8002e6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	4a1d      	ldr	r2, [pc, #116]	; (8002eb0 <UART_AdvFeatureConfig+0x15c>)
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	035b      	lsls	r3, r3, #13
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d10b      	bne.n	8002e6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a15      	ldr	r2, [pc, #84]	; (8002eb4 <UART_AdvFeatureConfig+0x160>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	4013      	ands	r3, r2
 8002e76:	d00b      	beq.n	8002e90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4a0e      	ldr	r2, [pc, #56]	; (8002eb8 <UART_AdvFeatureConfig+0x164>)
 8002e80:	4013      	ands	r3, r2
 8002e82:	0019      	movs	r1, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	605a      	str	r2, [r3, #4]
  }
}
 8002e90:	46c0      	nop			; (mov r8, r8)
 8002e92:	46bd      	mov	sp, r7
 8002e94:	b002      	add	sp, #8
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	fffdffff 	.word	0xfffdffff
 8002e9c:	fffeffff 	.word	0xfffeffff
 8002ea0:	fffbffff 	.word	0xfffbffff
 8002ea4:	ffff7fff 	.word	0xffff7fff
 8002ea8:	ffffefff 	.word	0xffffefff
 8002eac:	ffffdfff 	.word	0xffffdfff
 8002eb0:	ffefffff 	.word	0xffefffff
 8002eb4:	ff9fffff 	.word	0xff9fffff
 8002eb8:	fff7ffff 	.word	0xfff7ffff

08002ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002ece:	f7fd f9e3 	bl	8000298 <HAL_GetTick>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1f      	ldr	r2, [pc, #124]	; (8002f58 <UART_CheckIdleState+0x9c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d129      	bne.n	8002f34 <UART_CheckIdleState+0x78>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d10d      	bne.n	8002f0a <UART_CheckIdleState+0x4e>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	2380      	movs	r3, #128	; 0x80
 8002ef2:	0399      	lsls	r1, r3, #14
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4b19      	ldr	r3, [pc, #100]	; (8002f5c <UART_CheckIdleState+0xa0>)
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	0013      	movs	r3, r2
 8002efc:	2200      	movs	r2, #0
 8002efe:	f000 f82f 	bl	8002f60 <UART_WaitOnFlagUntilTimeout>
 8002f02:	1e03      	subs	r3, r0, #0
 8002f04:	d001      	beq.n	8002f0a <UART_CheckIdleState+0x4e>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e021      	b.n	8002f4e <UART_CheckIdleState+0x92>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2204      	movs	r2, #4
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d10d      	bne.n	8002f34 <UART_CheckIdleState+0x78>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	03d9      	lsls	r1, r3, #15
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	4b0e      	ldr	r3, [pc, #56]	; (8002f5c <UART_CheckIdleState+0xa0>)
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	0013      	movs	r3, r2
 8002f26:	2200      	movs	r2, #0
 8002f28:	f000 f81a 	bl	8002f60 <UART_WaitOnFlagUntilTimeout>
 8002f2c:	1e03      	subs	r3, r0, #0
 8002f2e:	d001      	beq.n	8002f34 <UART_CheckIdleState+0x78>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e00c      	b.n	8002f4e <UART_CheckIdleState+0x92>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2269      	movs	r2, #105	; 0x69
 8002f38:	2120      	movs	r1, #32
 8002f3a:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	226a      	movs	r2, #106	; 0x6a
 8002f40:	2120      	movs	r1, #32
 8002f42:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2268      	movs	r2, #104	; 0x68
 8002f48:	2100      	movs	r1, #0
 8002f4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	0018      	movs	r0, r3
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b004      	add	sp, #16
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	40013800 	.word	0x40013800
 8002f5c:	01ffffff 	.word	0x01ffffff

08002f60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	603b      	str	r3, [r7, #0]
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f70:	e02b      	b.n	8002fca <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	3301      	adds	r3, #1
 8002f76:	d028      	beq.n	8002fca <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d007      	beq.n	8002f8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f7e:	f7fd f98b 	bl	8000298 <HAL_GetTick>
 8002f82:	0002      	movs	r2, r0
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d21d      	bcs.n	8002fca <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4916      	ldr	r1, [pc, #88]	; (8002ff4 <UART_WaitOnFlagUntilTimeout+0x94>)
 8002f9a:	400a      	ands	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2101      	movs	r1, #1
 8002faa:	438a      	bics	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2269      	movs	r2, #105	; 0x69
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	226a      	movs	r2, #106	; 0x6a
 8002fba:	2120      	movs	r1, #32
 8002fbc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2268      	movs	r2, #104	; 0x68
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e00f      	b.n	8002fea <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69db      	ldr	r3, [r3, #28]
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	68ba      	ldr	r2, [r7, #8]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	425a      	negs	r2, r3
 8002fda:	4153      	adcs	r3, r2
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	001a      	movs	r2, r3
 8002fe0:	1dfb      	adds	r3, r7, #7
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d0c4      	beq.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	0018      	movs	r0, r3
 8002fec:	46bd      	mov	sp, r7
 8002fee:	b004      	add	sp, #16
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	46c0      	nop			; (mov r8, r8)
 8002ff4:	fffffe5f 	.word	0xfffffe5f

08002ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4909      	ldr	r1, [pc, #36]	; (8003030 <UART_EndRxTransfer+0x38>)
 800300c:	400a      	ands	r2, r1
 800300e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689a      	ldr	r2, [r3, #8]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2101      	movs	r1, #1
 800301c:	438a      	bics	r2, r1
 800301e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	226a      	movs	r2, #106	; 0x6a
 8003024:	2120      	movs	r1, #32
 8003026:	5499      	strb	r1, [r3, r2]
}
 8003028:	46c0      	nop			; (mov r8, r8)
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}
 8003030:	fffffedf 	.word	0xfffffedf

08003034 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	225a      	movs	r2, #90	; 0x5a
 8003046:	2100      	movs	r1, #0
 8003048:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2252      	movs	r2, #82	; 0x52
 800304e:	2100      	movs	r1, #0
 8003050:	5299      	strh	r1, [r3, r2]

  HAL_UART_ErrorCallback(huart);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff fcff 	bl	8002a58 <HAL_UART_ErrorCallback>
}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	46bd      	mov	sp, r7
 800305e:	b004      	add	sp, #16
 8003060:	bd80      	pop	{r7, pc}

08003062 <UART_Transmit_IT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2269      	movs	r2, #105	; 0x69
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b21      	cmp	r3, #33	; 0x21
 8003074:	d147      	bne.n	8003106 <UART_Transmit_IT+0xa4>
  {
    if(huart->TxXferCount == 0U)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2252      	movs	r2, #82	; 0x52
 800307a:	5a9b      	ldrh	r3, [r3, r2]
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d111      	bne.n	80030a6 <UART_Transmit_IT+0x44>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	438a      	bics	r2, r1
 8003090:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2140      	movs	r1, #64	; 0x40
 800309e:	430a      	orrs	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]

      return HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e030      	b.n	8003108 <UART_Transmit_IT+0xa6>
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	015b      	lsls	r3, r3, #5
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d114      	bne.n	80030dc <UART_Transmit_IT+0x7a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d110      	bne.n	80030dc <UART_Transmit_IT+0x7a>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	60fb      	str	r3, [r7, #12]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	881a      	ldrh	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	05d2      	lsls	r2, r2, #23
 80030ca:	0dd2      	lsrs	r2, r2, #23
 80030cc:	b292      	uxth	r2, r2
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d4:	1c9a      	adds	r2, r3, #2
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80030da:	e009      	b.n	80030f0 <UART_Transmit_IT+0x8e>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	1c59      	adds	r1, r3, #1
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	64d1      	str	r1, [r2, #76]	; 0x4c
 80030e6:	781a      	ldrb	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	b292      	uxth	r2, r2
 80030ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }
      huart->TxXferCount--;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2252      	movs	r2, #82	; 0x52
 80030f4:	5a9b      	ldrh	r3, [r3, r2]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	3b01      	subs	r3, #1
 80030fa:	b299      	uxth	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2252      	movs	r2, #82	; 0x52
 8003100:	5299      	strh	r1, [r3, r2]

      return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <UART_Transmit_IT+0xa6>
    }
  }
  else
  {
    return HAL_BUSY;
 8003106:	2302      	movs	r3, #2
  }
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b004      	add	sp, #16
 800310e:	bd80      	pop	{r7, pc}

08003110 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2140      	movs	r1, #64	; 0x40
 8003124:	438a      	bics	r2, r1
 8003126:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2269      	movs	r2, #105	; 0x69
 800312c:	2120      	movs	r1, #32
 800312e:	5499      	strb	r1, [r3, r2]

  HAL_UART_TxCpltCallback(huart);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	0018      	movs	r0, r3
 8003134:	f000 fff6 	bl	8004124 <HAL_UART_TxCpltCallback>

  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	0018      	movs	r0, r3
 800313c:	46bd      	mov	sp, r7
 800313e:	b002      	add	sp, #8
 8003140:	bd80      	pop	{r7, pc}
	...

08003144 <UART_Receive_IT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003144:	b590      	push	{r4, r7, lr}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
 800314c:	230e      	movs	r3, #14
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	215c      	movs	r1, #92	; 0x5c
 8003154:	5a52      	ldrh	r2, [r2, r1]
 8003156:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	226a      	movs	r2, #106	; 0x6a
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b22      	cmp	r3, #34	; 0x22
 8003162:	d15b      	bne.n	800321c <UART_Receive_IT+0xd8>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	230c      	movs	r3, #12
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800316e:	801a      	strh	r2, [r3, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	015b      	lsls	r3, r3, #5
 8003178:	429a      	cmp	r2, r3
 800317a:	d116      	bne.n	80031aa <UART_Receive_IT+0x66>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d112      	bne.n	80031aa <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003188:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 800318a:	230c      	movs	r3, #12
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	220e      	movs	r2, #14
 8003190:	18ba      	adds	r2, r7, r2
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	8812      	ldrh	r2, [r2, #0]
 8003196:	4013      	ands	r3, r2
 8003198:	b29a      	uxth	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr +=2U;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a2:	1c9a      	adds	r2, r3, #2
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	655a      	str	r2, [r3, #84]	; 0x54
 80031a8:	e010      	b.n	80031cc <UART_Receive_IT+0x88>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031aa:	230c      	movs	r3, #12
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	b2d9      	uxtb	r1, r3
 80031b2:	230e      	movs	r3, #14
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b2d8      	uxtb	r0, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	1c5c      	adds	r4, r3, #1
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6554      	str	r4, [r2, #84]	; 0x54
 80031c4:	0002      	movs	r2, r0
 80031c6:	400a      	ands	r2, r1
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	701a      	strb	r2, [r3, #0]
    }

    if(--huart->RxXferCount == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	225a      	movs	r2, #90	; 0x5a
 80031d0:	5a9b      	ldrh	r3, [r3, r2]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	215a      	movs	r1, #90	; 0x5a
 80031dc:	1c18      	adds	r0, r3, #0
 80031de:	5250      	strh	r0, [r2, r1]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d119      	bne.n	8003218 <UART_Receive_IT+0xd4>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4912      	ldr	r1, [pc, #72]	; (8003238 <UART_Receive_IT+0xf4>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2101      	movs	r1, #1
 8003200:	438a      	bics	r2, r1
 8003202:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	226a      	movs	r2, #106	; 0x6a
 8003208:	2120      	movs	r1, #32
 800320a:	5499      	strb	r1, [r3, r2]

      HAL_UART_RxCpltCallback(huart);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	0018      	movs	r0, r3
 8003210:	f000 ff90 	bl	8004134 <HAL_UART_RxCpltCallback>

      return HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	e00a      	b.n	800322e <UART_Receive_IT+0xea>
    }

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e008      	b.n	800322e <UART_Receive_IT+0xea>
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2108      	movs	r1, #8
 8003228:	430a      	orrs	r2, r1
 800322a:	619a      	str	r2, [r3, #24]

    return HAL_BUSY;
 800322c:	2302      	movs	r3, #2
  }
}
 800322e:	0018      	movs	r0, r3
 8003230:	46bd      	mov	sp, r7
 8003232:	b005      	add	sp, #20
 8003234:	bd90      	pop	{r4, r7, pc}
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	fffffedf 	.word	0xfffffedf

0800323c <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b002      	add	sp, #8
 800324a:	bd80      	pop	{r7, pc}

0800324c <RFID_getCode>:
char str1[512]={'H','e','l','l','o'};//"Hello";
uint8_t flag=0;

//Card Function

void RFID_getCode(uint8_t code){
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	0002      	movs	r2, r0
 8003254:	1dfb      	adds	r3, r7, #7
 8003256:	701a      	strb	r2, [r3, #0]

	RFID_CNT=RFID_TIMEOUT;
 8003258:	4bcc      	ldr	r3, [pc, #816]	; (800358c <RFID_getCode+0x340>)
 800325a:	22fa      	movs	r2, #250	; 0xfa
 800325c:	0092      	lsls	r2, r2, #2
 800325e:	601a      	str	r2, [r3, #0]

	if(flag == 0){
 8003260:	4bcb      	ldr	r3, [pc, #812]	; (8003590 <RFID_getCode+0x344>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d000      	beq.n	800326a <RFID_getCode+0x1e>
 8003268:	e1d5      	b.n	8003616 <RFID_getCode+0x3ca>

	if(code == RFID_RDM_630_HEADER){//02
 800326a:	1dfb      	adds	r3, r7, #7
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d113      	bne.n	800329a <RFID_getCode+0x4e>
		uart_counter = 0;
 8003272:	4bc8      	ldr	r3, [pc, #800]	; (8003594 <RFID_getCode+0x348>)
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
		receive = 0;
 8003278:	4bc7      	ldr	r3, [pc, #796]	; (8003598 <RFID_getCode+0x34c>)
 800327a:	2200      	movs	r2, #0
 800327c:	701a      	strb	r2, [r3, #0]
		_checksum = 0;
 800327e:	4bc7      	ldr	r3, [pc, #796]	; (800359c <RFID_getCode+0x350>)
 8003280:	2200      	movs	r2, #0
 8003282:	701a      	strb	r2, [r3, #0]
		rcv_checksum = 0;
 8003284:	4bc6      	ldr	r3, [pc, #792]	; (80035a0 <RFID_getCode+0x354>)
 8003286:	2200      	movs	r2, #0
 8003288:	701a      	strb	r2, [r3, #0]
		val = 0;
 800328a:	4bc6      	ldr	r3, [pc, #792]	; (80035a4 <RFID_getCode+0x358>)
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
		RFID_CNT = RFID_TIMEOUT;
 8003290:	4bbe      	ldr	r3, [pc, #760]	; (800358c <RFID_getCode+0x340>)
 8003292:	22fa      	movs	r2, #250	; 0xfa
 8003294:	0092      	lsls	r2, r2, #2
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e009      	b.n	80032ae <RFID_getCode+0x62>
		//Detect_card = 0;
	}

	else if(code == RFID_RDM_630_TAIL){//03
 800329a:	1dfb      	adds	r3, r7, #7
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d105      	bne.n	80032ae <RFID_getCode+0x62>
		receive =1;
 80032a2:	4bbd      	ldr	r3, [pc, #756]	; (8003598 <RFID_getCode+0x34c>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
		flag=1;
 80032a8:	4bb9      	ldr	r3, [pc, #740]	; (8003590 <RFID_getCode+0x344>)
 80032aa:	2201      	movs	r2, #1
 80032ac:	701a      	strb	r2, [r3, #0]
		/*RFID_CNT=RFID_TIMEOUT;*/
	}


	if(uart_counter >= RFID_MAX_Card_BUFFER_SIZE ){//get data
 80032ae:	4bb9      	ldr	r3, [pc, #740]	; (8003594 <RFID_getCode+0x348>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b0d      	cmp	r3, #13
 80032b4:	d902      	bls.n	80032bc <RFID_getCode+0x70>
		 uart_counter = 0;
 80032b6:	4bb7      	ldr	r3, [pc, #732]	; (8003594 <RFID_getCode+0x348>)
 80032b8:	2200      	movs	r2, #0
 80032ba:	701a      	strb	r2, [r3, #0]
	}

	RxBuffer[uart_counter++] = code;
 80032bc:	4bb5      	ldr	r3, [pc, #724]	; (8003594 <RFID_getCode+0x348>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	1c5a      	adds	r2, r3, #1
 80032c2:	b2d1      	uxtb	r1, r2
 80032c4:	4ab3      	ldr	r2, [pc, #716]	; (8003594 <RFID_getCode+0x348>)
 80032c6:	7011      	strb	r1, [r2, #0]
 80032c8:	0019      	movs	r1, r3
 80032ca:	4bb7      	ldr	r3, [pc, #732]	; (80035a8 <RFID_getCode+0x35c>)
 80032cc:	1dfa      	adds	r2, r7, #7
 80032ce:	7812      	ldrb	r2, [r2, #0]
 80032d0:	545a      	strb	r2, [r3, r1]

	if(receive == 1){
 80032d2:	4bb1      	ldr	r3, [pc, #708]	; (8003598 <RFID_getCode+0x34c>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d000      	beq.n	80032dc <RFID_getCode+0x90>
 80032da:	e19c      	b.n	8003616 <RFID_getCode+0x3ca>

		uint8_t H_VAL;
		uint8_t L_VAL;

		if(uart_counter == RFID_MAX_Card_BUFFER_SIZE){
 80032dc:	4bad      	ldr	r3, [pc, #692]	; (8003594 <RFID_getCode+0x348>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b0e      	cmp	r3, #14
 80032e2:	d000      	beq.n	80032e6 <RFID_getCode+0x9a>
 80032e4:	e194      	b.n	8003610 <RFID_getCode+0x3c4>

			for(uint8_t i=1 ;i<10+1 ;i=i+2){
 80032e6:	230d      	movs	r3, #13
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	e0c4      	b.n	800347a <RFID_getCode+0x22e>

				if ((RxBuffer[i]>47) && (RxBuffer[i]<58))
 80032f0:	230d      	movs	r3, #13
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	4aac      	ldr	r2, [pc, #688]	; (80035a8 <RFID_getCode+0x35c>)
 80032f8:	5cd3      	ldrb	r3, [r2, r3]
 80032fa:	2b2f      	cmp	r3, #47	; 0x2f
 80032fc:	d910      	bls.n	8003320 <RFID_getCode+0xd4>
 80032fe:	230d      	movs	r3, #13
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4aa8      	ldr	r2, [pc, #672]	; (80035a8 <RFID_getCode+0x35c>)
 8003306:	5cd3      	ldrb	r3, [r2, r3]
 8003308:	2b39      	cmp	r3, #57	; 0x39
 800330a:	d809      	bhi.n	8003320 <RFID_getCode+0xd4>
					H_VAL = (16*(RxBuffer[i]-48));
 800330c:	230d      	movs	r3, #13
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	4aa5      	ldr	r2, [pc, #660]	; (80035a8 <RFID_getCode+0x35c>)
 8003314:	5cd2      	ldrb	r2, [r2, r3]
 8003316:	230f      	movs	r3, #15
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	0112      	lsls	r2, r2, #4
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e03e      	b.n	800339e <RFID_getCode+0x152>
				else if ((RxBuffer[i]>64) && (RxBuffer[i]<90)){
 8003320:	230d      	movs	r3, #13
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	4aa0      	ldr	r2, [pc, #640]	; (80035a8 <RFID_getCode+0x35c>)
 8003328:	5cd3      	ldrb	r3, [r2, r3]
 800332a:	2b40      	cmp	r3, #64	; 0x40
 800332c:	d937      	bls.n	800339e <RFID_getCode+0x152>
 800332e:	230d      	movs	r3, #13
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	4a9c      	ldr	r2, [pc, #624]	; (80035a8 <RFID_getCode+0x35c>)
 8003336:	5cd3      	ldrb	r3, [r2, r3]
 8003338:	2b59      	cmp	r3, #89	; 0x59
 800333a:	d830      	bhi.n	800339e <RFID_getCode+0x152>
					switch(RxBuffer[i]){
 800333c:	230d      	movs	r3, #13
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	4a99      	ldr	r2, [pc, #612]	; (80035a8 <RFID_getCode+0x35c>)
 8003344:	5cd3      	ldrb	r3, [r2, r3]
 8003346:	3b41      	subs	r3, #65	; 0x41
 8003348:	2b05      	cmp	r3, #5
 800334a:	d822      	bhi.n	8003392 <RFID_getCode+0x146>
 800334c:	009a      	lsls	r2, r3, #2
 800334e:	4b97      	ldr	r3, [pc, #604]	; (80035ac <RFID_getCode+0x360>)
 8003350:	18d3      	adds	r3, r2, r3
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	469f      	mov	pc, r3
					case 65:
						H_VAL = 10;
 8003356:	230f      	movs	r3, #15
 8003358:	18fb      	adds	r3, r7, r3
 800335a:	220a      	movs	r2, #10
 800335c:	701a      	strb	r2, [r3, #0]
						break;
 800335e:	e018      	b.n	8003392 <RFID_getCode+0x146>
					case 66:
						H_VAL = 11;
 8003360:	230f      	movs	r3, #15
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	220b      	movs	r2, #11
 8003366:	701a      	strb	r2, [r3, #0]
						break;
 8003368:	e013      	b.n	8003392 <RFID_getCode+0x146>
					case 67:
						H_VAL = 12;
 800336a:	230f      	movs	r3, #15
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	220c      	movs	r2, #12
 8003370:	701a      	strb	r2, [r3, #0]
						break;
 8003372:	e00e      	b.n	8003392 <RFID_getCode+0x146>
					case 68:
						H_VAL = 13;
 8003374:	230f      	movs	r3, #15
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	220d      	movs	r2, #13
 800337a:	701a      	strb	r2, [r3, #0]
						break;
 800337c:	e009      	b.n	8003392 <RFID_getCode+0x146>
					case 69:
						H_VAL = 14;
 800337e:	230f      	movs	r3, #15
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	220e      	movs	r2, #14
 8003384:	701a      	strb	r2, [r3, #0]
						break;
 8003386:	e004      	b.n	8003392 <RFID_getCode+0x146>
					case 70:
						H_VAL = 15;
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	220f      	movs	r2, #15
 800338e:	701a      	strb	r2, [r3, #0]
						break;
 8003390:	46c0      	nop			; (mov r8, r8)
					}
					H_VAL *= 16;
 8003392:	220f      	movs	r2, #15
 8003394:	18bb      	adds	r3, r7, r2
 8003396:	18ba      	adds	r2, r7, r2
 8003398:	7812      	ldrb	r2, [r2, #0]
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	701a      	strb	r2, [r3, #0]
				}

				if ((RxBuffer[i+1]>47) && (RxBuffer[i+1]<58))
 800339e:	230d      	movs	r3, #13
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	3301      	adds	r3, #1
 80033a6:	4a80      	ldr	r2, [pc, #512]	; (80035a8 <RFID_getCode+0x35c>)
 80033a8:	5cd3      	ldrb	r3, [r2, r3]
 80033aa:	2b2f      	cmp	r3, #47	; 0x2f
 80033ac:	d912      	bls.n	80033d4 <RFID_getCode+0x188>
 80033ae:	230d      	movs	r3, #13
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	4a7c      	ldr	r2, [pc, #496]	; (80035a8 <RFID_getCode+0x35c>)
 80033b8:	5cd3      	ldrb	r3, [r2, r3]
 80033ba:	2b39      	cmp	r3, #57	; 0x39
 80033bc:	d80a      	bhi.n	80033d4 <RFID_getCode+0x188>
					L_VAL = RxBuffer[i+1]-48;
 80033be:	230d      	movs	r3, #13
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	4a78      	ldr	r2, [pc, #480]	; (80035a8 <RFID_getCode+0x35c>)
 80033c8:	5cd2      	ldrb	r2, [r2, r3]
 80033ca:	230e      	movs	r3, #14
 80033cc:	18fb      	adds	r3, r7, r3
 80033ce:	3a30      	subs	r2, #48	; 0x30
 80033d0:	701a      	strb	r2, [r3, #0]
 80033d2:	e03b      	b.n	800344c <RFID_getCode+0x200>
				else if ((RxBuffer[i+1]>64) && (RxBuffer[i+1]<90)){
 80033d4:	230d      	movs	r3, #13
 80033d6:	18fb      	adds	r3, r7, r3
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	4a72      	ldr	r2, [pc, #456]	; (80035a8 <RFID_getCode+0x35c>)
 80033de:	5cd3      	ldrb	r3, [r2, r3]
 80033e0:	2b40      	cmp	r3, #64	; 0x40
 80033e2:	d933      	bls.n	800344c <RFID_getCode+0x200>
 80033e4:	230d      	movs	r3, #13
 80033e6:	18fb      	adds	r3, r7, r3
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	3301      	adds	r3, #1
 80033ec:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <RFID_getCode+0x35c>)
 80033ee:	5cd3      	ldrb	r3, [r2, r3]
 80033f0:	2b59      	cmp	r3, #89	; 0x59
 80033f2:	d82b      	bhi.n	800344c <RFID_getCode+0x200>
					switch(RxBuffer[i+1]){
 80033f4:	230d      	movs	r3, #13
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a6a      	ldr	r2, [pc, #424]	; (80035a8 <RFID_getCode+0x35c>)
 80033fe:	5cd3      	ldrb	r3, [r2, r3]
 8003400:	3b41      	subs	r3, #65	; 0x41
 8003402:	2b05      	cmp	r3, #5
 8003404:	d822      	bhi.n	800344c <RFID_getCode+0x200>
 8003406:	009a      	lsls	r2, r3, #2
 8003408:	4b69      	ldr	r3, [pc, #420]	; (80035b0 <RFID_getCode+0x364>)
 800340a:	18d3      	adds	r3, r2, r3
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	469f      	mov	pc, r3
					case 65:
						L_VAL = 10;
 8003410:	230e      	movs	r3, #14
 8003412:	18fb      	adds	r3, r7, r3
 8003414:	220a      	movs	r2, #10
 8003416:	701a      	strb	r2, [r3, #0]
						break;
 8003418:	e018      	b.n	800344c <RFID_getCode+0x200>
					case 66:
						L_VAL = 11;
 800341a:	230e      	movs	r3, #14
 800341c:	18fb      	adds	r3, r7, r3
 800341e:	220b      	movs	r2, #11
 8003420:	701a      	strb	r2, [r3, #0]
						break;
 8003422:	e013      	b.n	800344c <RFID_getCode+0x200>
					case 67:
						L_VAL = 12;
 8003424:	230e      	movs	r3, #14
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	220c      	movs	r2, #12
 800342a:	701a      	strb	r2, [r3, #0]
						break;
 800342c:	e00e      	b.n	800344c <RFID_getCode+0x200>
					case 68:
						L_VAL = 13;
 800342e:	230e      	movs	r3, #14
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	220d      	movs	r2, #13
 8003434:	701a      	strb	r2, [r3, #0]
						break;
 8003436:	e009      	b.n	800344c <RFID_getCode+0x200>
					case 69:
						L_VAL = 14;
 8003438:	230e      	movs	r3, #14
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	220e      	movs	r2, #14
 800343e:	701a      	strb	r2, [r3, #0]
						break;
 8003440:	e004      	b.n	800344c <RFID_getCode+0x200>
					case 70:
						L_VAL = 15;
 8003442:	230e      	movs	r3, #14
 8003444:	18fb      	adds	r3, r7, r3
 8003446:	220f      	movs	r2, #15
 8003448:	701a      	strb	r2, [r3, #0]
						break;
 800344a:	46c0      	nop			; (mov r8, r8)
					}
				}

				val ^=  (H_VAL + L_VAL) ;//3
 800344c:	230f      	movs	r3, #15
 800344e:	18fa      	adds	r2, r7, r3
 8003450:	230e      	movs	r3, #14
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	7812      	ldrb	r2, [r2, #0]
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	18d3      	adds	r3, r2, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	b25a      	sxtb	r2, r3
 800345e:	4b51      	ldr	r3, [pc, #324]	; (80035a4 <RFID_getCode+0x358>)
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b25b      	sxtb	r3, r3
 8003464:	4053      	eors	r3, r2
 8003466:	b25b      	sxtb	r3, r3
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b4e      	ldr	r3, [pc, #312]	; (80035a4 <RFID_getCode+0x358>)
 800346c:	701a      	strb	r2, [r3, #0]
			for(uint8_t i=1 ;i<10+1 ;i=i+2){
 800346e:	220d      	movs	r2, #13
 8003470:	18bb      	adds	r3, r7, r2
 8003472:	18ba      	adds	r2, r7, r2
 8003474:	7812      	ldrb	r2, [r2, #0]
 8003476:	3202      	adds	r2, #2
 8003478:	701a      	strb	r2, [r3, #0]
 800347a:	230d      	movs	r3, #13
 800347c:	18fb      	adds	r3, r7, r3
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b0a      	cmp	r3, #10
 8003482:	d800      	bhi.n	8003486 <RFID_getCode+0x23a>
 8003484:	e734      	b.n	80032f0 <RFID_getCode+0xa4>
			}
			_checksum = val;
 8003486:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <RFID_getCode+0x358>)
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	4b44      	ldr	r3, [pc, #272]	; (800359c <RFID_getCode+0x350>)
 800348c:	701a      	strb	r2, [r3, #0]



			//for (uint8_t i=11 ;i<13 ;i+=2){
			if ((RxBuffer[11]>47) && (RxBuffer[11]<58))
 800348e:	4b46      	ldr	r3, [pc, #280]	; (80035a8 <RFID_getCode+0x35c>)
 8003490:	7adb      	ldrb	r3, [r3, #11]
 8003492:	2b2f      	cmp	r3, #47	; 0x2f
 8003494:	d90a      	bls.n	80034ac <RFID_getCode+0x260>
 8003496:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <RFID_getCode+0x35c>)
 8003498:	7adb      	ldrb	r3, [r3, #11]
 800349a:	2b39      	cmp	r3, #57	; 0x39
 800349c:	d806      	bhi.n	80034ac <RFID_getCode+0x260>
				H_VAL = (16*(RxBuffer[11]-48));
 800349e:	4b42      	ldr	r3, [pc, #264]	; (80035a8 <RFID_getCode+0x35c>)
 80034a0:	7ada      	ldrb	r2, [r3, #11]
 80034a2:	230f      	movs	r3, #15
 80034a4:	18fb      	adds	r3, r7, r3
 80034a6:	0112      	lsls	r2, r2, #4
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e035      	b.n	8003518 <RFID_getCode+0x2cc>
			else if ((RxBuffer[11]>64) && (RxBuffer[11]<90)){
 80034ac:	4b3e      	ldr	r3, [pc, #248]	; (80035a8 <RFID_getCode+0x35c>)
 80034ae:	7adb      	ldrb	r3, [r3, #11]
 80034b0:	2b40      	cmp	r3, #64	; 0x40
 80034b2:	d931      	bls.n	8003518 <RFID_getCode+0x2cc>
 80034b4:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <RFID_getCode+0x35c>)
 80034b6:	7adb      	ldrb	r3, [r3, #11]
 80034b8:	2b59      	cmp	r3, #89	; 0x59
 80034ba:	d82d      	bhi.n	8003518 <RFID_getCode+0x2cc>
				switch(RxBuffer[11]){
 80034bc:	4b3a      	ldr	r3, [pc, #232]	; (80035a8 <RFID_getCode+0x35c>)
 80034be:	7adb      	ldrb	r3, [r3, #11]
 80034c0:	3b41      	subs	r3, #65	; 0x41
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d822      	bhi.n	800350c <RFID_getCode+0x2c0>
 80034c6:	009a      	lsls	r2, r3, #2
 80034c8:	4b3a      	ldr	r3, [pc, #232]	; (80035b4 <RFID_getCode+0x368>)
 80034ca:	18d3      	adds	r3, r2, r3
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	469f      	mov	pc, r3
				case 65:
					H_VAL = 10;
 80034d0:	230f      	movs	r3, #15
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	220a      	movs	r2, #10
 80034d6:	701a      	strb	r2, [r3, #0]
					break;
 80034d8:	e018      	b.n	800350c <RFID_getCode+0x2c0>
				case 66:
					H_VAL = 11;
 80034da:	230f      	movs	r3, #15
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	220b      	movs	r2, #11
 80034e0:	701a      	strb	r2, [r3, #0]
					break;
 80034e2:	e013      	b.n	800350c <RFID_getCode+0x2c0>
				case 67:
					H_VAL = 12;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	220c      	movs	r2, #12
 80034ea:	701a      	strb	r2, [r3, #0]
					break;
 80034ec:	e00e      	b.n	800350c <RFID_getCode+0x2c0>
				case 68:
					H_VAL = 13;
 80034ee:	230f      	movs	r3, #15
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	220d      	movs	r2, #13
 80034f4:	701a      	strb	r2, [r3, #0]
					break;
 80034f6:	e009      	b.n	800350c <RFID_getCode+0x2c0>
				case 69:
					H_VAL = 14;
 80034f8:	230f      	movs	r3, #15
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	220e      	movs	r2, #14
 80034fe:	701a      	strb	r2, [r3, #0]
					break;
 8003500:	e004      	b.n	800350c <RFID_getCode+0x2c0>
				case 70:
					H_VAL = 15;
 8003502:	230f      	movs	r3, #15
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	220f      	movs	r2, #15
 8003508:	701a      	strb	r2, [r3, #0]
					break;
 800350a:	46c0      	nop			; (mov r8, r8)
				}
				H_VAL *= 16;
 800350c:	220f      	movs	r2, #15
 800350e:	18bb      	adds	r3, r7, r2
 8003510:	18ba      	adds	r2, r7, r2
 8003512:	7812      	ldrb	r2, [r2, #0]
 8003514:	0112      	lsls	r2, r2, #4
 8003516:	701a      	strb	r2, [r3, #0]
			}

			if ((RxBuffer[12]>47) && (RxBuffer[12]<58))
 8003518:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <RFID_getCode+0x35c>)
 800351a:	7b1b      	ldrb	r3, [r3, #12]
 800351c:	2b2f      	cmp	r3, #47	; 0x2f
 800351e:	d90a      	bls.n	8003536 <RFID_getCode+0x2ea>
 8003520:	4b21      	ldr	r3, [pc, #132]	; (80035a8 <RFID_getCode+0x35c>)
 8003522:	7b1b      	ldrb	r3, [r3, #12]
 8003524:	2b39      	cmp	r3, #57	; 0x39
 8003526:	d806      	bhi.n	8003536 <RFID_getCode+0x2ea>
				L_VAL = RxBuffer[12]-48;
 8003528:	4b1f      	ldr	r3, [pc, #124]	; (80035a8 <RFID_getCode+0x35c>)
 800352a:	7b1a      	ldrb	r2, [r3, #12]
 800352c:	230e      	movs	r3, #14
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	3a30      	subs	r2, #48	; 0x30
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e047      	b.n	80035c6 <RFID_getCode+0x37a>
			else if ((RxBuffer[12]>64) && (RxBuffer[12]<90)){
 8003536:	4b1c      	ldr	r3, [pc, #112]	; (80035a8 <RFID_getCode+0x35c>)
 8003538:	7b1b      	ldrb	r3, [r3, #12]
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d943      	bls.n	80035c6 <RFID_getCode+0x37a>
 800353e:	4b1a      	ldr	r3, [pc, #104]	; (80035a8 <RFID_getCode+0x35c>)
 8003540:	7b1b      	ldrb	r3, [r3, #12]
 8003542:	2b59      	cmp	r3, #89	; 0x59
 8003544:	d83f      	bhi.n	80035c6 <RFID_getCode+0x37a>
				switch(RxBuffer[12]){
 8003546:	4b18      	ldr	r3, [pc, #96]	; (80035a8 <RFID_getCode+0x35c>)
 8003548:	7b1b      	ldrb	r3, [r3, #12]
 800354a:	3b41      	subs	r3, #65	; 0x41
 800354c:	2b05      	cmp	r3, #5
 800354e:	d83a      	bhi.n	80035c6 <RFID_getCode+0x37a>
 8003550:	009a      	lsls	r2, r3, #2
 8003552:	4b19      	ldr	r3, [pc, #100]	; (80035b8 <RFID_getCode+0x36c>)
 8003554:	18d3      	adds	r3, r2, r3
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	469f      	mov	pc, r3
				case 65:
					L_VAL = 10;
 800355a:	230e      	movs	r3, #14
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	220a      	movs	r2, #10
 8003560:	701a      	strb	r2, [r3, #0]
					break;
 8003562:	e030      	b.n	80035c6 <RFID_getCode+0x37a>
				case 66:
					L_VAL = 11;
 8003564:	230e      	movs	r3, #14
 8003566:	18fb      	adds	r3, r7, r3
 8003568:	220b      	movs	r2, #11
 800356a:	701a      	strb	r2, [r3, #0]
					break;
 800356c:	e02b      	b.n	80035c6 <RFID_getCode+0x37a>
				case 67:
					L_VAL = 12;
 800356e:	230e      	movs	r3, #14
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	220c      	movs	r2, #12
 8003574:	701a      	strb	r2, [r3, #0]
					break;
 8003576:	e026      	b.n	80035c6 <RFID_getCode+0x37a>
				case 68:
					L_VAL = 13;
 8003578:	230e      	movs	r3, #14
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	220d      	movs	r2, #13
 800357e:	701a      	strb	r2, [r3, #0]
					break;
 8003580:	e021      	b.n	80035c6 <RFID_getCode+0x37a>
				case 69:
					L_VAL = 14;
 8003582:	230e      	movs	r3, #14
 8003584:	18fb      	adds	r3, r7, r3
 8003586:	220e      	movs	r2, #14
 8003588:	701a      	strb	r2, [r3, #0]
					break;
 800358a:	e01c      	b.n	80035c6 <RFID_getCode+0x37a>
 800358c:	20000038 	.word	0x20000038
 8003590:	2000003c 	.word	0x2000003c
 8003594:	20000032 	.word	0x20000032
 8003598:	20000068 	.word	0x20000068
 800359c:	20000035 	.word	0x20000035
 80035a0:	20000034 	.word	0x20000034
 80035a4:	2000004e 	.word	0x2000004e
 80035a8:	20000054 	.word	0x20000054
 80035ac:	080042e8 	.word	0x080042e8
 80035b0:	08004300 	.word	0x08004300
 80035b4:	08004318 	.word	0x08004318
 80035b8:	08004330 	.word	0x08004330
				case 70:
					L_VAL = 15;
 80035bc:	230e      	movs	r3, #14
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	220f      	movs	r2, #15
 80035c2:	701a      	strb	r2, [r3, #0]
					break;
 80035c4:	46c0      	nop			; (mov r8, r8)
				}
			}

			rcv_checksum = (H_VAL + L_VAL) ;
 80035c6:	230f      	movs	r3, #15
 80035c8:	18fa      	adds	r2, r7, r3
 80035ca:	230e      	movs	r3, #14
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	18d3      	adds	r3, r2, r3
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <RFID_getCode+0x3d4>)
 80035d8:	701a      	strb	r2, [r3, #0]




			if(_checksum == rcv_checksum){
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <RFID_getCode+0x3d8>)
 80035dc:	781a      	ldrb	r2, [r3, #0]
 80035de:	4b10      	ldr	r3, [pc, #64]	; (8003620 <RFID_getCode+0x3d4>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d114      	bne.n	8003610 <RFID_getCode+0x3c4>
				Detect_card = 1;
 80035e6:	4b10      	ldr	r3, [pc, #64]	; (8003628 <RFID_getCode+0x3dc>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	701a      	strb	r2, [r3, #0]

				for(int i=0;i<10;i++)
 80035ec:	2300      	movs	r3, #0
 80035ee:	60bb      	str	r3, [r7, #8]
 80035f0:	e00b      	b.n	800360a <RFID_getCode+0x3be>
					card_datacode[i]=RxBuffer[i+1];
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	3301      	adds	r3, #1
 80035f6:	4a0d      	ldr	r2, [pc, #52]	; (800362c <RFID_getCode+0x3e0>)
 80035f8:	5cd1      	ldrb	r1, [r2, r3]
 80035fa:	4a0d      	ldr	r2, [pc, #52]	; (8003630 <RFID_getCode+0x3e4>)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	18d3      	adds	r3, r2, r3
 8003600:	1c0a      	adds	r2, r1, #0
 8003602:	701a      	strb	r2, [r3, #0]
				for(int i=0;i<10;i++)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	3301      	adds	r3, #1
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b09      	cmp	r3, #9
 800360e:	ddf0      	ble.n	80035f2 <RFID_getCode+0x3a6>
			}
		}
		receive=0;
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <RFID_getCode+0x3e8>)
 8003612:	2200      	movs	r2, #0
 8003614:	701a      	strb	r2, [r3, #0]
	}
}
}
 8003616:	46c0      	nop			; (mov r8, r8)
 8003618:	46bd      	mov	sp, r7
 800361a:	b004      	add	sp, #16
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	20000034 	.word	0x20000034
 8003624:	20000035 	.word	0x20000035
 8003628:	20000033 	.word	0x20000033
 800362c:	20000054 	.word	0x20000054
 8003630:	2000006c 	.word	0x2000006c
 8003634:	20000068 	.word	0x20000068

08003638 <Get_FREE_ADD>:
/**
  * @brief  None
  * @param  None
  * @retval None
  */
int Get_FREE_ADD(void){
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0

	uint8_t IS_free;

	uint8_t card_data[10];

	for(int n=0 ;n < RFID_Max_user ; n++){
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e02d      	b.n	80036a0 <Get_FREE_ADD+0x68>
		Mem_Read(RFID_USER_CARD_START(n),card_data,RFID_MAX_Byte_Card);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	b29b      	uxth	r3, r3
 8003648:	220c      	movs	r2, #12
 800364a:	4353      	muls	r3, r2
 800364c:	b29b      	uxth	r3, r3
 800364e:	3340      	adds	r3, #64	; 0x40
 8003650:	b29b      	uxth	r3, r3
 8003652:	0039      	movs	r1, r7
 8003654:	220a      	movs	r2, #10
 8003656:	0018      	movs	r0, r3
 8003658:	f000 f96c 	bl	8003934 <Mem_Read>
		IS_free = 1;
 800365c:	2317      	movs	r3, #23
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2201      	movs	r2, #1
 8003662:	701a      	strb	r2, [r3, #0]
		for(int i=0; i < RFID_MAX_Byte_Card ;i++){
 8003664:	2300      	movs	r3, #0
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	e00d      	b.n	8003686 <Get_FREE_ADD+0x4e>

			if(card_data[i] != 0xff){
 800366a:	003a      	movs	r2, r7
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	18d3      	adds	r3, r2, r3
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2bff      	cmp	r3, #255	; 0xff
 8003674:	d004      	beq.n	8003680 <Get_FREE_ADD+0x48>
				IS_free = 0;
 8003676:	2317      	movs	r3, #23
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
				break;
 800367e:	e005      	b.n	800368c <Get_FREE_ADD+0x54>
		for(int i=0; i < RFID_MAX_Byte_Card ;i++){
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3301      	adds	r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b09      	cmp	r3, #9
 800368a:	ddee      	ble.n	800366a <Get_FREE_ADD+0x32>
			}
		}
		if(IS_free){
 800368c:	2317      	movs	r3, #23
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <Get_FREE_ADD+0x62>
			return n;
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	e007      	b.n	80036aa <Get_FREE_ADD+0x72>
	for(int n=0 ;n < RFID_Max_user ; n++){
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	3301      	adds	r3, #1
 800369e:	613b      	str	r3, [r7, #16]
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	2bfe      	cmp	r3, #254	; 0xfe
 80036a4:	ddce      	ble.n	8003644 <Get_FREE_ADD+0xc>
		}
	}
	return -1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	425b      	negs	r3, r3
}
 80036aa:	0018      	movs	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	b006      	add	sp, #24
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <New_Card>:
/**
  * @brief  None
  * @param  None
  * @retval None
  */
uint8_t  New_Card(void){
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0

	xxxx = Get_FREE_ADD();//Update_USER_Card_nn();
 80036b8:	f7ff ffbe 	bl	8003638 <Get_FREE_ADD>
 80036bc:	0003      	movs	r3, r0
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <New_Card+0x40>)
 80036c2:	701a      	strb	r2, [r3, #0]

	HAL_Delay(5);
 80036c4:	2005      	movs	r0, #5
 80036c6:	f7fc fdf1 	bl	80002ac <HAL_Delay>

	Mem_Write(RFID_USER_CARD_START(xxxx),card_datacode,RFID_MAX_Byte_Card);
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <New_Card+0x40>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	220c      	movs	r2, #12
 80036d2:	4353      	muls	r3, r2
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	3340      	adds	r3, #64	; 0x40
 80036d8:	b29b      	uxth	r3, r3
 80036da:	4907      	ldr	r1, [pc, #28]	; (80036f8 <New_Card+0x44>)
 80036dc:	220a      	movs	r2, #10
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 f902 	bl	80038e8 <Mem_Write>

	HAL_Delay(5);
 80036e4:	2005      	movs	r0, #5
 80036e6:	f7fc fde1 	bl	80002ac <HAL_Delay>
	//  for(uint8_t i=0 ;i < RFID_MAX_Byte_Card ;i++)
	//    card_code[ncard][i]=RxBuffer[i+1];

	return xxxx;
 80036ea:	4b02      	ldr	r3, [pc, #8]	; (80036f4 <New_Card+0x40>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
}
 80036ee:	0018      	movs	r0, r3
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	20000052 	.word	0x20000052
 80036f8:	2000006c 	.word	0x2000006c

080036fc <Card_Authentication>:
/**
  * @brief  None
  * @param  None
  * @retval None
  */
bool Card_Authentication(uint8_t *USERnn){
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b088      	sub	sp, #32
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  
  uint8_t IS_user ;

  uint8_t card_data[10];

  uint8_t users = 0;
 8003704:	2113      	movs	r1, #19
 8003706:	187b      	adds	r3, r7, r1
 8003708:	2200      	movs	r2, #0
 800370a:	701a      	strb	r2, [r3, #0]
  
  ncard = RFID_Max_user;//Get_USER_Card_nn();
 800370c:	4b2f      	ldr	r3, [pc, #188]	; (80037cc <Card_Authentication+0xd0>)
 800370e:	22ff      	movs	r2, #255	; 0xff
 8003710:	601a      	str	r2, [r3, #0]

  users = ncard;
 8003712:	4b2e      	ldr	r3, [pc, #184]	; (80037cc <Card_Authentication+0xd0>)
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	187b      	adds	r3, r7, r1
 8003718:	701a      	strb	r2, [r3, #0]

  for(int n=0 ;n < users ; n++){
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	e03d      	b.n	800379c <Card_Authentication+0xa0>
    USERnn[0] = 1;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
    IS_user = 1;
 8003726:	231f      	movs	r3, #31
 8003728:	18fb      	adds	r3, r7, r3
 800372a:	2201      	movs	r2, #1
 800372c:	701a      	strb	r2, [r3, #0]
    Mem_Read(RFID_USER_CARD_START(n),card_data,RFID_MAX_Byte_Card);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	b29b      	uxth	r3, r3
 8003732:	220c      	movs	r2, #12
 8003734:	4353      	muls	r3, r2
 8003736:	b29b      	uxth	r3, r3
 8003738:	3340      	adds	r3, #64	; 0x40
 800373a:	b29b      	uxth	r3, r3
 800373c:	2208      	movs	r2, #8
 800373e:	18b9      	adds	r1, r7, r2
 8003740:	220a      	movs	r2, #10
 8003742:	0018      	movs	r0, r3
 8003744:	f000 f8f6 	bl	8003934 <Mem_Read>

    for(int i=0; i < RFID_MAX_Byte_Card ;i++){
 8003748:	2300      	movs	r3, #0
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e012      	b.n	8003774 <Card_Authentication+0x78>

      if(card_data[i] != card_datacode[i]){
 800374e:	2308      	movs	r3, #8
 8003750:	18fa      	adds	r2, r7, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	18d3      	adds	r3, r2, r3
 8003756:	781a      	ldrb	r2, [r3, #0]
 8003758:	491d      	ldr	r1, [pc, #116]	; (80037d0 <Card_Authentication+0xd4>)
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	18cb      	adds	r3, r1, r3
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d004      	beq.n	800376e <Card_Authentication+0x72>
        IS_user = 0;
 8003764:	231f      	movs	r3, #31
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	2200      	movs	r2, #0
 800376a:	701a      	strb	r2, [r3, #0]
        break;
 800376c:	e005      	b.n	800377a <Card_Authentication+0x7e>
    for(int i=0; i < RFID_MAX_Byte_Card ;i++){
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	3301      	adds	r3, #1
 8003772:	617b      	str	r3, [r7, #20]
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	2b09      	cmp	r3, #9
 8003778:	dde9      	ble.n	800374e <Card_Authentication+0x52>
      }
    }

    if(IS_user){
 800377a:	231f      	movs	r3, #31
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <Card_Authentication+0x9a>
      USERnn[0] = n;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	701a      	strb	r2, [r3, #0]
      lock_flag = 0;
 800378c:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <Card_Authentication+0xd8>)
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
      return true;
 8003792:	2301      	movs	r3, #1
 8003794:	e016      	b.n	80037c4 <Card_Authentication+0xc8>
  for(int n=0 ;n < users ; n++){
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	3301      	adds	r3, #1
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	2313      	movs	r3, #19
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	dbbb      	blt.n	8003720 <Card_Authentication+0x24>
    }
  }
  if(++unsuccess_login_num>_unsuccess_login_num){
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <Card_Authentication+0xdc>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	3301      	adds	r3, #1
 80037ae:	b2da      	uxtb	r2, r3
 80037b0:	4b09      	ldr	r3, [pc, #36]	; (80037d8 <Card_Authentication+0xdc>)
 80037b2:	701a      	strb	r2, [r3, #0]
 80037b4:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <Card_Authentication+0xdc>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d902      	bls.n	80037c2 <Card_Authentication+0xc6>
	  lock_flag=1;
 80037bc:	4b05      	ldr	r3, [pc, #20]	; (80037d4 <Card_Authentication+0xd8>)
 80037be:	2201      	movs	r2, #1
 80037c0:	701a      	strb	r2, [r3, #0]
  }

  return false;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	0018      	movs	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	b008      	add	sp, #32
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	20000000 	.word	0x20000000
 80037d0:	2000006c 	.word	0x2000006c
 80037d4:	20000030 	.word	0x20000030
 80037d8:	20000031 	.word	0x20000031

080037dc <Delete_AllCard>:
/**
  * @brief  None
  * @param  None
  * @retval None
  */
void Delete_AllCard(void){
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0

  //uint8_t reset = 0;

  for(uint16_t j=0; j<RFID_MAX_Byte_Card ;j++){
 80037e2:	1dbb      	adds	r3, r7, #6
 80037e4:	2200      	movs	r2, #0
 80037e6:	801a      	strh	r2, [r3, #0]
 80037e8:	e010      	b.n	800380c <Delete_AllCard+0x30>
    
    Mem_Write(RFID_USER_CARD_START(j),clr,RFID_MAX_Byte_Card);
 80037ea:	1dbb      	adds	r3, r7, #6
 80037ec:	881b      	ldrh	r3, [r3, #0]
 80037ee:	220c      	movs	r2, #12
 80037f0:	4353      	muls	r3, r2
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3340      	adds	r3, #64	; 0x40
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	490a      	ldr	r1, [pc, #40]	; (8003824 <Delete_AllCard+0x48>)
 80037fa:	220a      	movs	r2, #10
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f873 	bl	80038e8 <Mem_Write>
  for(uint16_t j=0; j<RFID_MAX_Byte_Card ;j++){
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	881a      	ldrh	r2, [r3, #0]
 8003806:	1dbb      	adds	r3, r7, #6
 8003808:	3201      	adds	r2, #1
 800380a:	801a      	strh	r2, [r3, #0]
 800380c:	1dbb      	adds	r3, r7, #6
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	2b09      	cmp	r3, #9
 8003812:	d9ea      	bls.n	80037ea <Delete_AllCard+0xe>
//	    for(uint8_t i=0; i< RFID_MAX_Byte_Card ;i++)
//	      card_code[j][i]=0xff;
  }
  ncard=0;
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <Delete_AllCard+0x4c>)
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
  //Mem_Write(0 ,&reset ,MAX_Byte_Card);
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	20000004 	.word	0x20000004
 8003828:	20000000 	.word	0x20000000

0800382c <Delete_Card>:
/**
  * @brief  None
  * @param  None
  * @retval None
  */
bool Delete_Card(uint8_t *USERnn){
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b085      	sub	sp, #20
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]

  uint8_t nn=0;
 8003834:	210f      	movs	r1, #15
 8003836:	187b      	adds	r3, r7, r1
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
 // ncard-=1;
  if(Card_Authentication(&nn) == HAL_OK){
 800383c:	187b      	adds	r3, r7, r1
 800383e:	0018      	movs	r0, r3
 8003840:	f7ff ff5c 	bl	80036fc <Card_Authentication>
 8003844:	0003      	movs	r3, r0
 8003846:	001a      	movs	r2, r3
 8003848:	2301      	movs	r3, #1
 800384a:	4053      	eors	r3, r2
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d013      	beq.n	800387a <Delete_Card+0x4e>
    Mem_Write(RFID_USER_CARD_START(nn),clr,RFID_MAX_Byte_Card);
 8003852:	240f      	movs	r4, #15
 8003854:	193b      	adds	r3, r7, r4
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	220c      	movs	r2, #12
 800385c:	4353      	muls	r3, r2
 800385e:	b29b      	uxth	r3, r3
 8003860:	3340      	adds	r3, #64	; 0x40
 8003862:	b29b      	uxth	r3, r3
 8003864:	4907      	ldr	r1, [pc, #28]	; (8003884 <Delete_Card+0x58>)
 8003866:	220a      	movs	r2, #10
 8003868:	0018      	movs	r0, r3
 800386a:	f000 f83d 	bl	80038e8 <Mem_Write>
//    for(uint8_t i=0; i< RFID_MAX_Byte_Card ;i++)
//      card_code[nn][i]=0xff;
    USERnn[0] = nn;
 800386e:	193b      	adds	r3, r7, r4
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	701a      	strb	r2, [r3, #0]
    return true;
 8003876:	2301      	movs	r3, #1
 8003878:	e000      	b.n	800387c <Delete_Card+0x50>
  }
  else
    return false;
 800387a:	2300      	movs	r3, #0
}
 800387c:	0018      	movs	r0, r3
 800387e:	46bd      	mov	sp, r7
 8003880:	b005      	add	sp, #20
 8003882:	bd90      	pop	{r4, r7, pc}
 8003884:	20000004 	.word	0x20000004

08003888 <IS_Admin_Card>:
/**
  * @brief  None
  * @param  None
  * @retval None
  */
bool IS_Admin_Card(void){
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
  uint8_t n ;
  uint8_t nn;
  
  n = 0;//Get_Admin_Card_nn();
 800388e:	1dfb      	adds	r3, r7, #7
 8003890:	2200      	movs	r2, #0
 8003892:	701a      	strb	r2, [r3, #0]
  if(Card_Authentication(&nn) == true){
 8003894:	1dbb      	adds	r3, r7, #6
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff ff30 	bl	80036fc <Card_Authentication>
 800389c:	1e03      	subs	r3, r0, #0
 800389e:	d009      	beq.n	80038b4 <IS_Admin_Card+0x2c>
    if(n==nn)
 80038a0:	1dbb      	adds	r3, r7, #6
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	1dfa      	adds	r2, r7, #7
 80038a6:	7812      	ldrb	r2, [r2, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d101      	bne.n	80038b0 <IS_Admin_Card+0x28>
      return true;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e002      	b.n	80038b6 <IS_Admin_Card+0x2e>
    else 
      return false;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e000      	b.n	80038b6 <IS_Admin_Card+0x2e>
  }
  else
    return false;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	0018      	movs	r0, r3
 80038b8:	46bd      	mov	sp, r7
 80038ba:	b002      	add	sp, #8
 80038bc:	bd80      	pop	{r7, pc}
	...

080038c0 <Set_Admin_Card>:
/**
  * @brief  None
  * @param  None
  * @retval None
  */
void Set_Admin_Card(void){
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
  uint8_t usernn;
  
  usernn = 0;/*New_Card();*/
 80038c6:	1dfb      	adds	r3, r7, #7
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
  
  Mem_Write(usernn,card_datacode,10);
 80038cc:	1dfb      	adds	r3, r7, #7
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	4904      	ldr	r1, [pc, #16]	; (80038e4 <Set_Admin_Card+0x24>)
 80038d4:	220a      	movs	r2, #10
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 f806 	bl	80038e8 <Mem_Write>
  
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	2000006c 	.word	0x2000006c

080038e8 <Mem_Write>:
#include "RFID_Mem.h"



bool Mem_Write(uint16_t Address ,void *data ,size_t dataSize)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af04      	add	r7, sp, #16
 80038ee:	60b9      	str	r1, [r7, #8]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	210e      	movs	r1, #14
 80038f4:	187b      	adds	r3, r7, r1
 80038f6:	1c02      	adds	r2, r0, #0
 80038f8:	801a      	strh	r2, [r3, #0]
	if(HAL_I2C_Mem_Write(&DevAddress ,MemAddress ,Address ,MemAddSize ,(uint8_t*)data ,dataSize ,100) == HAL_OK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	187a      	adds	r2, r7, r1
 8003900:	8811      	ldrh	r1, [r2, #0]
 8003902:	480b      	ldr	r0, [pc, #44]	; (8003930 <Mem_Write+0x48>)
 8003904:	2264      	movs	r2, #100	; 0x64
 8003906:	9202      	str	r2, [sp, #8]
 8003908:	9301      	str	r3, [sp, #4]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2302      	movs	r3, #2
 8003910:	000a      	movs	r2, r1
 8003912:	21a0      	movs	r1, #160	; 0xa0
 8003914:	f7fd f830 	bl	8000978 <HAL_I2C_Mem_Write>
 8003918:	1e03      	subs	r3, r0, #0
 800391a:	d104      	bne.n	8003926 <Mem_Write+0x3e>
	{
		HAL_Delay(7);
 800391c:	2007      	movs	r0, #7
 800391e:	f7fc fcc5 	bl	80002ac <HAL_Delay>
		return true;
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <Mem_Write+0x40>
	}
	else
		return false;
 8003926:	2300      	movs	r3, #0
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b004      	add	sp, #16
 800392e:	bd80      	pop	{r7, pc}
 8003930:	200000c0 	.word	0x200000c0

08003934 <Mem_Read>:

bool Mem_Read(uint16_t Address ,void *data ,size_t dataSize)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af04      	add	r7, sp, #16
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	210e      	movs	r1, #14
 8003940:	187b      	adds	r3, r7, r1
 8003942:	1c02      	adds	r2, r0, #0
 8003944:	801a      	strh	r2, [r3, #0]
	if(HAL_I2C_Mem_Read(&DevAddress ,MemAddress ,Address ,MemAddSize ,(uint8_t*)data ,dataSize ,100) == HAL_OK)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	b29b      	uxth	r3, r3
 800394a:	187a      	adds	r2, r7, r1
 800394c:	8811      	ldrh	r1, [r2, #0]
 800394e:	480a      	ldr	r0, [pc, #40]	; (8003978 <Mem_Read+0x44>)
 8003950:	2264      	movs	r2, #100	; 0x64
 8003952:	9202      	str	r2, [sp, #8]
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2302      	movs	r3, #2
 800395c:	000a      	movs	r2, r1
 800395e:	21a0      	movs	r1, #160	; 0xa0
 8003960:	f7fd f94a 	bl	8000bf8 <HAL_I2C_Mem_Read>
 8003964:	1e03      	subs	r3, r0, #0
 8003966:	d101      	bne.n	800396c <Mem_Read+0x38>
		return true;
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <Mem_Read+0x3a>
	else
		return false;
 800396c:	2300      	movs	r3, #0
}
 800396e:	0018      	movs	r0, r3
 8003970:	46bd      	mov	sp, r7
 8003972:	b004      	add	sp, #16
 8003974:	bd80      	pop	{r7, pc}
 8003976:	46c0      	nop			; (mov r8, r8)
 8003978:	200000c0 	.word	0x200000c0

0800397c <card_Manage>:
/**
 * @brief  None
 * @param  None
 * @retval None
 */
void card_Manage(uint8_t mode){
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	0002      	movs	r2, r0
 8003984:	1dfb      	adds	r3, r7, #7
 8003986:	701a      	strb	r2, [r3, #0]

	Detect_card=0;
 8003988:	4b21      	ldr	r3, [pc, #132]	; (8003a10 <card_Manage+0x94>)
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]

	if(mode == NewCard){
 800398e:	1dfb      	adds	r3, r7, #7
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b01      	cmp	r3, #1
 8003994:	d10c      	bne.n	80039b0 <card_Manage+0x34>
		if(Card_Authentication(&USERnn) == true ){
 8003996:	4b1f      	ldr	r3, [pc, #124]	; (8003a14 <card_Manage+0x98>)
 8003998:	0018      	movs	r0, r3
 800399a:	f7ff feaf 	bl	80036fc <Card_Authentication>
 800399e:	1e03      	subs	r3, r0, #0
 80039a0:	d02f      	beq.n	8003a02 <card_Manage+0x86>
			USERnn = New_Card();
 80039a2:	f7ff fe87 	bl	80036b4 <New_Card>
 80039a6:	0003      	movs	r3, r0
 80039a8:	001a      	movs	r2, r3
 80039aa:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <card_Manage+0x98>)
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e028      	b.n	8003a02 <card_Manage+0x86>
		else {
			//ADD_log(UnSuccessful_login ,0);
		}
	}

	else if(mode == Login){
 80039b0:	1dfb      	adds	r3, r7, #7
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d104      	bne.n	80039c2 <card_Manage+0x46>
		if(Card_Authentication(&USERnn) == false ){
 80039b8:	4b16      	ldr	r3, [pc, #88]	; (8003a14 <card_Manage+0x98>)
 80039ba:	0018      	movs	r0, r3
 80039bc:	f7ff fe9e 	bl	80036fc <Card_Authentication>
 80039c0:	e01f      	b.n	8003a02 <card_Manage+0x86>
		else {
			//ADD_log(UnSuccessful_login ,0);
		}
	}

	else if(mode == DeleteCard){
 80039c2:	1dfb      	adds	r3, r7, #7
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b03      	cmp	r3, #3
 80039c8:	d107      	bne.n	80039da <card_Manage+0x5e>
		if(Delete_Card(&USERnn) == true ){
 80039ca:	4b12      	ldr	r3, [pc, #72]	; (8003a14 <card_Manage+0x98>)
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff ff2d 	bl	800382c <Delete_Card>
			//ADD_log(RemoveCard ,USERnn);
		}
		else {
		}
		mode=0;
 80039d2:	1dfb      	adds	r3, r7, #7
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e013      	b.n	8003a02 <card_Manage+0x86>
	}

	else if(mode == DeleteAllCard){
 80039da:	1dfb      	adds	r3, r7, #7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d109      	bne.n	80039f6 <card_Manage+0x7a>
		if(IS_Admin_Card() == true ){
 80039e2:	f7ff ff51 	bl	8003888 <IS_Admin_Card>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d001      	beq.n	80039ee <card_Manage+0x72>
			Delete_AllCard();
 80039ea:	f7ff fef7 	bl	80037dc <Delete_AllCard>
			//ADD_log(RemoveAllCard ,0);
		}
		else{

		}
		mode=0;
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
 80039f4:	e005      	b.n	8003a02 <card_Manage+0x86>
	}

	else if (mode == New_Admin_Card){
 80039f6:	1dfb      	adds	r3, r7, #7
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b07      	cmp	r3, #7
 80039fc:	d101      	bne.n	8003a02 <card_Manage+0x86>
		Set_Admin_Card();
 80039fe:	f7ff ff5f 	bl	80038c0 <Set_Admin_Card>
		//ADD_log(Save_Admin_Card ,0);
	}

	mode = Login;
 8003a02:	1dfb      	adds	r3, r7, #7
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000033 	.word	0x20000033
 8003a14:	200001c4 	.word	0x200001c4

08003a18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a1c:	f7fc fc00 	bl	8000220 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a20:	f000 f870 	bl	8003b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a24:	f000 f994 	bl	8003d50 <MX_GPIO_Init>
  MX_I2C2_Init();
 8003a28:	f000 f8ca 	bl	8003bc0 <MX_I2C2_Init>
  MX_TIM15_Init();
 8003a2c:	f000 f908 	bl	8003c40 <MX_TIM15_Init>
  MX_USART1_UART_Init();
 8003a30:	f000 f95e 	bl	8003cf0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim15);
 8003a34:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <main+0xd4>)
 8003a36:	0018      	movs	r0, r3
 8003a38:	f7fe fa66 	bl	8001f08 <HAL_TIM_Base_Start_IT>
	HAL_UART_Receive_IT(&huart1,&get_rfid ,1);
 8003a3c:	492c      	ldr	r1, [pc, #176]	; (8003af0 <main+0xd8>)
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <main+0xdc>)
 8003a40:	2201      	movs	r2, #1
 8003a42:	0018      	movs	r0, r3
 8003a44:	f7fe fe68 	bl	8002718 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	mode = Login;
 8003a48:	4b2b      	ldr	r3, [pc, #172]	; (8003af8 <main+0xe0>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]

	HAL_Delay(500);
 8003a4e:	23fa      	movs	r3, #250	; 0xfa
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	0018      	movs	r0, r3
 8003a54:	f7fc fc2a 	bl	80002ac <HAL_Delay>
	{


		// HAL_Delay(1);
		/*********************************RFID MANAGE**************************/
		if(!lock_flag){
 8003a58:	4b28      	ldr	r3, [pc, #160]	; (8003afc <main+0xe4>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1fb      	bne.n	8003a58 <main+0x40>

			if(mode == Login && Detect_card){
 8003a60:	4b25      	ldr	r3, [pc, #148]	; (8003af8 <main+0xe0>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <main+0x68>
 8003a68:	4b25      	ldr	r3, [pc, #148]	; (8003b00 <main+0xe8>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d007      	beq.n	8003a80 <main+0x68>
				/* Login */
				Detect_card=0;
 8003a70:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <main+0xe8>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	701a      	strb	r2, [r3, #0]
				card_Manage(mode);
 8003a76:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <main+0xe0>)
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	0018      	movs	r0, r3
 8003a7c:	f7ff ff7e 	bl	800397c <card_Manage>
			}

			if(mode == NewCard && Detect_card){
 8003a80:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <main+0xe0>)
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10e      	bne.n	8003aa6 <main+0x8e>
 8003a88:	4b1d      	ldr	r3, [pc, #116]	; (8003b00 <main+0xe8>)
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00a      	beq.n	8003aa6 <main+0x8e>
				/* NewCard */
				Detect_card=0;
 8003a90:	4b1b      	ldr	r3, [pc, #108]	; (8003b00 <main+0xe8>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	701a      	strb	r2, [r3, #0]
				card_Manage(mode);
 8003a96:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <main+0xe0>)
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f7ff ff6e 	bl	800397c <card_Manage>
				mode = Login;
 8003aa0:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <main+0xe0>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
			}

			if(mode == DeleteCard && Detect_card){
 8003aa6:	4b14      	ldr	r3, [pc, #80]	; (8003af8 <main+0xe0>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	d10c      	bne.n	8003ac8 <main+0xb0>
 8003aae:	4b14      	ldr	r3, [pc, #80]	; (8003b00 <main+0xe8>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <main+0xb0>
				/* DeleteCard */
				Detect_card=0;
 8003ab6:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <main+0xe8>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	701a      	strb	r2, [r3, #0]
				card_Manage(DeleteCard);
 8003abc:	2003      	movs	r0, #3
 8003abe:	f7ff ff5d 	bl	800397c <card_Manage>
				mode = Login;
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <main+0xe0>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	701a      	strb	r2, [r3, #0]
			}

			if(mode == DeleteAllCard && Detect_card){
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <main+0xe0>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b04      	cmp	r3, #4
 8003ace:	d1c3      	bne.n	8003a58 <main+0x40>
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <main+0xe8>)
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0bf      	beq.n	8003a58 <main+0x40>
				/* DeleteAllCard */
				Detect_card=0;
 8003ad8:	4b09      	ldr	r3, [pc, #36]	; (8003b00 <main+0xe8>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	701a      	strb	r2, [r3, #0]
				card_Manage(DeleteAllCard);
 8003ade:	2004      	movs	r0, #4
 8003ae0:	f7ff ff4c 	bl	800397c <card_Manage>
				mode = Login;
 8003ae4:	4b04      	ldr	r3, [pc, #16]	; (8003af8 <main+0xe0>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	701a      	strb	r2, [r3, #0]
		if(!lock_flag){
 8003aea:	e7b5      	b.n	8003a58 <main+0x40>
 8003aec:	20000080 	.word	0x20000080
 8003af0:	2000007c 	.word	0x2000007c
 8003af4:	20000130 	.word	0x20000130
 8003af8:	2000000e 	.word	0x2000000e
 8003afc:	20000030 	.word	0x20000030
 8003b00:	20000033 	.word	0x20000033

08003b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b04:	b590      	push	{r4, r7, lr}
 8003b06:	b097      	sub	sp, #92	; 0x5c
 8003b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b0a:	2428      	movs	r4, #40	; 0x28
 8003b0c:	193b      	adds	r3, r7, r4
 8003b0e:	0018      	movs	r0, r3
 8003b10:	2330      	movs	r3, #48	; 0x30
 8003b12:	001a      	movs	r2, r3
 8003b14:	2100      	movs	r1, #0
 8003b16:	f000 fbc3 	bl	80042a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b1a:	2318      	movs	r3, #24
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	0018      	movs	r0, r3
 8003b20:	2310      	movs	r3, #16
 8003b22:	001a      	movs	r2, r3
 8003b24:	2100      	movs	r1, #0
 8003b26:	f000 fbbb 	bl	80042a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b2a:	1d3b      	adds	r3, r7, #4
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	2314      	movs	r3, #20
 8003b30:	001a      	movs	r2, r3
 8003b32:	2100      	movs	r1, #0
 8003b34:	f000 fbb4 	bl	80042a0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b38:	0021      	movs	r1, r4
 8003b3a:	187b      	adds	r3, r7, r1
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b40:	187b      	adds	r3, r7, r1
 8003b42:	2201      	movs	r2, #1
 8003b44:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b46:	187b      	adds	r3, r7, r1
 8003b48:	2202      	movs	r2, #2
 8003b4a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b4c:	187b      	adds	r3, r7, r1
 8003b4e:	2280      	movs	r2, #128	; 0x80
 8003b50:	0252      	lsls	r2, r2, #9
 8003b52:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	2200      	movs	r2, #0
 8003b58:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003b5a:	187b      	adds	r3, r7, r1
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7fd fc66 	bl	8001434 <HAL_RCC_OscConfig>
 8003b68:	1e03      	subs	r3, r0, #0
 8003b6a:	d001      	beq.n	8003b70 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8003b6c:	f000 f972 	bl	8003e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b70:	2118      	movs	r1, #24
 8003b72:	187b      	adds	r3, r7, r1
 8003b74:	2207      	movs	r2, #7
 8003b76:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b78:	187b      	adds	r3, r7, r1
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b7e:	187b      	adds	r3, r7, r1
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b84:	187b      	adds	r3, r7, r1
 8003b86:	2200      	movs	r2, #0
 8003b88:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003b8a:	187b      	adds	r3, r7, r1
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f7fd ff44 	bl	8001a1c <HAL_RCC_ClockConfig>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d001      	beq.n	8003b9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003b98:	f000 f95c 	bl	8003e54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ba8:	1d3b      	adds	r3, r7, #4
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7fe f8a2 	bl	8001cf4 <HAL_RCCEx_PeriphCLKConfig>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d001      	beq.n	8003bb8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8003bb4:	f000 f94e 	bl	8003e54 <Error_Handler>
  }
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b017      	add	sp, #92	; 0x5c
 8003bbe:	bd90      	pop	{r4, r7, pc}

08003bc0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <MX_I2C2_Init+0x78>)
 8003bc8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x2000090E;
 8003bca:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bcc:	4a1b      	ldr	r2, [pc, #108]	; (8003c3c <MX_I2C2_Init+0x7c>)
 8003bce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bd8:	2201      	movs	r2, #1
 8003bda:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003bdc:	4b15      	ldr	r3, [pc, #84]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003be8:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003bee:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003bfa:	4b0e      	ldr	r3, [pc, #56]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f7fc fe25 	bl	800084c <HAL_I2C_Init>
 8003c02:	1e03      	subs	r3, r0, #0
 8003c04:	d001      	beq.n	8003c0a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003c06:	f000 f925 	bl	8003e54 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003c0a:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f7fd fb76 	bl	8001300 <HAL_I2CEx_ConfigAnalogFilter>
 8003c14:	1e03      	subs	r3, r0, #0
 8003c16:	d001      	beq.n	8003c1c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003c18:	f000 f91c 	bl	8003e54 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003c1c:	4b05      	ldr	r3, [pc, #20]	; (8003c34 <MX_I2C2_Init+0x74>)
 8003c1e:	2100      	movs	r1, #0
 8003c20:	0018      	movs	r0, r3
 8003c22:	f7fd fbb9 	bl	8001398 <HAL_I2CEx_ConfigDigitalFilter>
 8003c26:	1e03      	subs	r3, r0, #0
 8003c28:	d001      	beq.n	8003c2e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003c2a:	f000 f913 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	200000c0 	.word	0x200000c0
 8003c38:	40005800 	.word	0x40005800
 8003c3c:	2000090e 	.word	0x2000090e

08003c40 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c46:	2308      	movs	r3, #8
 8003c48:	18fb      	adds	r3, r7, r3
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	001a      	movs	r2, r3
 8003c50:	2100      	movs	r1, #0
 8003c52:	f000 fb25 	bl	80042a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c56:	003b      	movs	r3, r7
 8003c58:	0018      	movs	r0, r3
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	2100      	movs	r1, #0
 8003c60:	f000 fb1e 	bl	80042a0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8003c64:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003c66:	4a20      	ldr	r2, [pc, #128]	; (8003ce8 <MX_TIM15_Init+0xa8>)
 8003c68:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 15;
 8003c6a:	4b1e      	ldr	r3, [pc, #120]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003c6c:	220f      	movs	r2, #15
 8003c6e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003c78:	4a1c      	ldr	r2, [pc, #112]	; (8003cec <MX_TIM15_Init+0xac>)
 8003c7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c7c:	4b19      	ldr	r3, [pc, #100]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003c82:	4b18      	ldr	r3, [pc, #96]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c88:	4b16      	ldr	r3, [pc, #88]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003c8e:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003c90:	0018      	movs	r0, r3
 8003c92:	f7fe f90d 	bl	8001eb0 <HAL_TIM_Base_Init>
 8003c96:	1e03      	subs	r3, r0, #0
 8003c98:	d001      	beq.n	8003c9e <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 8003c9a:	f000 f8db 	bl	8003e54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c9e:	2108      	movs	r1, #8
 8003ca0:	187b      	adds	r3, r7, r1
 8003ca2:	2280      	movs	r2, #128	; 0x80
 8003ca4:	0152      	lsls	r2, r2, #5
 8003ca6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003ca8:	187a      	adds	r2, r7, r1
 8003caa:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003cac:	0011      	movs	r1, r2
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f7fe fa5a 	bl	8002168 <HAL_TIM_ConfigClockSource>
 8003cb4:	1e03      	subs	r3, r0, #0
 8003cb6:	d001      	beq.n	8003cbc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003cb8:	f000 f8cc 	bl	8003e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cbc:	003b      	movs	r3, r7
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cc2:	003b      	movs	r3, r7
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003cc8:	003a      	movs	r2, r7
 8003cca:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <MX_TIM15_Init+0xa4>)
 8003ccc:	0011      	movs	r1, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7fe fc76 	bl	80025c0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cd4:	1e03      	subs	r3, r0, #0
 8003cd6:	d001      	beq.n	8003cdc <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003cd8:	f000 f8bc 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003cdc:	46c0      	nop			; (mov r8, r8)
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	b006      	add	sp, #24
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	20000080 	.word	0x20000080
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	000003e7 	.word	0x000003e7

08003cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003cf4:	4b14      	ldr	r3, [pc, #80]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003cf6:	4a15      	ldr	r2, [pc, #84]	; (8003d4c <MX_USART1_UART_Init+0x5c>)
 8003cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003cfc:	2296      	movs	r2, #150	; 0x96
 8003cfe:	0192      	lsls	r2, r2, #6
 8003d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d02:	4b11      	ldr	r3, [pc, #68]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d0e:	4b0e      	ldr	r3, [pc, #56]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003d14:	4b0c      	ldr	r3, [pc, #48]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d16:	220c      	movs	r2, #12
 8003d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003d20:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003d26:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003d2c:	4b06      	ldr	r3, [pc, #24]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003d32:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <MX_USART1_UART_Init+0x58>)
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7fe fc97 	bl	8002668 <HAL_UART_Init>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d001      	beq.n	8003d42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003d3e:	f000 f889 	bl	8003e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20000130 	.word	0x20000130
 8003d4c:	40013800 	.word	0x40013800

08003d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003d50:	b590      	push	{r4, r7, lr}
 8003d52:	b08b      	sub	sp, #44	; 0x2c
 8003d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d56:	2414      	movs	r4, #20
 8003d58:	193b      	adds	r3, r7, r4
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	2314      	movs	r3, #20
 8003d5e:	001a      	movs	r2, r3
 8003d60:	2100      	movs	r1, #0
 8003d62:	f000 fa9d 	bl	80042a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d66:	4b38      	ldr	r3, [pc, #224]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	4b37      	ldr	r3, [pc, #220]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003d6c:	2180      	movs	r1, #128	; 0x80
 8003d6e:	0309      	lsls	r1, r1, #12
 8003d70:	430a      	orrs	r2, r1
 8003d72:	615a      	str	r2, [r3, #20]
 8003d74:	4b34      	ldr	r3, [pc, #208]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003d76:	695a      	ldr	r2, [r3, #20]
 8003d78:	2380      	movs	r3, #128	; 0x80
 8003d7a:	031b      	lsls	r3, r3, #12
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003d82:	4b31      	ldr	r3, [pc, #196]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003d84:	695a      	ldr	r2, [r3, #20]
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	03c9      	lsls	r1, r1, #15
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	615a      	str	r2, [r3, #20]
 8003d90:	4b2d      	ldr	r3, [pc, #180]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003d92:	695a      	ldr	r2, [r3, #20]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	03db      	lsls	r3, r3, #15
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003da0:	695a      	ldr	r2, [r3, #20]
 8003da2:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	0289      	lsls	r1, r1, #10
 8003da8:	430a      	orrs	r2, r1
 8003daa:	615a      	str	r2, [r3, #20]
 8003dac:	4b26      	ldr	r3, [pc, #152]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003dae:	695a      	ldr	r2, [r3, #20]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	029b      	lsls	r3, r3, #10
 8003db4:	4013      	ands	r3, r2
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	4b22      	ldr	r3, [pc, #136]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003dc0:	2180      	movs	r1, #128	; 0x80
 8003dc2:	02c9      	lsls	r1, r1, #11
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	615a      	str	r2, [r3, #20]
 8003dc8:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <MX_GPIO_Init+0xf8>)
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	2380      	movs	r3, #128	; 0x80
 8003dce:	02db      	lsls	r3, r3, #11
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	607b      	str	r3, [r7, #4]
 8003dd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003dd6:	2380      	movs	r3, #128	; 0x80
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	481c      	ldr	r0, [pc, #112]	; (8003e4c <MX_GPIO_Init+0xfc>)
 8003ddc:	2200      	movs	r2, #0
 8003dde:	0019      	movs	r1, r3
 8003de0:	f7fc fd16 	bl	8000810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 8003de4:	4b1a      	ldr	r3, [pc, #104]	; (8003e50 <MX_GPIO_Init+0x100>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	2120      	movs	r1, #32
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7fc fd10 	bl	8000810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003df0:	193b      	adds	r3, r7, r4
 8003df2:	2280      	movs	r2, #128	; 0x80
 8003df4:	0192      	lsls	r2, r2, #6
 8003df6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	193b      	adds	r3, r7, r4
 8003e00:	2200      	movs	r2, #0
 8003e02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e04:	0021      	movs	r1, r4
 8003e06:	193b      	adds	r3, r7, r4
 8003e08:	2200      	movs	r2, #0
 8003e0a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e0c:	000c      	movs	r4, r1
 8003e0e:	187b      	adds	r3, r7, r1
 8003e10:	4a0e      	ldr	r2, [pc, #56]	; (8003e4c <MX_GPIO_Init+0xfc>)
 8003e12:	0019      	movs	r1, r3
 8003e14:	0010      	movs	r0, r2
 8003e16:	f7fc fb87 	bl	8000528 <HAL_GPIO_Init>

  /*Configure GPIO pin : RELAY_Pin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8003e1a:	0021      	movs	r1, r4
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	2220      	movs	r2, #32
 8003e20:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e22:	187b      	adds	r3, r7, r1
 8003e24:	2201      	movs	r2, #1
 8003e26:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e28:	187b      	adds	r3, r7, r1
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e2e:	187b      	adds	r3, r7, r1
 8003e30:	2200      	movs	r2, #0
 8003e32:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8003e34:	187b      	adds	r3, r7, r1
 8003e36:	4a06      	ldr	r2, [pc, #24]	; (8003e50 <MX_GPIO_Init+0x100>)
 8003e38:	0019      	movs	r1, r3
 8003e3a:	0010      	movs	r0, r2
 8003e3c:	f7fc fb74 	bl	8000528 <HAL_GPIO_Init>

}
 8003e40:	46c0      	nop			; (mov r8, r8)
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b00b      	add	sp, #44	; 0x2c
 8003e46:	bd90      	pop	{r4, r7, pc}
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	48000800 	.word	0x48000800
 8003e50:	48000400 	.word	0x48000400

08003e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e58:	46c0      	nop			; (mov r8, r8)
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e68:	699a      	ldr	r2, [r3, #24]
 8003e6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	619a      	str	r2, [r3, #24]
 8003e72:	4b0c      	ldr	r3, [pc, #48]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	2201      	movs	r2, #1
 8003e78:	4013      	ands	r3, r2
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e7e:	4b09      	ldr	r3, [pc, #36]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e80:	69da      	ldr	r2, [r3, #28]
 8003e82:	4b08      	ldr	r3, [pc, #32]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e84:	2180      	movs	r1, #128	; 0x80
 8003e86:	0549      	lsls	r1, r1, #21
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <HAL_MspInit+0x44>)
 8003e8e:	69da      	ldr	r2, [r3, #28]
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	055b      	lsls	r3, r3, #21
 8003e94:	4013      	ands	r3, r2
 8003e96:	603b      	str	r3, [r7, #0]
 8003e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e9a:	46c0      	nop			; (mov r8, r8)
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	b002      	add	sp, #8
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	40021000 	.word	0x40021000

08003ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eb0:	2314      	movs	r3, #20
 8003eb2:	18fb      	adds	r3, r7, r3
 8003eb4:	0018      	movs	r0, r3
 8003eb6:	2314      	movs	r3, #20
 8003eb8:	001a      	movs	r2, r3
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f000 f9f0 	bl	80042a0 <memset>
  if(hi2c->Instance==I2C2)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a1a      	ldr	r2, [pc, #104]	; (8003f30 <HAL_I2C_MspInit+0x88>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d12e      	bne.n	8003f28 <HAL_I2C_MspInit+0x80>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eca:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_I2C_MspInit+0x8c>)
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_I2C_MspInit+0x8c>)
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	03c9      	lsls	r1, r1, #15
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	615a      	str	r2, [r3, #20]
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <HAL_I2C_MspInit+0x8c>)
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	2380      	movs	r3, #128	; 0x80
 8003ede:	03db      	lsls	r3, r3, #15
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]
 8003ee4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF6     ------> I2C2_SCL
    PF7     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ee6:	2114      	movs	r1, #20
 8003ee8:	187b      	adds	r3, r7, r1
 8003eea:	22c0      	movs	r2, #192	; 0xc0
 8003eec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003eee:	187b      	adds	r3, r7, r1
 8003ef0:	2212      	movs	r2, #18
 8003ef2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ef4:	187b      	adds	r3, r7, r1
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003efa:	187b      	adds	r3, r7, r1
 8003efc:	2203      	movs	r2, #3
 8003efe:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f00:	187b      	adds	r3, r7, r1
 8003f02:	4a0d      	ldr	r2, [pc, #52]	; (8003f38 <HAL_I2C_MspInit+0x90>)
 8003f04:	0019      	movs	r1, r3
 8003f06:	0010      	movs	r0, r2
 8003f08:	f7fc fb0e 	bl	8000528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f0c:	4b09      	ldr	r3, [pc, #36]	; (8003f34 <HAL_I2C_MspInit+0x8c>)
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <HAL_I2C_MspInit+0x8c>)
 8003f12:	2180      	movs	r1, #128	; 0x80
 8003f14:	03c9      	lsls	r1, r1, #15
 8003f16:	430a      	orrs	r2, r1
 8003f18:	61da      	str	r2, [r3, #28]
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_I2C_MspInit+0x8c>)
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	03db      	lsls	r3, r3, #15
 8003f22:	4013      	ands	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003f28:	46c0      	nop			; (mov r8, r8)
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	b00a      	add	sp, #40	; 0x28
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40005800 	.word	0x40005800
 8003f34:	40021000 	.word	0x40021000
 8003f38:	48001400 	.word	0x48001400

08003f3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM15)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0e      	ldr	r2, [pc, #56]	; (8003f84 <HAL_TIM_Base_MspInit+0x48>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d115      	bne.n	8003f7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <HAL_TIM_Base_MspInit+0x4c>)
 8003f50:	699a      	ldr	r2, [r3, #24]
 8003f52:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <HAL_TIM_Base_MspInit+0x4c>)
 8003f54:	2180      	movs	r1, #128	; 0x80
 8003f56:	0249      	lsls	r1, r1, #9
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	619a      	str	r2, [r3, #24]
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <HAL_TIM_Base_MspInit+0x4c>)
 8003f5e:	699a      	ldr	r2, [r3, #24]
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	025b      	lsls	r3, r3, #9
 8003f64:	4013      	ands	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	2014      	movs	r0, #20
 8003f70:	f7fc fa62 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003f74:	2014      	movs	r0, #20
 8003f76:	f7fc fa74 	bl	8000462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	b004      	add	sp, #16
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40021000 	.word	0x40021000

08003f8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	; 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f94:	2314      	movs	r3, #20
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	0018      	movs	r0, r3
 8003f9a:	2314      	movs	r3, #20
 8003f9c:	001a      	movs	r2, r3
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	f000 f97e 	bl	80042a0 <memset>
  if(huart->Instance==USART1)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a21      	ldr	r2, [pc, #132]	; (8004030 <HAL_UART_MspInit+0xa4>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d13b      	bne.n	8004026 <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_UART_MspInit+0xa8>)
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <HAL_UART_MspInit+0xa8>)
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	01c9      	lsls	r1, r1, #7
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	619a      	str	r2, [r3, #24]
 8003fbc:	4b1d      	ldr	r3, [pc, #116]	; (8004034 <HAL_UART_MspInit+0xa8>)
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	01db      	lsls	r3, r3, #7
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	613b      	str	r3, [r7, #16]
 8003fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_UART_MspInit+0xa8>)
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_UART_MspInit+0xa8>)
 8003fd0:	2180      	movs	r1, #128	; 0x80
 8003fd2:	0289      	lsls	r1, r1, #10
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	615a      	str	r2, [r3, #20]
 8003fd8:	4b16      	ldr	r3, [pc, #88]	; (8004034 <HAL_UART_MspInit+0xa8>)
 8003fda:	695a      	ldr	r2, [r3, #20]
 8003fdc:	2380      	movs	r3, #128	; 0x80
 8003fde:	029b      	lsls	r3, r3, #10
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003fe6:	2114      	movs	r1, #20
 8003fe8:	187b      	adds	r3, r7, r1
 8003fea:	22c0      	movs	r2, #192	; 0xc0
 8003fec:	00d2      	lsls	r2, r2, #3
 8003fee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff0:	187b      	adds	r3, r7, r1
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	187b      	adds	r3, r7, r1
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	2203      	movs	r2, #3
 8004000:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004002:	187b      	adds	r3, r7, r1
 8004004:	2201      	movs	r2, #1
 8004006:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004008:	187a      	adds	r2, r7, r1
 800400a:	2390      	movs	r3, #144	; 0x90
 800400c:	05db      	lsls	r3, r3, #23
 800400e:	0011      	movs	r1, r2
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc fa89 	bl	8000528 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004016:	2200      	movs	r2, #0
 8004018:	2100      	movs	r1, #0
 800401a:	201b      	movs	r0, #27
 800401c:	f7fc fa0c 	bl	8000438 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004020:	201b      	movs	r0, #27
 8004022:	f7fc fa1e 	bl	8000462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b00a      	add	sp, #40	; 0x28
 800402c:	bd80      	pop	{r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	40013800 	.word	0x40013800
 8004034:	40021000 	.word	0x40021000

08004038 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004046:	e7fe      	b.n	8004046 <HardFault_Handler+0x4>

08004048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004060:	f7fc f90e 	bl	8000280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
	...

0800406c <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004070:	4b03      	ldr	r3, [pc, #12]	; (8004080 <TIM15_IRQHandler+0x14>)
 8004072:	0018      	movs	r0, r3
 8004074:	f7fd ff61 	bl	8001f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004078:	46c0      	nop			; (mov r8, r8)
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	46c0      	nop			; (mov r8, r8)
 8004080:	20000080 	.word	0x20000080

08004084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004088:	4b03      	ldr	r3, [pc, #12]	; (8004098 <USART1_IRQHandler+0x14>)
 800408a:	0018      	movs	r0, r3
 800408c:	f7fe fbce 	bl	800282c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004090:	46c0      	nop			; (mov r8, r8)
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	46c0      	nop			; (mov r8, r8)
 8004098:	20000130 	.word	0x20000130

0800409c <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80040a0:	4b1a      	ldr	r3, [pc, #104]	; (800410c <SystemInit+0x70>)
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	4b19      	ldr	r3, [pc, #100]	; (800410c <SystemInit+0x70>)
 80040a6:	2101      	movs	r1, #1
 80040a8:	430a      	orrs	r2, r1
 80040aa:	601a      	str	r2, [r3, #0]

#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
 80040ac:	4b17      	ldr	r3, [pc, #92]	; (800410c <SystemInit+0x70>)
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	4b16      	ldr	r3, [pc, #88]	; (800410c <SystemInit+0x70>)
 80040b2:	4917      	ldr	r1, [pc, #92]	; (8004110 <SystemInit+0x74>)
 80040b4:	400a      	ands	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <SystemInit+0x70>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b13      	ldr	r3, [pc, #76]	; (800410c <SystemInit+0x70>)
 80040be:	4915      	ldr	r1, [pc, #84]	; (8004114 <SystemInit+0x78>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80040c4:	4b11      	ldr	r3, [pc, #68]	; (800410c <SystemInit+0x70>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b10      	ldr	r3, [pc, #64]	; (800410c <SystemInit+0x70>)
 80040ca:	4913      	ldr	r1, [pc, #76]	; (8004118 <SystemInit+0x7c>)
 80040cc:	400a      	ands	r2, r1
 80040ce:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80040d0:	4b0e      	ldr	r3, [pc, #56]	; (800410c <SystemInit+0x70>)
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <SystemInit+0x70>)
 80040d6:	4911      	ldr	r1, [pc, #68]	; (800411c <SystemInit+0x80>)
 80040d8:	400a      	ands	r2, r1
 80040da:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80040dc:	4b0b      	ldr	r3, [pc, #44]	; (800410c <SystemInit+0x70>)
 80040de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e0:	4b0a      	ldr	r3, [pc, #40]	; (800410c <SystemInit+0x70>)
 80040e2:	210f      	movs	r1, #15
 80040e4:	438a      	bics	r2, r1
 80040e6:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
#elif defined (STM32F051x8) || defined (STM32F058xx)
  /* Reset USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEACU;
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <SystemInit+0x70>)
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	4b07      	ldr	r3, [pc, #28]	; (800410c <SystemInit+0x70>)
 80040ee:	490c      	ldr	r1, [pc, #48]	; (8004120 <SystemInit+0x84>)
 80040f0:	400a      	ands	r2, r1
 80040f2:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <SystemInit+0x70>)
 80040f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f8:	4b04      	ldr	r3, [pc, #16]	; (800410c <SystemInit+0x70>)
 80040fa:	2101      	movs	r1, #1
 80040fc:	438a      	bics	r2, r1
 80040fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004100:	4b02      	ldr	r3, [pc, #8]	; (800410c <SystemInit+0x70>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]

}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	40021000 	.word	0x40021000
 8004110:	f8ffb80c 	.word	0xf8ffb80c
 8004114:	fef6ffff 	.word	0xfef6ffff
 8004118:	fffbffff 	.word	0xfffbffff
 800411c:	ffc0ffff 	.word	0xffc0ffff
 8004120:	fffffeac 	.word	0xfffffeac

08004124 <HAL_UART_TxCpltCallback>:
extern TIM_HandleTypeDef htim2;




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART1){
//    HAL_UART_Transmit_IT(&huart1, (uint8_t *)0x00, 1);
  }
  UNUSED(huart);
}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	b002      	add	sp, #8
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  if(huart -> Instance == USART2){
  }
  if(huart ->Instance ==USART1){
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a08      	ldr	r2, [pc, #32]	; (8004164 <HAL_UART_RxCpltCallback+0x30>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10a      	bne.n	800415c <HAL_UART_RxCpltCallback+0x28>
    RFID_getCode(get_rfid);
 8004146:	4b08      	ldr	r3, [pc, #32]	; (8004168 <HAL_UART_RxCpltCallback+0x34>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	0018      	movs	r0, r3
 800414c:	f7ff f87e 	bl	800324c <RFID_getCode>
    HAL_UART_Receive_IT(&huart1,&get_rfid,1);
 8004150:	4905      	ldr	r1, [pc, #20]	; (8004168 <HAL_UART_RxCpltCallback+0x34>)
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <HAL_UART_RxCpltCallback+0x38>)
 8004154:	2201      	movs	r2, #1
 8004156:	0018      	movs	r0, r3
 8004158:	f7fe fade 	bl	8002718 <HAL_UART_Receive_IT>
  }
  UNUSED(huart);
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40013800 	.word	0x40013800
 8004168:	2000007c 	.word	0x2000007c
 800416c:	20000130 	.word	0x20000130

08004170 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  if(htim -> Instance == TIM15){
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a19      	ldr	r2, [pc, #100]	; (80041e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d12b      	bne.n	80041da <HAL_TIM_PeriodElapsedCallback+0x6a>
	  if(--RFID_CNT==0){
 8004182:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	1e5a      	subs	r2, r3, #1
 8004188:	4b17      	ldr	r3, [pc, #92]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	4b16      	ldr	r3, [pc, #88]	; (80041e8 <HAL_TIM_PeriodElapsedCallback+0x78>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d102      	bne.n	800419a <HAL_TIM_PeriodElapsedCallback+0x2a>
	  flag=0;
 8004194:	4b15      	ldr	r3, [pc, #84]	; (80041ec <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004196:	2200      	movs	r2, #0
 8004198:	701a      	strb	r2, [r3, #0]
	}


	  if(++lock_time_cnt>=60000){
 800419a:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	4b12      	ldr	r3, [pc, #72]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a12      	ldr	r2, [pc, #72]	; (80041f4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d915      	bls.n	80041da <HAL_TIM_PeriodElapsedCallback+0x6a>
		  lock_time_cnt=0;
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	601a      	str	r2, [r3, #0]
		  if(++lock_time>_lock_time){
 80041b4:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	3301      	adds	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80041be:	801a      	strh	r2, [r3, #0]
 80041c0:	4b0d      	ldr	r3, [pc, #52]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d908      	bls.n	80041da <HAL_TIM_PeriodElapsedCallback+0x6a>
			  lock_time=0;
 80041c8:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	801a      	strh	r2, [r3, #0]
			  unsuccess_login_num=0;
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
			  lock_flag=0;
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	701a      	strb	r2, [r3, #0]

  }


  UNUSED(htim);
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46bd      	mov	sp, r7
 80041de:	b002      	add	sp, #8
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	46c0      	nop			; (mov r8, r8)
 80041e4:	40014000 	.word	0x40014000
 80041e8:	20000038 	.word	0x20000038
 80041ec:	2000003c 	.word	0x2000003c
 80041f0:	20000040 	.word	0x20000040
 80041f4:	0000ea5f 	.word	0x0000ea5f
 80041f8:	20000044 	.word	0x20000044
 80041fc:	20000031 	.word	0x20000031
 8004200:	20000030 	.word	0x20000030

08004204 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004204:	480d      	ldr	r0, [pc, #52]	; (800423c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004206:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004208:	480d      	ldr	r0, [pc, #52]	; (8004240 <LoopForever+0x6>)
  ldr r1, =_edata
 800420a:	490e      	ldr	r1, [pc, #56]	; (8004244 <LoopForever+0xa>)
  ldr r2, =_sidata
 800420c:	4a0e      	ldr	r2, [pc, #56]	; (8004248 <LoopForever+0xe>)
  movs r3, #0
 800420e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004210:	e002      	b.n	8004218 <LoopCopyDataInit>

08004212 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004212:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004214:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004216:	3304      	adds	r3, #4

08004218 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004218:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800421a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800421c:	d3f9      	bcc.n	8004212 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800421e:	4a0b      	ldr	r2, [pc, #44]	; (800424c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004220:	4c0b      	ldr	r4, [pc, #44]	; (8004250 <LoopForever+0x16>)
  movs r3, #0
 8004222:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004224:	e001      	b.n	800422a <LoopFillZerobss>

08004226 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004226:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004228:	3204      	adds	r2, #4

0800422a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800422a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800422c:	d3fb      	bcc.n	8004226 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800422e:	f7ff ff35 	bl	800409c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004232:	f000 f811 	bl	8004258 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004236:	f7ff fbef 	bl	8003a18 <main>

0800423a <LoopForever>:

LoopForever:
    b LoopForever
 800423a:	e7fe      	b.n	800423a <LoopForever>
  ldr   r0, =_estack
 800423c:	20001fff 	.word	0x20001fff
  ldr r0, =_sdata
 8004240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004244:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8004248:	08004368 	.word	0x08004368
  ldr r2, =_sbss
 800424c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8004250:	200001c8 	.word	0x200001c8

08004254 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004254:	e7fe      	b.n	8004254 <ADC1_COMP_IRQHandler>
	...

08004258 <__libc_init_array>:
 8004258:	b570      	push	{r4, r5, r6, lr}
 800425a:	2600      	movs	r6, #0
 800425c:	4d0c      	ldr	r5, [pc, #48]	; (8004290 <__libc_init_array+0x38>)
 800425e:	4c0d      	ldr	r4, [pc, #52]	; (8004294 <__libc_init_array+0x3c>)
 8004260:	1b64      	subs	r4, r4, r5
 8004262:	10a4      	asrs	r4, r4, #2
 8004264:	42a6      	cmp	r6, r4
 8004266:	d109      	bne.n	800427c <__libc_init_array+0x24>
 8004268:	2600      	movs	r6, #0
 800426a:	f000 f821 	bl	80042b0 <_init>
 800426e:	4d0a      	ldr	r5, [pc, #40]	; (8004298 <__libc_init_array+0x40>)
 8004270:	4c0a      	ldr	r4, [pc, #40]	; (800429c <__libc_init_array+0x44>)
 8004272:	1b64      	subs	r4, r4, r5
 8004274:	10a4      	asrs	r4, r4, #2
 8004276:	42a6      	cmp	r6, r4
 8004278:	d105      	bne.n	8004286 <__libc_init_array+0x2e>
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	00b3      	lsls	r3, r6, #2
 800427e:	58eb      	ldr	r3, [r5, r3]
 8004280:	4798      	blx	r3
 8004282:	3601      	adds	r6, #1
 8004284:	e7ee      	b.n	8004264 <__libc_init_array+0xc>
 8004286:	00b3      	lsls	r3, r6, #2
 8004288:	58eb      	ldr	r3, [r5, r3]
 800428a:	4798      	blx	r3
 800428c:	3601      	adds	r6, #1
 800428e:	e7f2      	b.n	8004276 <__libc_init_array+0x1e>
 8004290:	08004360 	.word	0x08004360
 8004294:	08004360 	.word	0x08004360
 8004298:	08004360 	.word	0x08004360
 800429c:	08004364 	.word	0x08004364

080042a0 <memset>:
 80042a0:	0003      	movs	r3, r0
 80042a2:	1812      	adds	r2, r2, r0
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d100      	bne.n	80042aa <memset+0xa>
 80042a8:	4770      	bx	lr
 80042aa:	7019      	strb	r1, [r3, #0]
 80042ac:	3301      	adds	r3, #1
 80042ae:	e7f9      	b.n	80042a4 <memset+0x4>

080042b0 <_init>:
 80042b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042b6:	bc08      	pop	{r3}
 80042b8:	469e      	mov	lr, r3
 80042ba:	4770      	bx	lr

080042bc <_fini>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c2:	bc08      	pop	{r3}
 80042c4:	469e      	mov	lr, r3
 80042c6:	4770      	bx	lr
